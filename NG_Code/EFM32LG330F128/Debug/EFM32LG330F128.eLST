
EFM32LG330F128.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000d8  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f10  000000e0  000000e0  000080e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  00001ff0  00001ff0  00009ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  00001ff4  00001ff4  00009ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000008  20000000  00001ff8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000041b4  20000008  00002000  00010008  2**2
                  ALLOC
  6 ._user_heap_stack 00000100  200041bc  00002000  000141bc  2**0
                  ALLOC
  7 .ARM.attributes 00000029  00000000  00000000  00010008  2**0
                  CONTENTS, READONLY
  8 .debug_info   00004396  00000000  00000000  00010031  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000101d  00000000  00000000  000143c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000480  00000000  00000000  000153e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003e0  00000000  00000000  00015864  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002595  00000000  00000000  00015c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001928  00000000  00000000  000181d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000070  00000000  00000000  00019b01  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000011e0  00000000  00000000  00019b74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000000e0 <__do_global_dtors_aux>:
      e0:	b510      	push	{r4, lr}
      e2:	4c05      	ldr	r4, [pc, #20]	; (f8 <__do_global_dtors_aux+0x18>)
      e4:	7823      	ldrb	r3, [r4, #0]
      e6:	b933      	cbnz	r3, f6 <__do_global_dtors_aux+0x16>
      e8:	4b04      	ldr	r3, [pc, #16]	; (fc <__do_global_dtors_aux+0x1c>)
      ea:	b113      	cbz	r3, f2 <__do_global_dtors_aux+0x12>
      ec:	4804      	ldr	r0, [pc, #16]	; (100 <_Min_Stack_Size>)
      ee:	f3af 8000 	nop.w
      f2:	2301      	movs	r3, #1
      f4:	7023      	strb	r3, [r4, #0]
      f6:	bd10      	pop	{r4, pc}
      f8:	20000008 	.word	0x20000008
      fc:	00000000 	.word	0x00000000
     100:	00001fd8 	.word	0x00001fd8

00000104 <frame_dummy>:
     104:	4b08      	ldr	r3, [pc, #32]	; (128 <frame_dummy+0x24>)
     106:	b510      	push	{r4, lr}
     108:	b11b      	cbz	r3, 112 <frame_dummy+0xe>
     10a:	4808      	ldr	r0, [pc, #32]	; (12c <frame_dummy+0x28>)
     10c:	4908      	ldr	r1, [pc, #32]	; (130 <frame_dummy+0x2c>)
     10e:	f3af 8000 	nop.w
     112:	4808      	ldr	r0, [pc, #32]	; (134 <frame_dummy+0x30>)
     114:	6803      	ldr	r3, [r0, #0]
     116:	b903      	cbnz	r3, 11a <frame_dummy+0x16>
     118:	bd10      	pop	{r4, pc}
     11a:	4b07      	ldr	r3, [pc, #28]	; (138 <frame_dummy+0x34>)
     11c:	2b00      	cmp	r3, #0
     11e:	d0fb      	beq.n	118 <frame_dummy+0x14>
     120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     124:	4718      	bx	r3
     126:	bf00      	nop
     128:	00000000 	.word	0x00000000
     12c:	00001fd8 	.word	0x00001fd8
     130:	2000000c 	.word	0x2000000c
     134:	20000008 	.word	0x20000008
     138:	00000000 	.word	0x00000000

0000013c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     13c:	b580      	push	{r7, lr}
     13e:	b084      	sub	sp, #16
     140:	af00      	add	r7, sp, #0
     142:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
     144:	2300      	movs	r3, #0
     146:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     148:	687b      	ldr	r3, [r7, #4]
     14a:	f003 0307 	and.w	r3, r3, #7
     14e:	2b00      	cmp	r3, #0
     150:	d004      	beq.n	15c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     152:	687b      	ldr	r3, [r7, #4]
     154:	f023 0307 	bic.w	r3, r3, #7
     158:	3308      	adds	r3, #8
     15a:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
     15c:	f000 fe6c 	bl	e38 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     160:	4b16      	ldr	r3, [pc, #88]	; (1bc <pvPortMalloc+0x80>)
     162:	681b      	ldr	r3, [r3, #0]
     164:	2b00      	cmp	r3, #0
     166:	d105      	bne.n	174 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     168:	4b15      	ldr	r3, [pc, #84]	; (1c0 <pvPortMalloc+0x84>)
     16a:	f023 0307 	bic.w	r3, r3, #7
     16e:	461a      	mov	r2, r3
     170:	4b12      	ldr	r3, [pc, #72]	; (1bc <pvPortMalloc+0x80>)
     172:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     174:	4b13      	ldr	r3, [pc, #76]	; (1c4 <pvPortMalloc+0x88>)
     176:	681a      	ldr	r2, [r3, #0]
     178:	687b      	ldr	r3, [r7, #4]
     17a:	4413      	add	r3, r2
     17c:	f643 72f7 	movw	r2, #16375	; 0x3ff7
     180:	4293      	cmp	r3, r2
     182:	d813      	bhi.n	1ac <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     184:	4b0f      	ldr	r3, [pc, #60]	; (1c4 <pvPortMalloc+0x88>)
     186:	681a      	ldr	r2, [r3, #0]
     188:	687b      	ldr	r3, [r7, #4]
     18a:	441a      	add	r2, r3
     18c:	4b0d      	ldr	r3, [pc, #52]	; (1c4 <pvPortMalloc+0x88>)
     18e:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     190:	429a      	cmp	r2, r3
     192:	d90b      	bls.n	1ac <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     194:	4b09      	ldr	r3, [pc, #36]	; (1bc <pvPortMalloc+0x80>)
     196:	681a      	ldr	r2, [r3, #0]
     198:	4b0a      	ldr	r3, [pc, #40]	; (1c4 <pvPortMalloc+0x88>)
     19a:	681b      	ldr	r3, [r3, #0]
     19c:	4413      	add	r3, r2
     19e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
     1a0:	4b08      	ldr	r3, [pc, #32]	; (1c4 <pvPortMalloc+0x88>)
     1a2:	681a      	ldr	r2, [r3, #0]
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	4413      	add	r3, r2
     1a8:	4a06      	ldr	r2, [pc, #24]	; (1c4 <pvPortMalloc+0x88>)
     1aa:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     1ac:	f000 fe52 	bl	e54 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     1b0:	68fb      	ldr	r3, [r7, #12]
}
     1b2:	4618      	mov	r0, r3
     1b4:	3710      	adds	r7, #16
     1b6:	46bd      	mov	sp, r7
     1b8:	bd80      	pop	{r7, pc}
     1ba:	bf00      	nop
     1bc:	20004028 	.word	0x20004028
     1c0:	2000002c 	.word	0x2000002c
     1c4:	20004024 	.word	0x20004024

000001c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     1c8:	b480      	push	{r7}
     1ca:	b083      	sub	sp, #12
     1cc:	af00      	add	r7, sp, #0
     1ce:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
     1d0:	687b      	ldr	r3, [r7, #4]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d000      	beq.n	1d8 <vPortFree+0x10>
     1d6:	e7fe      	b.n	1d6 <vPortFree+0xe>
}
     1d8:	370c      	adds	r7, #12
     1da:	46bd      	mov	sp, r7
     1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e0:	4770      	bx	lr
     1e2:	bf00      	nop

000001e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
     1ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1ec:	687b      	ldr	r3, [r7, #4]
     1ee:	f103 0208 	add.w	r2, r3, #8
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     1f6:	687b      	ldr	r3, [r7, #4]
     1f8:	f04f 32ff 	mov.w	r2, #4294967295
     1fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1fe:	687b      	ldr	r3, [r7, #4]
     200:	f103 0208 	add.w	r2, r3, #8
     204:	687b      	ldr	r3, [r7, #4]
     206:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     208:	687b      	ldr	r3, [r7, #4]
     20a:	f103 0208 	add.w	r2, r3, #8
     20e:	687b      	ldr	r3, [r7, #4]
     210:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     212:	687b      	ldr	r3, [r7, #4]
     214:	2200      	movs	r2, #0
     216:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     218:	370c      	adds	r7, #12
     21a:	46bd      	mov	sp, r7
     21c:	f85d 7b04 	ldr.w	r7, [sp], #4
     220:	4770      	bx	lr
     222:	bf00      	nop

00000224 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     224:	b480      	push	{r7}
     226:	b083      	sub	sp, #12
     228:	af00      	add	r7, sp, #0
     22a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	2200      	movs	r2, #0
     230:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     232:	370c      	adds	r7, #12
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	6078      	str	r0, [r7, #4]
     244:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
     246:	687b      	ldr	r3, [r7, #4]
     248:	685b      	ldr	r3, [r3, #4]
     24a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     24c:	683b      	ldr	r3, [r7, #0]
     24e:	68fa      	ldr	r2, [r7, #12]
     250:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     252:	68fb      	ldr	r3, [r7, #12]
     254:	689a      	ldr	r2, [r3, #8]
     256:	683b      	ldr	r3, [r7, #0]
     258:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     25a:	68fb      	ldr	r3, [r7, #12]
     25c:	689b      	ldr	r3, [r3, #8]
     25e:	683a      	ldr	r2, [r7, #0]
     260:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
     262:	68fb      	ldr	r3, [r7, #12]
     264:	683a      	ldr	r2, [r7, #0]
     266:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     268:	683b      	ldr	r3, [r7, #0]
     26a:	687a      	ldr	r2, [r7, #4]
     26c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     26e:	687b      	ldr	r3, [r7, #4]
     270:	681b      	ldr	r3, [r3, #0]
     272:	1c5a      	adds	r2, r3, #1
     274:	687b      	ldr	r3, [r7, #4]
     276:	601a      	str	r2, [r3, #0]
}
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
     28c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     28e:	683b      	ldr	r3, [r7, #0]
     290:	681b      	ldr	r3, [r3, #0]
     292:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     294:	68bb      	ldr	r3, [r7, #8]
     296:	f1b3 3fff 	cmp.w	r3, #4294967295
     29a:	d103      	bne.n	2a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     29c:	687b      	ldr	r3, [r7, #4]
     29e:	691b      	ldr	r3, [r3, #16]
     2a0:	60fb      	str	r3, [r7, #12]
     2a2:	e00c      	b.n	2be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	3308      	adds	r3, #8
     2a8:	60fb      	str	r3, [r7, #12]
     2aa:	e002      	b.n	2b2 <vListInsert+0x2e>
     2ac:	68fb      	ldr	r3, [r7, #12]
     2ae:	685b      	ldr	r3, [r3, #4]
     2b0:	60fb      	str	r3, [r7, #12]
     2b2:	68fb      	ldr	r3, [r7, #12]
     2b4:	685b      	ldr	r3, [r3, #4]
     2b6:	681a      	ldr	r2, [r3, #0]
     2b8:	68bb      	ldr	r3, [r7, #8]
     2ba:	429a      	cmp	r2, r3
     2bc:	d9f6      	bls.n	2ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     2be:	68fb      	ldr	r3, [r7, #12]
     2c0:	685a      	ldr	r2, [r3, #4]
     2c2:	683b      	ldr	r3, [r7, #0]
     2c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     2c6:	683b      	ldr	r3, [r7, #0]
     2c8:	685b      	ldr	r3, [r3, #4]
     2ca:	683a      	ldr	r2, [r7, #0]
     2cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     2ce:	683b      	ldr	r3, [r7, #0]
     2d0:	68fa      	ldr	r2, [r7, #12]
     2d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
     2d4:	68fb      	ldr	r3, [r7, #12]
     2d6:	683a      	ldr	r2, [r7, #0]
     2d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     2da:	683b      	ldr	r3, [r7, #0]
     2dc:	687a      	ldr	r2, [r7, #4]
     2de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	1c5a      	adds	r2, r3, #1
     2e6:	687b      	ldr	r3, [r7, #4]
     2e8:	601a      	str	r2, [r3, #0]
}
     2ea:	3714      	adds	r7, #20
     2ec:	46bd      	mov	sp, r7
     2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
     2f2:	4770      	bx	lr

000002f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     2f4:	b480      	push	{r7}
     2f6:	b085      	sub	sp, #20
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	691b      	ldr	r3, [r3, #16]
     300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     302:	687b      	ldr	r3, [r7, #4]
     304:	685b      	ldr	r3, [r3, #4]
     306:	687a      	ldr	r2, [r7, #4]
     308:	6892      	ldr	r2, [r2, #8]
     30a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     30c:	687b      	ldr	r3, [r7, #4]
     30e:	689b      	ldr	r3, [r3, #8]
     310:	687a      	ldr	r2, [r7, #4]
     312:	6852      	ldr	r2, [r2, #4]
     314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     316:	68fb      	ldr	r3, [r7, #12]
     318:	685a      	ldr	r2, [r3, #4]
     31a:	687b      	ldr	r3, [r7, #4]
     31c:	429a      	cmp	r2, r3
     31e:	d103      	bne.n	328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     320:	687b      	ldr	r3, [r7, #4]
     322:	689a      	ldr	r2, [r3, #8]
     324:	68fb      	ldr	r3, [r7, #12]
     326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     328:	687b      	ldr	r3, [r7, #4]
     32a:	2200      	movs	r2, #0
     32c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	681b      	ldr	r3, [r3, #0]
     332:	1e5a      	subs	r2, r3, #1
     334:	68fb      	ldr	r3, [r7, #12]
     336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     338:	68fb      	ldr	r3, [r7, #12]
     33a:	681b      	ldr	r3, [r3, #0]
}
     33c:	4618      	mov	r0, r3
     33e:	3714      	adds	r7, #20
     340:	46bd      	mov	sp, r7
     342:	f85d 7b04 	ldr.w	r7, [sp], #4
     346:	4770      	bx	lr

00000348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     348:	b480      	push	{r7}
     34a:	b085      	sub	sp, #20
     34c:	af00      	add	r7, sp, #0
     34e:	60f8      	str	r0, [r7, #12]
     350:	60b9      	str	r1, [r7, #8]
     352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
     354:	68fb      	ldr	r3, [r7, #12]
     356:	3b04      	subs	r3, #4
     358:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     35a:	68fb      	ldr	r3, [r7, #12]
     35c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     362:	68fb      	ldr	r3, [r7, #12]
     364:	3b04      	subs	r3, #4
     366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     368:	68ba      	ldr	r2, [r7, #8]
     36a:	68fb      	ldr	r3, [r7, #12]
     36c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     36e:	68fb      	ldr	r3, [r7, #12]
     370:	3b04      	subs	r3, #4
     372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     374:	4a09      	ldr	r2, [pc, #36]	; (39c <pxPortInitialiseStack+0x54>)
     376:	68fb      	ldr	r3, [r7, #12]
     378:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
     37a:	68fb      	ldr	r3, [r7, #12]
     37c:	3b14      	subs	r3, #20
     37e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     380:	687a      	ldr	r2, [r7, #4]
     382:	68fb      	ldr	r3, [r7, #12]
     384:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
     386:	68fb      	ldr	r3, [r7, #12]
     388:	3b20      	subs	r3, #32
     38a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
     38c:	68fb      	ldr	r3, [r7, #12]
}
     38e:	4618      	mov	r0, r3
     390:	3714      	adds	r7, #20
     392:	46bd      	mov	sp, r7
     394:	f85d 7b04 	ldr.w	r7, [sp], #4
     398:	4770      	bx	lr
     39a:	bf00      	nop
     39c:	000003a1 	.word	0x000003a1

000003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     3a0:	b480      	push	{r7}
     3a2:	b083      	sub	sp, #12
     3a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     3a6:	4b08      	ldr	r3, [pc, #32]	; (3c8 <prvTaskExitError+0x28>)
     3a8:	681b      	ldr	r3, [r3, #0]
     3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
     3ae:	d000      	beq.n	3b2 <prvTaskExitError+0x12>
     3b0:	e7fe      	b.n	3b0 <prvTaskExitError+0x10>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
     3b2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
     3b6:	f383 8811 	msr	BASEPRI, r3
     3ba:	f3bf 8f6f 	isb	sy
     3be:	f3bf 8f4f 	dsb	sy
     3c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
     3c4:	e7fe      	b.n	3c4 <prvTaskExitError+0x24>
     3c6:	bf00      	nop
     3c8:	20000000 	.word	0x20000000
     3cc:	00000000 	.word	0x00000000

000003d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
     3d0:	4b07      	ldr	r3, [pc, #28]	; (3f0 <pxCurrentTCBConst2>)
     3d2:	6819      	ldr	r1, [r3, #0]
     3d4:	6808      	ldr	r0, [r1, #0]
     3d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
     3da:	f380 8809 	msr	PSP, r0
     3de:	f3bf 8f6f 	isb	sy
     3e2:	f04f 0000 	mov.w	r0, #0
     3e6:	f380 8811 	msr	BASEPRI, r0
     3ea:	f04e 0e0d 	orr.w	lr, lr, #13
     3ee:	4770      	bx	lr

000003f0 <pxCurrentTCBConst2>:
     3f0:	20004034 	.word	0x20004034
     3f4:	f3af 8000 	nop.w
     3f8:	f3af 8000 	nop.w
     3fc:	f3af 8000 	nop.w

00000400 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
     400:	4806      	ldr	r0, [pc, #24]	; (41c <prvPortStartFirstTask+0x1c>)
     402:	6800      	ldr	r0, [r0, #0]
     404:	6800      	ldr	r0, [r0, #0]
     406:	f380 8808 	msr	MSP, r0
     40a:	b662      	cpsie	i
     40c:	b661      	cpsie	f
     40e:	f3bf 8f4f 	dsb	sy
     412:	f3bf 8f6f 	isb	sy
     416:	df00      	svc	0
     418:	bf00      	nop
     41a:	0000      	.short	0x0000
     41c:	e000ed08 	.word	0xe000ed08

00000420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     420:	b580      	push	{r7, lr}
     422:	b084      	sub	sp, #16
     424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
     426:	4b28      	ldr	r3, [pc, #160]	; (4c8 <xPortStartScheduler+0xa8>)
     428:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
     42a:	68fb      	ldr	r3, [r7, #12]
     42c:	781b      	ldrb	r3, [r3, #0]
     42e:	b2db      	uxtb	r3, r3
     430:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
     432:	68fb      	ldr	r3, [r7, #12]
     434:	22ff      	movs	r2, #255	; 0xff
     436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
     438:	68fb      	ldr	r3, [r7, #12]
     43a:	781b      	ldrb	r3, [r3, #0]
     43c:	b2db      	uxtb	r3, r3
     43e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
     440:	79fb      	ldrb	r3, [r7, #7]
     442:	b2db      	uxtb	r3, r3
     444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
     448:	b2da      	uxtb	r2, r3
     44a:	4b20      	ldr	r3, [pc, #128]	; (4cc <xPortStartScheduler+0xac>)
     44c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
     44e:	4b20      	ldr	r3, [pc, #128]	; (4d0 <xPortStartScheduler+0xb0>)
     450:	2207      	movs	r2, #7
     452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
     454:	e009      	b.n	46a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
     456:	4b1e      	ldr	r3, [pc, #120]	; (4d0 <xPortStartScheduler+0xb0>)
     458:	681b      	ldr	r3, [r3, #0]
     45a:	3b01      	subs	r3, #1
     45c:	4a1c      	ldr	r2, [pc, #112]	; (4d0 <xPortStartScheduler+0xb0>)
     45e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
     460:	79fb      	ldrb	r3, [r7, #7]
     462:	b2db      	uxtb	r3, r3
     464:	005b      	lsls	r3, r3, #1
     466:	b2db      	uxtb	r3, r3
     468:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
     46a:	79fb      	ldrb	r3, [r7, #7]
     46c:	b2db      	uxtb	r3, r3
     46e:	b2db      	uxtb	r3, r3
     470:	b25b      	sxtb	r3, r3
     472:	2b00      	cmp	r3, #0
     474:	dbef      	blt.n	456 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
     476:	4b16      	ldr	r3, [pc, #88]	; (4d0 <xPortStartScheduler+0xb0>)
     478:	681b      	ldr	r3, [r3, #0]
     47a:	021b      	lsls	r3, r3, #8
     47c:	4a14      	ldr	r2, [pc, #80]	; (4d0 <xPortStartScheduler+0xb0>)
     47e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
     480:	4b13      	ldr	r3, [pc, #76]	; (4d0 <xPortStartScheduler+0xb0>)
     482:	681b      	ldr	r3, [r3, #0]
     484:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     488:	4a11      	ldr	r2, [pc, #68]	; (4d0 <xPortStartScheduler+0xb0>)
     48a:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
     48c:	68bb      	ldr	r3, [r7, #8]
     48e:	b2da      	uxtb	r2, r3
     490:	68fb      	ldr	r3, [r7, #12]
     492:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
     494:	4a0f      	ldr	r2, [pc, #60]	; (4d4 <xPortStartScheduler+0xb4>)
     496:	4b0f      	ldr	r3, [pc, #60]	; (4d4 <xPortStartScheduler+0xb4>)
     498:	681b      	ldr	r3, [r3, #0]
     49a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
     49e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
     4a0:	4a0c      	ldr	r2, [pc, #48]	; (4d4 <xPortStartScheduler+0xb4>)
     4a2:	4b0c      	ldr	r3, [pc, #48]	; (4d4 <xPortStartScheduler+0xb4>)
     4a4:	681b      	ldr	r3, [r3, #0]
     4a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
     4aa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
     4ac:	f000 f8a0 	bl	5f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     4b0:	4b09      	ldr	r3, [pc, #36]	; (4d8 <xPortStartScheduler+0xb8>)
     4b2:	2200      	movs	r2, #0
     4b4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
     4b6:	f7ff ffa3 	bl	400 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
     4ba:	f7ff ff71 	bl	3a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
     4be:	2300      	movs	r3, #0
}
     4c0:	4618      	mov	r0, r3
     4c2:	3710      	adds	r7, #16
     4c4:	46bd      	mov	sp, r7
     4c6:	bd80      	pop	{r7, pc}
     4c8:	e000e400 	.word	0xe000e400
     4cc:	2000402c 	.word	0x2000402c
     4d0:	20004030 	.word	0x20004030
     4d4:	e000ed20 	.word	0xe000ed20
     4d8:	20000000 	.word	0x20000000

000004dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
     4dc:	b480      	push	{r7}
     4de:	b083      	sub	sp, #12
     4e0:	af00      	add	r7, sp, #0
     4e2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
     4e6:	f383 8811 	msr	BASEPRI, r3
     4ea:	f3bf 8f6f 	isb	sy
     4ee:	f3bf 8f4f 	dsb	sy
     4f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
     4f4:	4b09      	ldr	r3, [pc, #36]	; (51c <vPortEnterCritical+0x40>)
     4f6:	681b      	ldr	r3, [r3, #0]
     4f8:	3301      	adds	r3, #1
     4fa:	4a08      	ldr	r2, [pc, #32]	; (51c <vPortEnterCritical+0x40>)
     4fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
     4fe:	4b07      	ldr	r3, [pc, #28]	; (51c <vPortEnterCritical+0x40>)
     500:	681b      	ldr	r3, [r3, #0]
     502:	2b01      	cmp	r3, #1
     504:	d105      	bne.n	512 <vPortEnterCritical+0x36>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
     506:	4b06      	ldr	r3, [pc, #24]	; (520 <vPortEnterCritical+0x44>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	b2db      	uxtb	r3, r3
     50c:	2b00      	cmp	r3, #0
     50e:	d000      	beq.n	512 <vPortEnterCritical+0x36>
     510:	e7fe      	b.n	510 <vPortEnterCritical+0x34>
	}
}
     512:	370c      	adds	r7, #12
     514:	46bd      	mov	sp, r7
     516:	f85d 7b04 	ldr.w	r7, [sp], #4
     51a:	4770      	bx	lr
     51c:	20000000 	.word	0x20000000
     520:	e000ed04 	.word	0xe000ed04

00000524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
     524:	b480      	push	{r7}
     526:	b083      	sub	sp, #12
     528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
     52a:	4b0c      	ldr	r3, [pc, #48]	; (55c <vPortExitCritical+0x38>)
     52c:	681b      	ldr	r3, [r3, #0]
     52e:	2b00      	cmp	r3, #0
     530:	d100      	bne.n	534 <vPortExitCritical+0x10>
     532:	e7fe      	b.n	532 <vPortExitCritical+0xe>
	uxCriticalNesting--;
     534:	4b09      	ldr	r3, [pc, #36]	; (55c <vPortExitCritical+0x38>)
     536:	681b      	ldr	r3, [r3, #0]
     538:	3b01      	subs	r3, #1
     53a:	4a08      	ldr	r2, [pc, #32]	; (55c <vPortExitCritical+0x38>)
     53c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
     53e:	4b07      	ldr	r3, [pc, #28]	; (55c <vPortExitCritical+0x38>)
     540:	681b      	ldr	r3, [r3, #0]
     542:	2b00      	cmp	r3, #0
     544:	d104      	bne.n	550 <vPortExitCritical+0x2c>
     546:	2300      	movs	r3, #0
     548:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
     550:	370c      	adds	r7, #12
     552:	46bd      	mov	sp, r7
     554:	f85d 7b04 	ldr.w	r7, [sp], #4
     558:	4770      	bx	lr
     55a:	bf00      	nop
     55c:	20000000 	.word	0x20000000

00000560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     560:	f3ef 8009 	mrs	r0, PSP
     564:	f3bf 8f6f 	isb	sy
     568:	4b0d      	ldr	r3, [pc, #52]	; (5a0 <pxCurrentTCBConst>)
     56a:	681a      	ldr	r2, [r3, #0]
     56c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
     570:	6010      	str	r0, [r2, #0]
     572:	e92d 4008 	stmdb	sp!, {r3, lr}
     576:	f04f 00bf 	mov.w	r0, #191	; 0xbf
     57a:	f380 8811 	msr	BASEPRI, r0
     57e:	f000 fda3 	bl	10c8 <vTaskSwitchContext>
     582:	f04f 0000 	mov.w	r0, #0
     586:	f380 8811 	msr	BASEPRI, r0
     58a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     58e:	6819      	ldr	r1, [r3, #0]
     590:	6808      	ldr	r0, [r1, #0]
     592:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
     596:	f380 8809 	msr	PSP, r0
     59a:	f3bf 8f6f 	isb	sy
     59e:	4770      	bx	lr

000005a0 <pxCurrentTCBConst>:
     5a0:	20004034 	.word	0x20004034
     5a4:	f3af 8000 	nop.w
     5a8:	f3af 8000 	nop.w
     5ac:	f3af 8000 	nop.w

000005b0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     5b0:	b580      	push	{r7, lr}
     5b2:	b082      	sub	sp, #8
     5b4:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
     5b6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
     5ba:	f383 8811 	msr	BASEPRI, r3
     5be:	f3bf 8f6f 	isb	sy
     5c2:	f3bf 8f4f 	dsb	sy
     5c6:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     5c8:	f000 fcd8 	bl	f7c <xTaskIncrementTick>
     5cc:	4603      	mov	r3, r0
     5ce:	2b00      	cmp	r3, #0
     5d0:	d003      	beq.n	5da <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
     5d2:	4b06      	ldr	r3, [pc, #24]	; (5ec <SysTick_Handler+0x3c>)
     5d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     5d8:	601a      	str	r2, [r3, #0]
     5da:	2300      	movs	r3, #0
     5dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
     5de:	683b      	ldr	r3, [r7, #0]
     5e0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
     5e4:	3708      	adds	r7, #8
     5e6:	46bd      	mov	sp, r7
     5e8:	bd80      	pop	{r7, pc}
     5ea:	bf00      	nop
     5ec:	e000ed04 	.word	0xe000ed04

000005f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
     5f0:	b480      	push	{r7}
     5f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     5f4:	4b05      	ldr	r3, [pc, #20]	; (60c <vPortSetupTimerInterrupt+0x1c>)
     5f6:	f646 525f 	movw	r2, #27999	; 0x6d5f
     5fa:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
     5fc:	4b04      	ldr	r3, [pc, #16]	; (610 <vPortSetupTimerInterrupt+0x20>)
     5fe:	2207      	movs	r2, #7
     600:	601a      	str	r2, [r3, #0]
}
     602:	46bd      	mov	sp, r7
     604:	f85d 7b04 	ldr.w	r7, [sp], #4
     608:	4770      	bx	lr
     60a:	bf00      	nop
     60c:	e000e014 	.word	0xe000e014
     610:	e000e010 	.word	0xe000e010

00000614 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     614:	b580      	push	{r7, lr}
     616:	b084      	sub	sp, #16
     618:	af00      	add	r7, sp, #0
     61a:	6078      	str	r0, [r7, #4]
     61c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
     61e:	687b      	ldr	r3, [r7, #4]
     620:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
     622:	68fb      	ldr	r3, [r7, #12]
     624:	2b00      	cmp	r3, #0
     626:	d100      	bne.n	62a <xQueueGenericReset+0x16>
     628:	e7fe      	b.n	628 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
     62a:	f7ff ff57 	bl	4dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     62e:	68fb      	ldr	r3, [r7, #12]
     630:	681a      	ldr	r2, [r3, #0]
     632:	68fb      	ldr	r3, [r7, #12]
     634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     636:	68f9      	ldr	r1, [r7, #12]
     638:	6c09      	ldr	r1, [r1, #64]	; 0x40
     63a:	fb01 f303 	mul.w	r3, r1, r3
     63e:	441a      	add	r2, r3
     640:	68fb      	ldr	r3, [r7, #12]
     642:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     644:	68fb      	ldr	r3, [r7, #12]
     646:	2200      	movs	r2, #0
     648:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     64a:	68fb      	ldr	r3, [r7, #12]
     64c:	681a      	ldr	r2, [r3, #0]
     64e:	68fb      	ldr	r3, [r7, #12]
     650:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     652:	68fb      	ldr	r3, [r7, #12]
     654:	681a      	ldr	r2, [r3, #0]
     656:	68fb      	ldr	r3, [r7, #12]
     658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     65a:	3b01      	subs	r3, #1
     65c:	68f9      	ldr	r1, [r7, #12]
     65e:	6c09      	ldr	r1, [r1, #64]	; 0x40
     660:	fb01 f303 	mul.w	r3, r1, r3
     664:	441a      	add	r2, r3
     666:	68fb      	ldr	r3, [r7, #12]
     668:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
     66a:	68fb      	ldr	r3, [r7, #12]
     66c:	22ff      	movs	r2, #255	; 0xff
     66e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
     672:	68fb      	ldr	r3, [r7, #12]
     674:	22ff      	movs	r2, #255	; 0xff
     676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
     67a:	683b      	ldr	r3, [r7, #0]
     67c:	2b00      	cmp	r3, #0
     67e:	d114      	bne.n	6aa <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     680:	68fb      	ldr	r3, [r7, #12]
     682:	691b      	ldr	r3, [r3, #16]
     684:	2b00      	cmp	r3, #0
     686:	d01a      	beq.n	6be <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     688:	68fb      	ldr	r3, [r7, #12]
     68a:	3310      	adds	r3, #16
     68c:	4618      	mov	r0, r3
     68e:	f000 fd87 	bl	11a0 <xTaskRemoveFromEventList>
     692:	4603      	mov	r3, r0
     694:	2b00      	cmp	r3, #0
     696:	d012      	beq.n	6be <xQueueGenericReset+0xaa>
				{
					queueYIELD_IF_USING_PREEMPTION();
     698:	4b0c      	ldr	r3, [pc, #48]	; (6cc <xQueueGenericReset+0xb8>)
     69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     69e:	601a      	str	r2, [r3, #0]
     6a0:	f3bf 8f4f 	dsb	sy
     6a4:	f3bf 8f6f 	isb	sy
     6a8:	e009      	b.n	6be <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     6aa:	68fb      	ldr	r3, [r7, #12]
     6ac:	3310      	adds	r3, #16
     6ae:	4618      	mov	r0, r3
     6b0:	f7ff fd98 	bl	1e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     6b4:	68fb      	ldr	r3, [r7, #12]
     6b6:	3324      	adds	r3, #36	; 0x24
     6b8:	4618      	mov	r0, r3
     6ba:	f7ff fd93 	bl	1e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     6be:	f7ff ff31 	bl	524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
     6c2:	2301      	movs	r3, #1
}
     6c4:	4618      	mov	r0, r3
     6c6:	3710      	adds	r7, #16
     6c8:	46bd      	mov	sp, r7
     6ca:	bd80      	pop	{r7, pc}
     6cc:	e000ed04 	.word	0xe000ed04

000006d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
     6d0:	b590      	push	{r4, r7, lr}
     6d2:	b08b      	sub	sp, #44	; 0x2c
     6d4:	af02      	add	r7, sp, #8
     6d6:	60f8      	str	r0, [r7, #12]
     6d8:	60b9      	str	r1, [r7, #8]
     6da:	4613      	mov	r3, r2
     6dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
     6de:	68fb      	ldr	r3, [r7, #12]
     6e0:	2b00      	cmp	r3, #0
     6e2:	d100      	bne.n	6e6 <xQueueGenericCreate+0x16>
     6e4:	e7fe      	b.n	6e4 <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
     6e6:	68bb      	ldr	r3, [r7, #8]
     6e8:	2b00      	cmp	r3, #0
     6ea:	d102      	bne.n	6f2 <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
     6ec:	2300      	movs	r3, #0
     6ee:	61fb      	str	r3, [r7, #28]
     6f0:	e004      	b.n	6fc <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     6f2:	68fb      	ldr	r3, [r7, #12]
     6f4:	68ba      	ldr	r2, [r7, #8]
     6f6:	fb02 f303 	mul.w	r3, r2, r3
     6fa:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     6fc:	69fb      	ldr	r3, [r7, #28]
     6fe:	3348      	adds	r3, #72	; 0x48
     700:	4618      	mov	r0, r3
     702:	f7ff fd1b 	bl	13c <pvPortMalloc>
     706:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
     708:	69bb      	ldr	r3, [r7, #24]
     70a:	2b00      	cmp	r3, #0
     70c:	d00b      	beq.n	726 <xQueueGenericCreate+0x56>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
     70e:	69bb      	ldr	r3, [r7, #24]
     710:	3348      	adds	r3, #72	; 0x48
     712:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
     714:	79fc      	ldrb	r4, [r7, #7]
     716:	69bb      	ldr	r3, [r7, #24]
     718:	9300      	str	r3, [sp, #0]
     71a:	68f8      	ldr	r0, [r7, #12]
     71c:	68b9      	ldr	r1, [r7, #8]
     71e:	697a      	ldr	r2, [r7, #20]
     720:	4623      	mov	r3, r4
     722:	f000 f805 	bl	730 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
     726:	69bb      	ldr	r3, [r7, #24]
	}
     728:	4618      	mov	r0, r3
     72a:	3724      	adds	r7, #36	; 0x24
     72c:	46bd      	mov	sp, r7
     72e:	bd90      	pop	{r4, r7, pc}

00000730 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
     730:	b580      	push	{r7, lr}
     732:	b084      	sub	sp, #16
     734:	af00      	add	r7, sp, #0
     736:	60f8      	str	r0, [r7, #12]
     738:	60b9      	str	r1, [r7, #8]
     73a:	607a      	str	r2, [r7, #4]
     73c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
     73e:	68bb      	ldr	r3, [r7, #8]
     740:	2b00      	cmp	r3, #0
     742:	d103      	bne.n	74c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     744:	69bb      	ldr	r3, [r7, #24]
     746:	69ba      	ldr	r2, [r7, #24]
     748:	601a      	str	r2, [r3, #0]
     74a:	e002      	b.n	752 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     74c:	69bb      	ldr	r3, [r7, #24]
     74e:	687a      	ldr	r2, [r7, #4]
     750:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
     752:	69bb      	ldr	r3, [r7, #24]
     754:	68fa      	ldr	r2, [r7, #12]
     756:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
     758:	69bb      	ldr	r3, [r7, #24]
     75a:	68ba      	ldr	r2, [r7, #8]
     75c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     75e:	69b8      	ldr	r0, [r7, #24]
     760:	2101      	movs	r1, #1
     762:	f7ff ff57 	bl	614 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
     766:	3710      	adds	r7, #16
     768:	46bd      	mov	sp, r7
     76a:	bd80      	pop	{r7, pc}

0000076c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

static void prvInitialiseMutex( Queue_t *pxNewQueue )
{
     76c:	b580      	push	{r7, lr}
     76e:	b082      	sub	sp, #8
     770:	af00      	add	r7, sp, #0
     772:	6078      	str	r0, [r7, #4]
	if( pxNewQueue != NULL )
     774:	687b      	ldr	r3, [r7, #4]
     776:	2b00      	cmp	r3, #0
     778:	d00e      	beq.n	798 <prvInitialiseMutex+0x2c>
	{
		/* The queue create function will set all the queue structure members
		correctly for a generic queue, but this function is creating a
		mutex.  Overwrite those members that need to be set differently -
		in particular the information required for priority inheritance. */
		pxNewQueue->pxMutexHolder = NULL;
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	2200      	movs	r2, #0
     77e:	605a      	str	r2, [r3, #4]
		pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     780:	687b      	ldr	r3, [r7, #4]
     782:	2200      	movs	r2, #0
     784:	601a      	str	r2, [r3, #0]

		/* In case this is a recursive mutex. */
		pxNewQueue->u.uxRecursiveCallCount = 0;
     786:	687b      	ldr	r3, [r7, #4]
     788:	2200      	movs	r2, #0
     78a:	60da      	str	r2, [r3, #12]

		traceCREATE_MUTEX( pxNewQueue );

		/* Start with the semaphore in the expected state. */
		( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
     78c:	6878      	ldr	r0, [r7, #4]
     78e:	2100      	movs	r1, #0
     790:	2200      	movs	r2, #0
     792:	2300      	movs	r3, #0
     794:	f000 f81c 	bl	7d0 <xQueueGenericSend>
	}
	else
	{
		traceCREATE_MUTEX_FAILED();
	}
}
     798:	3708      	adds	r7, #8
     79a:	46bd      	mov	sp, r7
     79c:	bd80      	pop	{r7, pc}
     79e:	bf00      	nop

000007a0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
     7a0:	b580      	push	{r7, lr}
     7a2:	b086      	sub	sp, #24
     7a4:	af00      	add	r7, sp, #0
     7a6:	4603      	mov	r3, r0
     7a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
     7aa:	2301      	movs	r3, #1
     7ac:	617b      	str	r3, [r7, #20]
     7ae:	2300      	movs	r3, #0
     7b0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
     7b2:	79fb      	ldrb	r3, [r7, #7]
     7b4:	6978      	ldr	r0, [r7, #20]
     7b6:	6939      	ldr	r1, [r7, #16]
     7b8:	461a      	mov	r2, r3
     7ba:	f7ff ff89 	bl	6d0 <xQueueGenericCreate>
     7be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
     7c0:	68f8      	ldr	r0, [r7, #12]
     7c2:	f7ff ffd3 	bl	76c <prvInitialiseMutex>

		return pxNewQueue;
     7c6:	68fb      	ldr	r3, [r7, #12]
	}
     7c8:	4618      	mov	r0, r3
     7ca:	3718      	adds	r7, #24
     7cc:	46bd      	mov	sp, r7
     7ce:	bd80      	pop	{r7, pc}

000007d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     7d0:	b580      	push	{r7, lr}
     7d2:	b08a      	sub	sp, #40	; 0x28
     7d4:	af00      	add	r7, sp, #0
     7d6:	60f8      	str	r0, [r7, #12]
     7d8:	60b9      	str	r1, [r7, #8]
     7da:	607a      	str	r2, [r7, #4]
     7dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
     7de:	2300      	movs	r3, #0
     7e0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
     7e2:	68fb      	ldr	r3, [r7, #12]
     7e4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
     7e6:	6a3b      	ldr	r3, [r7, #32]
     7e8:	2b00      	cmp	r3, #0
     7ea:	d100      	bne.n	7ee <xQueueGenericSend+0x1e>
     7ec:	e7fe      	b.n	7ec <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     7ee:	68bb      	ldr	r3, [r7, #8]
     7f0:	2b00      	cmp	r3, #0
     7f2:	d103      	bne.n	7fc <xQueueGenericSend+0x2c>
     7f4:	6a3b      	ldr	r3, [r7, #32]
     7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     7f8:	2b00      	cmp	r3, #0
     7fa:	d101      	bne.n	800 <xQueueGenericSend+0x30>
     7fc:	2301      	movs	r3, #1
     7fe:	e000      	b.n	802 <xQueueGenericSend+0x32>
     800:	2300      	movs	r3, #0
     802:	2b00      	cmp	r3, #0
     804:	d100      	bne.n	808 <xQueueGenericSend+0x38>
     806:	e7fe      	b.n	806 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     808:	683b      	ldr	r3, [r7, #0]
     80a:	2b02      	cmp	r3, #2
     80c:	d103      	bne.n	816 <xQueueGenericSend+0x46>
     80e:	6a3b      	ldr	r3, [r7, #32]
     810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     812:	2b01      	cmp	r3, #1
     814:	d101      	bne.n	81a <xQueueGenericSend+0x4a>
     816:	2301      	movs	r3, #1
     818:	e000      	b.n	81c <xQueueGenericSend+0x4c>
     81a:	2300      	movs	r3, #0
     81c:	2b00      	cmp	r3, #0
     81e:	d100      	bne.n	822 <xQueueGenericSend+0x52>
     820:	e7fe      	b.n	820 <xQueueGenericSend+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     822:	f000 fe05 	bl	1430 <xTaskGetSchedulerState>
     826:	4603      	mov	r3, r0
     828:	2b00      	cmp	r3, #0
     82a:	d102      	bne.n	832 <xQueueGenericSend+0x62>
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	2b00      	cmp	r3, #0
     830:	d101      	bne.n	836 <xQueueGenericSend+0x66>
     832:	2301      	movs	r3, #1
     834:	e000      	b.n	838 <xQueueGenericSend+0x68>
     836:	2300      	movs	r3, #0
     838:	2b00      	cmp	r3, #0
     83a:	d100      	bne.n	83e <xQueueGenericSend+0x6e>
     83c:	e7fe      	b.n	83c <xQueueGenericSend+0x6c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     83e:	f7ff fe4d 	bl	4dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     842:	6a3b      	ldr	r3, [r7, #32]
     844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     846:	6a3b      	ldr	r3, [r7, #32]
     848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     84a:	429a      	cmp	r2, r3
     84c:	d302      	bcc.n	854 <xQueueGenericSend+0x84>
     84e:	683b      	ldr	r3, [r7, #0]
     850:	2b02      	cmp	r3, #2
     852:	d129      	bne.n	8a8 <xQueueGenericSend+0xd8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     854:	6a38      	ldr	r0, [r7, #32]
     856:	68b9      	ldr	r1, [r7, #8]
     858:	683a      	ldr	r2, [r7, #0]
     85a:	f000 f893 	bl	984 <prvCopyDataToQueue>
     85e:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     860:	6a3b      	ldr	r3, [r7, #32]
     862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     864:	2b00      	cmp	r3, #0
     866:	d010      	beq.n	88a <xQueueGenericSend+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     868:	6a3b      	ldr	r3, [r7, #32]
     86a:	3324      	adds	r3, #36	; 0x24
     86c:	4618      	mov	r0, r3
     86e:	f000 fc97 	bl	11a0 <xTaskRemoveFromEventList>
     872:	4603      	mov	r3, r0
     874:	2b00      	cmp	r3, #0
     876:	d013      	beq.n	8a0 <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
     878:	4b41      	ldr	r3, [pc, #260]	; (980 <xQueueGenericSend+0x1b0>)
     87a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     87e:	601a      	str	r2, [r3, #0]
     880:	f3bf 8f4f 	dsb	sy
     884:	f3bf 8f6f 	isb	sy
     888:	e00a      	b.n	8a0 <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
     88a:	69fb      	ldr	r3, [r7, #28]
     88c:	2b00      	cmp	r3, #0
     88e:	d007      	beq.n	8a0 <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
     890:	4b3b      	ldr	r3, [pc, #236]	; (980 <xQueueGenericSend+0x1b0>)
     892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     896:	601a      	str	r2, [r3, #0]
     898:	f3bf 8f4f 	dsb	sy
     89c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     8a0:	f7ff fe40 	bl	524 <vPortExitCritical>
				return pdPASS;
     8a4:	2301      	movs	r3, #1
     8a6:	e067      	b.n	978 <xQueueGenericSend+0x1a8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     8a8:	687b      	ldr	r3, [r7, #4]
     8aa:	2b00      	cmp	r3, #0
     8ac:	d103      	bne.n	8b6 <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     8ae:	f7ff fe39 	bl	524 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     8b2:	2300      	movs	r3, #0
     8b4:	e060      	b.n	978 <xQueueGenericSend+0x1a8>
				}
				else if( xEntryTimeSet == pdFALSE )
     8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8b8:	2b00      	cmp	r3, #0
     8ba:	d106      	bne.n	8ca <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     8bc:	f107 0314 	add.w	r3, r7, #20
     8c0:	4618      	mov	r0, r3
     8c2:	f000 fcc7 	bl	1254 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     8c6:	2301      	movs	r3, #1
     8c8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     8ca:	f7ff fe2b 	bl	524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     8ce:	f000 fab3 	bl	e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     8d2:	f7ff fe03 	bl	4dc <vPortEnterCritical>
     8d6:	6a3b      	ldr	r3, [r7, #32]
     8d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
     8dc:	b2db      	uxtb	r3, r3
     8de:	b25b      	sxtb	r3, r3
     8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
     8e4:	d103      	bne.n	8ee <xQueueGenericSend+0x11e>
     8e6:	6a3b      	ldr	r3, [r7, #32]
     8e8:	2200      	movs	r2, #0
     8ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
     8ee:	6a3b      	ldr	r3, [r7, #32]
     8f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
     8f4:	b2db      	uxtb	r3, r3
     8f6:	b25b      	sxtb	r3, r3
     8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
     8fc:	d103      	bne.n	906 <xQueueGenericSend+0x136>
     8fe:	6a3b      	ldr	r3, [r7, #32]
     900:	2200      	movs	r2, #0
     902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
     906:	f7ff fe0d 	bl	524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     90a:	f107 0214 	add.w	r2, r7, #20
     90e:	1d3b      	adds	r3, r7, #4
     910:	4610      	mov	r0, r2
     912:	4619      	mov	r1, r3
     914:	f000 fcb8 	bl	1288 <xTaskCheckForTimeOut>
     918:	4603      	mov	r3, r0
     91a:	2b00      	cmp	r3, #0
     91c:	d124      	bne.n	968 <xQueueGenericSend+0x198>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     91e:	6a38      	ldr	r0, [r7, #32]
     920:	f000 f8ee 	bl	b00 <prvIsQueueFull>
     924:	4603      	mov	r3, r0
     926:	2b00      	cmp	r3, #0
     928:	d018      	beq.n	95c <xQueueGenericSend+0x18c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     92a:	6a3b      	ldr	r3, [r7, #32]
     92c:	f103 0210 	add.w	r2, r3, #16
     930:	687b      	ldr	r3, [r7, #4]
     932:	4610      	mov	r0, r2
     934:	4619      	mov	r1, r3
     936:	f000 fc19 	bl	116c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     93a:	6a38      	ldr	r0, [r7, #32]
     93c:	f000 f88e 	bl	a5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     940:	f000 fa88 	bl	e54 <xTaskResumeAll>
     944:	4603      	mov	r3, r0
     946:	2b00      	cmp	r3, #0
     948:	d115      	bne.n	976 <xQueueGenericSend+0x1a6>
				{
					portYIELD_WITHIN_API();
     94a:	4b0d      	ldr	r3, [pc, #52]	; (980 <xQueueGenericSend+0x1b0>)
     94c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     950:	601a      	str	r2, [r3, #0]
     952:	f3bf 8f4f 	dsb	sy
     956:	f3bf 8f6f 	isb	sy
     95a:	e00c      	b.n	976 <xQueueGenericSend+0x1a6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     95c:	6a38      	ldr	r0, [r7, #32]
     95e:	f000 f87d 	bl	a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
     962:	f000 fa77 	bl	e54 <xTaskResumeAll>
     966:	e76a      	b.n	83e <xQueueGenericSend+0x6e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     968:	6a38      	ldr	r0, [r7, #32]
     96a:	f000 f877 	bl	a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
     96e:	f000 fa71 	bl	e54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     972:	2300      	movs	r3, #0
     974:	e000      	b.n	978 <xQueueGenericSend+0x1a8>
		}
	}
     976:	e762      	b.n	83e <xQueueGenericSend+0x6e>
}
     978:	4618      	mov	r0, r3
     97a:	3728      	adds	r7, #40	; 0x28
     97c:	46bd      	mov	sp, r7
     97e:	bd80      	pop	{r7, pc}
     980:	e000ed04 	.word	0xe000ed04

00000984 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     984:	b580      	push	{r7, lr}
     986:	b086      	sub	sp, #24
     988:	af00      	add	r7, sp, #0
     98a:	60f8      	str	r0, [r7, #12]
     98c:	60b9      	str	r1, [r7, #8]
     98e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
     990:	2300      	movs	r3, #0
     992:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     998:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     99a:	68fb      	ldr	r3, [r7, #12]
     99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     99e:	2b00      	cmp	r3, #0
     9a0:	d10d      	bne.n	9be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     9a2:	68fb      	ldr	r3, [r7, #12]
     9a4:	681b      	ldr	r3, [r3, #0]
     9a6:	2b00      	cmp	r3, #0
     9a8:	d14f      	bne.n	a4a <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     9aa:	68fb      	ldr	r3, [r7, #12]
     9ac:	685b      	ldr	r3, [r3, #4]
     9ae:	4618      	mov	r0, r3
     9b0:	f000 fd5c 	bl	146c <xTaskPriorityDisinherit>
     9b4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
     9b6:	68fb      	ldr	r3, [r7, #12]
     9b8:	2200      	movs	r2, #0
     9ba:	605a      	str	r2, [r3, #4]
     9bc:	e045      	b.n	a4a <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
     9be:	687b      	ldr	r3, [r7, #4]
     9c0:	2b00      	cmp	r3, #0
     9c2:	d11a      	bne.n	9fa <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     9c4:	68fb      	ldr	r3, [r7, #12]
     9c6:	689a      	ldr	r2, [r3, #8]
     9c8:	68fb      	ldr	r3, [r7, #12]
     9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     9cc:	4610      	mov	r0, r2
     9ce:	68b9      	ldr	r1, [r7, #8]
     9d0:	461a      	mov	r2, r3
     9d2:	f001 fae7 	bl	1fa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     9d6:	68fb      	ldr	r3, [r7, #12]
     9d8:	689a      	ldr	r2, [r3, #8]
     9da:	68fb      	ldr	r3, [r7, #12]
     9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     9de:	441a      	add	r2, r3
     9e0:	68fb      	ldr	r3, [r7, #12]
     9e2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     9e4:	68fb      	ldr	r3, [r7, #12]
     9e6:	689a      	ldr	r2, [r3, #8]
     9e8:	68fb      	ldr	r3, [r7, #12]
     9ea:	685b      	ldr	r3, [r3, #4]
     9ec:	429a      	cmp	r2, r3
     9ee:	d32c      	bcc.n	a4a <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     9f0:	68fb      	ldr	r3, [r7, #12]
     9f2:	681a      	ldr	r2, [r3, #0]
     9f4:	68fb      	ldr	r3, [r7, #12]
     9f6:	609a      	str	r2, [r3, #8]
     9f8:	e027      	b.n	a4a <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     9fa:	68fb      	ldr	r3, [r7, #12]
     9fc:	68da      	ldr	r2, [r3, #12]
     9fe:	68fb      	ldr	r3, [r7, #12]
     a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     a02:	4610      	mov	r0, r2
     a04:	68b9      	ldr	r1, [r7, #8]
     a06:	461a      	mov	r2, r3
     a08:	f001 facc 	bl	1fa4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     a0c:	68fb      	ldr	r3, [r7, #12]
     a0e:	68da      	ldr	r2, [r3, #12]
     a10:	68fb      	ldr	r3, [r7, #12]
     a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     a14:	425b      	negs	r3, r3
     a16:	441a      	add	r2, r3
     a18:	68fb      	ldr	r3, [r7, #12]
     a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     a1c:	68fb      	ldr	r3, [r7, #12]
     a1e:	68da      	ldr	r2, [r3, #12]
     a20:	68fb      	ldr	r3, [r7, #12]
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	429a      	cmp	r2, r3
     a26:	d207      	bcs.n	a38 <prvCopyDataToQueue+0xb4>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     a28:	68fb      	ldr	r3, [r7, #12]
     a2a:	685a      	ldr	r2, [r3, #4]
     a2c:	68fb      	ldr	r3, [r7, #12]
     a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     a30:	425b      	negs	r3, r3
     a32:	441a      	add	r2, r3
     a34:	68fb      	ldr	r3, [r7, #12]
     a36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
     a38:	687b      	ldr	r3, [r7, #4]
     a3a:	2b02      	cmp	r3, #2
     a3c:	d105      	bne.n	a4a <prvCopyDataToQueue+0xc6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     a3e:	693b      	ldr	r3, [r7, #16]
     a40:	2b00      	cmp	r3, #0
     a42:	d002      	beq.n	a4a <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
     a44:	693b      	ldr	r3, [r7, #16]
     a46:	3b01      	subs	r3, #1
     a48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
     a4a:	693b      	ldr	r3, [r7, #16]
     a4c:	1c5a      	adds	r2, r3, #1
     a4e:	68fb      	ldr	r3, [r7, #12]
     a50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
     a52:	697b      	ldr	r3, [r7, #20]
}
     a54:	4618      	mov	r0, r3
     a56:	3718      	adds	r7, #24
     a58:	46bd      	mov	sp, r7
     a5a:	bd80      	pop	{r7, pc}

00000a5c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     a5c:	b580      	push	{r7, lr}
     a5e:	b084      	sub	sp, #16
     a60:	af00      	add	r7, sp, #0
     a62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     a64:	f7ff fd3a 	bl	4dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
     a68:	687b      	ldr	r3, [r7, #4]
     a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
     a6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     a70:	e013      	b.n	a9a <prvUnlockQueue+0x3e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     a72:	687b      	ldr	r3, [r7, #4]
     a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     a76:	2b00      	cmp	r3, #0
     a78:	d00a      	beq.n	a90 <prvUnlockQueue+0x34>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	3324      	adds	r3, #36	; 0x24
     a7e:	4618      	mov	r0, r3
     a80:	f000 fb8e 	bl	11a0 <xTaskRemoveFromEventList>
     a84:	4603      	mov	r3, r0
     a86:	2b00      	cmp	r3, #0
     a88:	d003      	beq.n	a92 <prvUnlockQueue+0x36>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
     a8a:	f000 fc49 	bl	1320 <vTaskMissedYield>
     a8e:	e000      	b.n	a92 <prvUnlockQueue+0x36>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
     a90:	e007      	b.n	aa2 <prvUnlockQueue+0x46>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
     a92:	7bfb      	ldrb	r3, [r7, #15]
     a94:	3b01      	subs	r3, #1
     a96:	b2db      	uxtb	r3, r3
     a98:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
     a9e:	2b00      	cmp	r3, #0
     aa0:	dce7      	bgt.n	a72 <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	22ff      	movs	r2, #255	; 0xff
     aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
     aaa:	f7ff fd3b 	bl	524 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     aae:	f7ff fd15 	bl	4dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
     ab2:	687b      	ldr	r3, [r7, #4]
     ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
     ab8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
     aba:	e013      	b.n	ae4 <prvUnlockQueue+0x88>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	691b      	ldr	r3, [r3, #16]
     ac0:	2b00      	cmp	r3, #0
     ac2:	d00e      	beq.n	ae2 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     ac4:	687b      	ldr	r3, [r7, #4]
     ac6:	3310      	adds	r3, #16
     ac8:	4618      	mov	r0, r3
     aca:	f000 fb69 	bl	11a0 <xTaskRemoveFromEventList>
     ace:	4603      	mov	r3, r0
     ad0:	2b00      	cmp	r3, #0
     ad2:	d001      	beq.n	ad8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
     ad4:	f000 fc24 	bl	1320 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
     ad8:	7bbb      	ldrb	r3, [r7, #14]
     ada:	3b01      	subs	r3, #1
     adc:	b2db      	uxtb	r3, r3
     ade:	73bb      	strb	r3, [r7, #14]
     ae0:	e000      	b.n	ae4 <prvUnlockQueue+0x88>
			}
			else
			{
				break;
     ae2:	e003      	b.n	aec <prvUnlockQueue+0x90>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
     ae4:	f997 300e 	ldrsb.w	r3, [r7, #14]
     ae8:	2b00      	cmp	r3, #0
     aea:	dce7      	bgt.n	abc <prvUnlockQueue+0x60>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
     aec:	687b      	ldr	r3, [r7, #4]
     aee:	22ff      	movs	r2, #255	; 0xff
     af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
     af4:	f7ff fd16 	bl	524 <vPortExitCritical>
}
     af8:	3710      	adds	r7, #16
     afa:	46bd      	mov	sp, r7
     afc:	bd80      	pop	{r7, pc}
     afe:	bf00      	nop

00000b00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
     b00:	b580      	push	{r7, lr}
     b02:	b084      	sub	sp, #16
     b04:	af00      	add	r7, sp, #0
     b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
     b08:	f7ff fce8 	bl	4dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     b0c:	687b      	ldr	r3, [r7, #4]
     b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     b10:	687b      	ldr	r3, [r7, #4]
     b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     b14:	429a      	cmp	r2, r3
     b16:	d102      	bne.n	b1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
     b18:	2301      	movs	r3, #1
     b1a:	60fb      	str	r3, [r7, #12]
     b1c:	e001      	b.n	b22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
     b1e:	2300      	movs	r3, #0
     b20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
     b22:	f7ff fcff 	bl	524 <vPortExitCritical>

	return xReturn;
     b26:	68fb      	ldr	r3, [r7, #12]
}
     b28:	4618      	mov	r0, r3
     b2a:	3710      	adds	r7, #16
     b2c:	46bd      	mov	sp, r7
     b2e:	bd80      	pop	{r7, pc}

00000b30 <xTaskCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
     b30:	b580      	push	{r7, lr}
     b32:	b08c      	sub	sp, #48	; 0x30
     b34:	af04      	add	r7, sp, #16
     b36:	60f8      	str	r0, [r7, #12]
     b38:	60b9      	str	r1, [r7, #8]
     b3a:	603b      	str	r3, [r7, #0]
     b3c:	4613      	mov	r3, r2
     b3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     b40:	88fb      	ldrh	r3, [r7, #6]
     b42:	009b      	lsls	r3, r3, #2
     b44:	4618      	mov	r0, r3
     b46:	f7ff faf9 	bl	13c <pvPortMalloc>
     b4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
     b4c:	697b      	ldr	r3, [r7, #20]
     b4e:	2b00      	cmp	r3, #0
     b50:	d00e      	beq.n	b70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
     b52:	204c      	movs	r0, #76	; 0x4c
     b54:	f7ff faf2 	bl	13c <pvPortMalloc>
     b58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
     b5a:	69fb      	ldr	r3, [r7, #28]
     b5c:	2b00      	cmp	r3, #0
     b5e:	d003      	beq.n	b68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
     b60:	69fb      	ldr	r3, [r7, #28]
     b62:	697a      	ldr	r2, [r7, #20]
     b64:	631a      	str	r2, [r3, #48]	; 0x30
     b66:	e005      	b.n	b74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
     b68:	6978      	ldr	r0, [r7, #20]
     b6a:	f7ff fb2d 	bl	1c8 <vPortFree>
     b6e:	e001      	b.n	b74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
     b70:	2300      	movs	r3, #0
     b72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
     b74:	69fb      	ldr	r3, [r7, #28]
     b76:	2b00      	cmp	r3, #0
     b78:	d011      	beq.n	b9e <xTaskCreate+0x6e>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB );
     b7a:	88fa      	ldrh	r2, [r7, #6]
     b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b7e:	9300      	str	r3, [sp, #0]
     b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b82:	9301      	str	r3, [sp, #4]
     b84:	69fb      	ldr	r3, [r7, #28]
     b86:	9302      	str	r3, [sp, #8]
     b88:	68f8      	ldr	r0, [r7, #12]
     b8a:	68b9      	ldr	r1, [r7, #8]
     b8c:	683b      	ldr	r3, [r7, #0]
     b8e:	f000 f80f 	bl	bb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
     b92:	69f8      	ldr	r0, [r7, #28]
     b94:	f000 f880 	bl	c98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
     b98:	2301      	movs	r3, #1
     b9a:	61bb      	str	r3, [r7, #24]
     b9c:	e002      	b.n	ba4 <xTaskCreate+0x74>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     b9e:	f04f 33ff 	mov.w	r3, #4294967295
     ba2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
     ba4:	69bb      	ldr	r3, [r7, #24]
	}
     ba6:	4618      	mov	r0, r3
     ba8:	3720      	adds	r7, #32
     baa:	46bd      	mov	sp, r7
     bac:	bd80      	pop	{r7, pc}
     bae:	bf00      	nop

00000bb0 <prvInitialiseNewTask>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, TCB_t *pxNewTCB ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
     bb0:	b580      	push	{r7, lr}
     bb2:	b086      	sub	sp, #24
     bb4:	af00      	add	r7, sp, #0
     bb6:	60f8      	str	r0, [r7, #12]
     bb8:	60b9      	str	r1, [r7, #8]
     bba:	603b      	str	r3, [r7, #0]
     bbc:	4613      	mov	r3, r2
     bbe:	80fb      	strh	r3, [r7, #6]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
     bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
     bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     bc4:	88fb      	ldrh	r3, [r7, #6]
     bc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     bca:	3b01      	subs	r3, #1
     bcc:	009b      	lsls	r3, r3, #2
     bce:	4413      	add	r3, r2
     bd0:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
     bd2:	693b      	ldr	r3, [r7, #16]
     bd4:	f023 0307 	bic.w	r3, r3, #7
     bd8:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
     bda:	693b      	ldr	r3, [r7, #16]
     bdc:	f003 0307 	and.w	r3, r3, #7
     be0:	2b00      	cmp	r3, #0
     be2:	d000      	beq.n	be6 <prvInitialiseNewTask+0x36>
     be4:	e7fe      	b.n	be4 <prvInitialiseNewTask+0x34>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     be6:	2300      	movs	r3, #0
     be8:	617b      	str	r3, [r7, #20]
     bea:	e013      	b.n	c14 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
     bec:	68ba      	ldr	r2, [r7, #8]
     bee:	697b      	ldr	r3, [r7, #20]
     bf0:	4413      	add	r3, r2
     bf2:	7819      	ldrb	r1, [r3, #0]
     bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
     bf6:	697b      	ldr	r3, [r7, #20]
     bf8:	4413      	add	r3, r2
     bfa:	3330      	adds	r3, #48	; 0x30
     bfc:	460a      	mov	r2, r1
     bfe:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
     c00:	68ba      	ldr	r2, [r7, #8]
     c02:	697b      	ldr	r3, [r7, #20]
     c04:	4413      	add	r3, r2
     c06:	781b      	ldrb	r3, [r3, #0]
     c08:	2b00      	cmp	r3, #0
     c0a:	d100      	bne.n	c0e <prvInitialiseNewTask+0x5e>
		{
			break;
     c0c:	e005      	b.n	c1a <prvInitialiseNewTask+0x6a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     c0e:	697b      	ldr	r3, [r7, #20]
     c10:	3301      	adds	r3, #1
     c12:	617b      	str	r3, [r7, #20]
     c14:	697b      	ldr	r3, [r7, #20]
     c16:	2b04      	cmp	r3, #4
     c18:	d9e8      	bls.n	bec <prvInitialiseNewTask+0x3c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c1c:	2200      	movs	r2, #0
     c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
     c22:	6a3b      	ldr	r3, [r7, #32]
     c24:	2b09      	cmp	r3, #9
     c26:	d901      	bls.n	c2c <prvInitialiseNewTask+0x7c>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
     c28:	2309      	movs	r3, #9
     c2a:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
     c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c2e:	6a3a      	ldr	r2, [r7, #32]
     c30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
     c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c34:	6a3a      	ldr	r2, [r7, #32]
     c36:	63da      	str	r2, [r3, #60]	; 0x3c
		pxNewTCB->uxMutexesHeld = 0;
     c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c3a:	2200      	movs	r2, #0
     c3c:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
     c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c40:	3304      	adds	r3, #4
     c42:	4618      	mov	r0, r3
     c44:	f7ff faee 	bl	224 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
     c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c4a:	3318      	adds	r3, #24
     c4c:	4618      	mov	r0, r3
     c4e:	f7ff fae9 	bl	224 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
     c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     c58:	6a3b      	ldr	r3, [r7, #32]
     c5a:	f1c3 020a 	rsb	r2, r3, #10
     c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
     c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
     c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c6a:	2200      	movs	r2, #0
     c6c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
     c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c70:	2200      	movs	r2, #0
     c72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     c76:	6938      	ldr	r0, [r7, #16]
     c78:	68f9      	ldr	r1, [r7, #12]
     c7a:	683a      	ldr	r2, [r7, #0]
     c7c:	f7ff fb64 	bl	348 <pxPortInitialiseStack>
     c80:	4602      	mov	r2, r0
     c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c84:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
     c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c88:	2b00      	cmp	r3, #0
     c8a:	d002      	beq.n	c92 <prvInitialiseNewTask+0xe2>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
     c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     c92:	3718      	adds	r7, #24
     c94:	46bd      	mov	sp, r7
     c96:	bd80      	pop	{r7, pc}

00000c98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
     c98:	b580      	push	{r7, lr}
     c9a:	b082      	sub	sp, #8
     c9c:	af00      	add	r7, sp, #0
     c9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
     ca0:	f7ff fc1c 	bl	4dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
     ca4:	4b2a      	ldr	r3, [pc, #168]	; (d50 <prvAddNewTaskToReadyList+0xb8>)
     ca6:	681b      	ldr	r3, [r3, #0]
     ca8:	3301      	adds	r3, #1
     caa:	4a29      	ldr	r2, [pc, #164]	; (d50 <prvAddNewTaskToReadyList+0xb8>)
     cac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
     cae:	4b29      	ldr	r3, [pc, #164]	; (d54 <prvAddNewTaskToReadyList+0xbc>)
     cb0:	681b      	ldr	r3, [r3, #0]
     cb2:	2b00      	cmp	r3, #0
     cb4:	d109      	bne.n	cca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
     cb6:	4a27      	ldr	r2, [pc, #156]	; (d54 <prvAddNewTaskToReadyList+0xbc>)
     cb8:	687b      	ldr	r3, [r7, #4]
     cba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
     cbc:	4b24      	ldr	r3, [pc, #144]	; (d50 <prvAddNewTaskToReadyList+0xb8>)
     cbe:	681b      	ldr	r3, [r3, #0]
     cc0:	2b01      	cmp	r3, #1
     cc2:	d110      	bne.n	ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
     cc4:	f000 fb50 	bl	1368 <prvInitialiseTaskLists>
     cc8:	e00d      	b.n	ce6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
     cca:	4b23      	ldr	r3, [pc, #140]	; (d58 <prvAddNewTaskToReadyList+0xc0>)
     ccc:	681b      	ldr	r3, [r3, #0]
     cce:	2b00      	cmp	r3, #0
     cd0:	d109      	bne.n	ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
     cd2:	4b20      	ldr	r3, [pc, #128]	; (d54 <prvAddNewTaskToReadyList+0xbc>)
     cd4:	681b      	ldr	r3, [r3, #0]
     cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     cdc:	429a      	cmp	r2, r3
     cde:	d802      	bhi.n	ce6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
     ce0:	4a1c      	ldr	r2, [pc, #112]	; (d54 <prvAddNewTaskToReadyList+0xbc>)
     ce2:	687b      	ldr	r3, [r7, #4]
     ce4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
     ce6:	4b1d      	ldr	r3, [pc, #116]	; (d5c <prvAddNewTaskToReadyList+0xc4>)
     ce8:	681b      	ldr	r3, [r3, #0]
     cea:	3301      	adds	r3, #1
     cec:	4a1b      	ldr	r2, [pc, #108]	; (d5c <prvAddNewTaskToReadyList+0xc4>)
     cee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
     cf0:	687b      	ldr	r3, [r7, #4]
     cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     cf4:	4b1a      	ldr	r3, [pc, #104]	; (d60 <prvAddNewTaskToReadyList+0xc8>)
     cf6:	681b      	ldr	r3, [r3, #0]
     cf8:	429a      	cmp	r2, r3
     cfa:	d903      	bls.n	d04 <prvAddNewTaskToReadyList+0x6c>
     cfc:	687b      	ldr	r3, [r7, #4]
     cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     d00:	4a17      	ldr	r2, [pc, #92]	; (d60 <prvAddNewTaskToReadyList+0xc8>)
     d02:	6013      	str	r3, [r2, #0]
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     d08:	4613      	mov	r3, r2
     d0a:	009b      	lsls	r3, r3, #2
     d0c:	4413      	add	r3, r2
     d0e:	009b      	lsls	r3, r3, #2
     d10:	4a14      	ldr	r2, [pc, #80]	; (d64 <prvAddNewTaskToReadyList+0xcc>)
     d12:	441a      	add	r2, r3
     d14:	687b      	ldr	r3, [r7, #4]
     d16:	3304      	adds	r3, #4
     d18:	4610      	mov	r0, r2
     d1a:	4619      	mov	r1, r3
     d1c:	f7ff fa8e 	bl	23c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
     d20:	f7ff fc00 	bl	524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
     d24:	4b0c      	ldr	r3, [pc, #48]	; (d58 <prvAddNewTaskToReadyList+0xc0>)
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	2b00      	cmp	r3, #0
     d2a:	d00e      	beq.n	d4a <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
     d2c:	4b09      	ldr	r3, [pc, #36]	; (d54 <prvAddNewTaskToReadyList+0xbc>)
     d2e:	681b      	ldr	r3, [r3, #0]
     d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     d32:	687b      	ldr	r3, [r7, #4]
     d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     d36:	429a      	cmp	r2, r3
     d38:	d207      	bcs.n	d4a <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();
     d3a:	4b0b      	ldr	r3, [pc, #44]	; (d68 <prvAddNewTaskToReadyList+0xd0>)
     d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     d40:	601a      	str	r2, [r3, #0]
     d42:	f3bf 8f4f 	dsb	sy
     d46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     d4a:	3708      	adds	r7, #8
     d4c:	46bd      	mov	sp, r7
     d4e:	bd80      	pop	{r7, pc}
     d50:	20004158 	.word	0x20004158
     d54:	20004034 	.word	0x20004034
     d58:	20004164 	.word	0x20004164
     d5c:	20004174 	.word	0x20004174
     d60:	20004160 	.word	0x20004160
     d64:	20004038 	.word	0x20004038
     d68:	e000ed04 	.word	0xe000ed04

00000d6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
     d6c:	b580      	push	{r7, lr}
     d6e:	b084      	sub	sp, #16
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
     d74:	2300      	movs	r3, #0
     d76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d00d      	beq.n	d9a <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
     d7e:	4b0e      	ldr	r3, [pc, #56]	; (db8 <vTaskDelay+0x4c>)
     d80:	681b      	ldr	r3, [r3, #0]
     d82:	2b00      	cmp	r3, #0
     d84:	d000      	beq.n	d88 <vTaskDelay+0x1c>
     d86:	e7fe      	b.n	d86 <vTaskDelay+0x1a>
			vTaskSuspendAll();
     d88:	f000 f856 	bl	e38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
     d8c:	6878      	ldr	r0, [r7, #4]
     d8e:	2100      	movs	r1, #0
     d90:	f000 fc9e 	bl	16d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     d94:	f000 f85e 	bl	e54 <xTaskResumeAll>
     d98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     d9a:	68fb      	ldr	r3, [r7, #12]
     d9c:	2b00      	cmp	r3, #0
     d9e:	d107      	bne.n	db0 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
     da0:	4b06      	ldr	r3, [pc, #24]	; (dbc <vTaskDelay+0x50>)
     da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     da6:	601a      	str	r2, [r3, #0]
     da8:	f3bf 8f4f 	dsb	sy
     dac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     db0:	3710      	adds	r7, #16
     db2:	46bd      	mov	sp, r7
     db4:	bd80      	pop	{r7, pc}
     db6:	bf00      	nop
     db8:	20004180 	.word	0x20004180
     dbc:	e000ed04 	.word	0xe000ed04

00000dc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
     dc0:	b580      	push	{r7, lr}
     dc2:	b086      	sub	sp, #24
     dc4:	af02      	add	r7, sp, #8
BaseType_t xReturn;
uint16_t usIdleTaskStackSize = configMINIMAL_STACK_SIZE;
     dc6:	2382      	movs	r3, #130	; 0x82
     dc8:	81fb      	strh	r3, [r7, #14]
		xReturn = xTaskCreateStatic( prvIdleTask, "IDLE", usIdleTaskStackSize, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle, pxIdleTaskStackBuffer, pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", usIdleTaskStackSize, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
     dca:	89fa      	ldrh	r2, [r7, #14]
     dcc:	2300      	movs	r3, #0
     dce:	9300      	str	r3, [sp, #0]
     dd0:	4b13      	ldr	r3, [pc, #76]	; (e20 <vTaskStartScheduler+0x60>)
     dd2:	9301      	str	r3, [sp, #4]
     dd4:	4813      	ldr	r0, [pc, #76]	; (e24 <vTaskStartScheduler+0x64>)
     dd6:	4914      	ldr	r1, [pc, #80]	; (e28 <vTaskStartScheduler+0x68>)
     dd8:	2300      	movs	r3, #0
     dda:	f7ff fea9 	bl	b30 <xTaskCreate>
     dde:	60b8      	str	r0, [r7, #8]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
     de0:	68bb      	ldr	r3, [r7, #8]
     de2:	2b01      	cmp	r3, #1
     de4:	d115      	bne.n	e12 <vTaskStartScheduler+0x52>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
     de6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
     dea:	f383 8811 	msr	BASEPRI, r3
     dee:	f3bf 8f6f 	isb	sy
     df2:	f3bf 8f4f 	dsb	sy
     df6:	607b      	str	r3, [r7, #4]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
     df8:	4b0c      	ldr	r3, [pc, #48]	; (e2c <vTaskStartScheduler+0x6c>)
     dfa:	f04f 32ff 	mov.w	r2, #4294967295
     dfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
     e00:	4b0b      	ldr	r3, [pc, #44]	; (e30 <vTaskStartScheduler+0x70>)
     e02:	2201      	movs	r2, #1
     e04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
     e06:	4b0b      	ldr	r3, [pc, #44]	; (e34 <vTaskStartScheduler+0x74>)
     e08:	2200      	movs	r2, #0
     e0a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     e0c:	f7ff fb08 	bl	420 <xPortStartScheduler>
     e10:	e003      	b.n	e1a <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
     e12:	68bb      	ldr	r3, [r7, #8]
     e14:	2b00      	cmp	r3, #0
     e16:	d100      	bne.n	e1a <vTaskStartScheduler+0x5a>
     e18:	e7fe      	b.n	e18 <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
     e1a:	3710      	adds	r7, #16
     e1c:	46bd      	mov	sp, r7
     e1e:	bd80      	pop	{r7, pc}
     e20:	2000417c 	.word	0x2000417c
     e24:	00001339 	.word	0x00001339
     e28:	00001fbc 	.word	0x00001fbc
     e2c:	20004178 	.word	0x20004178
     e30:	20004164 	.word	0x20004164
     e34:	2000415c 	.word	0x2000415c

00000e38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
     e38:	b480      	push	{r7}
     e3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
     e3c:	4b04      	ldr	r3, [pc, #16]	; (e50 <vTaskSuspendAll+0x18>)
     e3e:	681b      	ldr	r3, [r3, #0]
     e40:	3301      	adds	r3, #1
     e42:	4a03      	ldr	r2, [pc, #12]	; (e50 <vTaskSuspendAll+0x18>)
     e44:	6013      	str	r3, [r2, #0]
}
     e46:	46bd      	mov	sp, r7
     e48:	f85d 7b04 	ldr.w	r7, [sp], #4
     e4c:	4770      	bx	lr
     e4e:	bf00      	nop
     e50:	20004180 	.word	0x20004180

00000e54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
     e54:	b580      	push	{r7, lr}
     e56:	b084      	sub	sp, #16
     e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
     e5a:	2300      	movs	r3, #0
     e5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
     e5e:	2300      	movs	r3, #0
     e60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
     e62:	4b3d      	ldr	r3, [pc, #244]	; (f58 <xTaskResumeAll+0x104>)
     e64:	681b      	ldr	r3, [r3, #0]
     e66:	2b00      	cmp	r3, #0
     e68:	d100      	bne.n	e6c <xTaskResumeAll+0x18>
     e6a:	e7fe      	b.n	e6a <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     e6c:	f7ff fb36 	bl	4dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
     e70:	4b39      	ldr	r3, [pc, #228]	; (f58 <xTaskResumeAll+0x104>)
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	3b01      	subs	r3, #1
     e76:	4a38      	ldr	r2, [pc, #224]	; (f58 <xTaskResumeAll+0x104>)
     e78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     e7a:	4b37      	ldr	r3, [pc, #220]	; (f58 <xTaskResumeAll+0x104>)
     e7c:	681b      	ldr	r3, [r3, #0]
     e7e:	2b00      	cmp	r3, #0
     e80:	d162      	bne.n	f48 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
     e82:	4b36      	ldr	r3, [pc, #216]	; (f5c <xTaskResumeAll+0x108>)
     e84:	681b      	ldr	r3, [r3, #0]
     e86:	2b00      	cmp	r3, #0
     e88:	d05e      	beq.n	f48 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     e8a:	e02f      	b.n	eec <xTaskResumeAll+0x98>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
     e8c:	4b34      	ldr	r3, [pc, #208]	; (f60 <xTaskResumeAll+0x10c>)
     e8e:	68db      	ldr	r3, [r3, #12]
     e90:	68db      	ldr	r3, [r3, #12]
     e92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     e94:	68fb      	ldr	r3, [r7, #12]
     e96:	3318      	adds	r3, #24
     e98:	4618      	mov	r0, r3
     e9a:	f7ff fa2b 	bl	2f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     e9e:	68fb      	ldr	r3, [r7, #12]
     ea0:	3304      	adds	r3, #4
     ea2:	4618      	mov	r0, r3
     ea4:	f7ff fa26 	bl	2f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     ea8:	68fb      	ldr	r3, [r7, #12]
     eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     eac:	4b2d      	ldr	r3, [pc, #180]	; (f64 <xTaskResumeAll+0x110>)
     eae:	681b      	ldr	r3, [r3, #0]
     eb0:	429a      	cmp	r2, r3
     eb2:	d903      	bls.n	ebc <xTaskResumeAll+0x68>
     eb4:	68fb      	ldr	r3, [r7, #12]
     eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     eb8:	4a2a      	ldr	r2, [pc, #168]	; (f64 <xTaskResumeAll+0x110>)
     eba:	6013      	str	r3, [r2, #0]
     ebc:	68fb      	ldr	r3, [r7, #12]
     ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     ec0:	4613      	mov	r3, r2
     ec2:	009b      	lsls	r3, r3, #2
     ec4:	4413      	add	r3, r2
     ec6:	009b      	lsls	r3, r3, #2
     ec8:	4a27      	ldr	r2, [pc, #156]	; (f68 <xTaskResumeAll+0x114>)
     eca:	441a      	add	r2, r3
     ecc:	68fb      	ldr	r3, [r7, #12]
     ece:	3304      	adds	r3, #4
     ed0:	4610      	mov	r0, r2
     ed2:	4619      	mov	r1, r3
     ed4:	f7ff f9b2 	bl	23c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     ed8:	68fb      	ldr	r3, [r7, #12]
     eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     edc:	4b23      	ldr	r3, [pc, #140]	; (f6c <xTaskResumeAll+0x118>)
     ede:	681b      	ldr	r3, [r3, #0]
     ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ee2:	429a      	cmp	r2, r3
     ee4:	d302      	bcc.n	eec <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
     ee6:	4b22      	ldr	r3, [pc, #136]	; (f70 <xTaskResumeAll+0x11c>)
     ee8:	2201      	movs	r2, #1
     eea:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     eec:	4b1c      	ldr	r3, [pc, #112]	; (f60 <xTaskResumeAll+0x10c>)
     eee:	681b      	ldr	r3, [r3, #0]
     ef0:	2b00      	cmp	r3, #0
     ef2:	d1cb      	bne.n	e8c <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
     ef4:	68fb      	ldr	r3, [r7, #12]
     ef6:	2b00      	cmp	r3, #0
     ef8:	d001      	beq.n	efe <xTaskResumeAll+0xaa>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
     efa:	f000 fa75 	bl	13e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
     efe:	4b1d      	ldr	r3, [pc, #116]	; (f74 <xTaskResumeAll+0x120>)
     f00:	681b      	ldr	r3, [r3, #0]
     f02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
     f04:	687b      	ldr	r3, [r7, #4]
     f06:	2b00      	cmp	r3, #0
     f08:	d010      	beq.n	f2c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
     f0a:	f000 f837 	bl	f7c <xTaskIncrementTick>
     f0e:	4603      	mov	r3, r0
     f10:	2b00      	cmp	r3, #0
     f12:	d002      	beq.n	f1a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
     f14:	4b16      	ldr	r3, [pc, #88]	; (f70 <xTaskResumeAll+0x11c>)
     f16:	2201      	movs	r2, #1
     f18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	3b01      	subs	r3, #1
     f1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
     f20:	687b      	ldr	r3, [r7, #4]
     f22:	2b00      	cmp	r3, #0
     f24:	d1f1      	bne.n	f0a <xTaskResumeAll+0xb6>

						uxPendedTicks = 0;
     f26:	4b13      	ldr	r3, [pc, #76]	; (f74 <xTaskResumeAll+0x120>)
     f28:	2200      	movs	r2, #0
     f2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
     f2c:	4b10      	ldr	r3, [pc, #64]	; (f70 <xTaskResumeAll+0x11c>)
     f2e:	681b      	ldr	r3, [r3, #0]
     f30:	2b00      	cmp	r3, #0
     f32:	d009      	beq.n	f48 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
     f34:	2301      	movs	r3, #1
     f36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
     f38:	4b0f      	ldr	r3, [pc, #60]	; (f78 <xTaskResumeAll+0x124>)
     f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     f3e:	601a      	str	r2, [r3, #0]
     f40:	f3bf 8f4f 	dsb	sy
     f44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
     f48:	f7ff faec 	bl	524 <vPortExitCritical>

	return xAlreadyYielded;
     f4c:	68bb      	ldr	r3, [r7, #8]
}
     f4e:	4618      	mov	r0, r3
     f50:	3710      	adds	r7, #16
     f52:	46bd      	mov	sp, r7
     f54:	bd80      	pop	{r7, pc}
     f56:	bf00      	nop
     f58:	20004180 	.word	0x20004180
     f5c:	20004158 	.word	0x20004158
     f60:	20004130 	.word	0x20004130
     f64:	20004160 	.word	0x20004160
     f68:	20004038 	.word	0x20004038
     f6c:	20004034 	.word	0x20004034
     f70:	2000416c 	.word	0x2000416c
     f74:	20004168 	.word	0x20004168
     f78:	e000ed04 	.word	0xe000ed04

00000f7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
     f7c:	b580      	push	{r7, lr}
     f7e:	b086      	sub	sp, #24
     f80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
     f82:	2300      	movs	r3, #0
     f84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     f86:	4b45      	ldr	r3, [pc, #276]	; (109c <xTaskIncrementTick+0x120>)
     f88:	681b      	ldr	r3, [r3, #0]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d175      	bne.n	107a <xTaskIncrementTick+0xfe>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
     f8e:	4b44      	ldr	r3, [pc, #272]	; (10a0 <xTaskIncrementTick+0x124>)
     f90:	681b      	ldr	r3, [r3, #0]
     f92:	3301      	adds	r3, #1
     f94:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
     f96:	4a42      	ldr	r2, [pc, #264]	; (10a0 <xTaskIncrementTick+0x124>)
     f98:	693b      	ldr	r3, [r7, #16]
     f9a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
     f9c:	693b      	ldr	r3, [r7, #16]
     f9e:	2b00      	cmp	r3, #0
     fa0:	d116      	bne.n	fd0 <xTaskIncrementTick+0x54>
		{
			taskSWITCH_DELAYED_LISTS();
     fa2:	4b40      	ldr	r3, [pc, #256]	; (10a4 <xTaskIncrementTick+0x128>)
     fa4:	681b      	ldr	r3, [r3, #0]
     fa6:	681b      	ldr	r3, [r3, #0]
     fa8:	2b00      	cmp	r3, #0
     faa:	d000      	beq.n	fae <xTaskIncrementTick+0x32>
     fac:	e7fe      	b.n	fac <xTaskIncrementTick+0x30>
     fae:	4b3d      	ldr	r3, [pc, #244]	; (10a4 <xTaskIncrementTick+0x128>)
     fb0:	681b      	ldr	r3, [r3, #0]
     fb2:	60fb      	str	r3, [r7, #12]
     fb4:	4b3c      	ldr	r3, [pc, #240]	; (10a8 <xTaskIncrementTick+0x12c>)
     fb6:	681b      	ldr	r3, [r3, #0]
     fb8:	4a3a      	ldr	r2, [pc, #232]	; (10a4 <xTaskIncrementTick+0x128>)
     fba:	6013      	str	r3, [r2, #0]
     fbc:	4a3a      	ldr	r2, [pc, #232]	; (10a8 <xTaskIncrementTick+0x12c>)
     fbe:	68fb      	ldr	r3, [r7, #12]
     fc0:	6013      	str	r3, [r2, #0]
     fc2:	4b3a      	ldr	r3, [pc, #232]	; (10ac <xTaskIncrementTick+0x130>)
     fc4:	681b      	ldr	r3, [r3, #0]
     fc6:	3301      	adds	r3, #1
     fc8:	4a38      	ldr	r2, [pc, #224]	; (10ac <xTaskIncrementTick+0x130>)
     fca:	6013      	str	r3, [r2, #0]
     fcc:	f000 fa0c 	bl	13e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
     fd0:	4b37      	ldr	r3, [pc, #220]	; (10b0 <xTaskIncrementTick+0x134>)
     fd2:	681b      	ldr	r3, [r3, #0]
     fd4:	693a      	ldr	r2, [r7, #16]
     fd6:	429a      	cmp	r2, r3
     fd8:	d34e      	bcc.n	1078 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     fda:	4b32      	ldr	r3, [pc, #200]	; (10a4 <xTaskIncrementTick+0x128>)
     fdc:	681b      	ldr	r3, [r3, #0]
     fde:	681b      	ldr	r3, [r3, #0]
     fe0:	2b00      	cmp	r3, #0
     fe2:	d101      	bne.n	fe8 <xTaskIncrementTick+0x6c>
     fe4:	2301      	movs	r3, #1
     fe6:	e000      	b.n	fea <xTaskIncrementTick+0x6e>
     fe8:	2300      	movs	r3, #0
     fea:	2b00      	cmp	r3, #0
     fec:	d004      	beq.n	ff8 <xTaskIncrementTick+0x7c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     fee:	4b30      	ldr	r3, [pc, #192]	; (10b0 <xTaskIncrementTick+0x134>)
     ff0:	f04f 32ff 	mov.w	r2, #4294967295
     ff4:	601a      	str	r2, [r3, #0]
					break;
     ff6:	e03f      	b.n	1078 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     ff8:	4b2a      	ldr	r3, [pc, #168]	; (10a4 <xTaskIncrementTick+0x128>)
     ffa:	681b      	ldr	r3, [r3, #0]
     ffc:	68db      	ldr	r3, [r3, #12]
     ffe:	68db      	ldr	r3, [r3, #12]
    1000:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1002:	68bb      	ldr	r3, [r7, #8]
    1004:	685b      	ldr	r3, [r3, #4]
    1006:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    1008:	693a      	ldr	r2, [r7, #16]
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	429a      	cmp	r2, r3
    100e:	d203      	bcs.n	1018 <xTaskIncrementTick+0x9c>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    1010:	4a27      	ldr	r2, [pc, #156]	; (10b0 <xTaskIncrementTick+0x134>)
    1012:	687b      	ldr	r3, [r7, #4]
    1014:	6013      	str	r3, [r2, #0]
						break;
    1016:	e02f      	b.n	1078 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1018:	68bb      	ldr	r3, [r7, #8]
    101a:	3304      	adds	r3, #4
    101c:	4618      	mov	r0, r3
    101e:	f7ff f969 	bl	2f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1022:	68bb      	ldr	r3, [r7, #8]
    1024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1026:	2b00      	cmp	r3, #0
    1028:	d004      	beq.n	1034 <xTaskIncrementTick+0xb8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    102a:	68bb      	ldr	r3, [r7, #8]
    102c:	3318      	adds	r3, #24
    102e:	4618      	mov	r0, r3
    1030:	f7ff f960 	bl	2f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    1034:	68bb      	ldr	r3, [r7, #8]
    1036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1038:	4b1e      	ldr	r3, [pc, #120]	; (10b4 <xTaskIncrementTick+0x138>)
    103a:	681b      	ldr	r3, [r3, #0]
    103c:	429a      	cmp	r2, r3
    103e:	d903      	bls.n	1048 <xTaskIncrementTick+0xcc>
    1040:	68bb      	ldr	r3, [r7, #8]
    1042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1044:	4a1b      	ldr	r2, [pc, #108]	; (10b4 <xTaskIncrementTick+0x138>)
    1046:	6013      	str	r3, [r2, #0]
    1048:	68bb      	ldr	r3, [r7, #8]
    104a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    104c:	4613      	mov	r3, r2
    104e:	009b      	lsls	r3, r3, #2
    1050:	4413      	add	r3, r2
    1052:	009b      	lsls	r3, r3, #2
    1054:	4a18      	ldr	r2, [pc, #96]	; (10b8 <xTaskIncrementTick+0x13c>)
    1056:	441a      	add	r2, r3
    1058:	68bb      	ldr	r3, [r7, #8]
    105a:	3304      	adds	r3, #4
    105c:	4610      	mov	r0, r2
    105e:	4619      	mov	r1, r3
    1060:	f7ff f8ec 	bl	23c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1064:	68bb      	ldr	r3, [r7, #8]
    1066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1068:	4b14      	ldr	r3, [pc, #80]	; (10bc <xTaskIncrementTick+0x140>)
    106a:	681b      	ldr	r3, [r3, #0]
    106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    106e:	429a      	cmp	r2, r3
    1070:	d301      	bcc.n	1076 <xTaskIncrementTick+0xfa>
						{
							xSwitchRequired = pdTRUE;
    1072:	2301      	movs	r3, #1
    1074:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
    1076:	e7b0      	b.n	fda <xTaskIncrementTick+0x5e>
    1078:	e004      	b.n	1084 <xTaskIncrementTick+0x108>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    107a:	4b11      	ldr	r3, [pc, #68]	; (10c0 <xTaskIncrementTick+0x144>)
    107c:	681b      	ldr	r3, [r3, #0]
    107e:	3301      	adds	r3, #1
    1080:	4a0f      	ldr	r2, [pc, #60]	; (10c0 <xTaskIncrementTick+0x144>)
    1082:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    1084:	4b0f      	ldr	r3, [pc, #60]	; (10c4 <xTaskIncrementTick+0x148>)
    1086:	681b      	ldr	r3, [r3, #0]
    1088:	2b00      	cmp	r3, #0
    108a:	d001      	beq.n	1090 <xTaskIncrementTick+0x114>
		{
			xSwitchRequired = pdTRUE;
    108c:	2301      	movs	r3, #1
    108e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    1090:	697b      	ldr	r3, [r7, #20]
}
    1092:	4618      	mov	r0, r3
    1094:	3718      	adds	r7, #24
    1096:	46bd      	mov	sp, r7
    1098:	bd80      	pop	{r7, pc}
    109a:	bf00      	nop
    109c:	20004180 	.word	0x20004180
    10a0:	2000415c 	.word	0x2000415c
    10a4:	20004128 	.word	0x20004128
    10a8:	2000412c 	.word	0x2000412c
    10ac:	20004170 	.word	0x20004170
    10b0:	20004178 	.word	0x20004178
    10b4:	20004160 	.word	0x20004160
    10b8:	20004038 	.word	0x20004038
    10bc:	20004034 	.word	0x20004034
    10c0:	20004168 	.word	0x20004168
    10c4:	2000416c 	.word	0x2000416c

000010c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    10c8:	b480      	push	{r7}
    10ca:	b083      	sub	sp, #12
    10cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    10ce:	4b22      	ldr	r3, [pc, #136]	; (1158 <vTaskSwitchContext+0x90>)
    10d0:	681b      	ldr	r3, [r3, #0]
    10d2:	2b00      	cmp	r3, #0
    10d4:	d003      	beq.n	10de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    10d6:	4b21      	ldr	r3, [pc, #132]	; (115c <vTaskSwitchContext+0x94>)
    10d8:	2201      	movs	r2, #1
    10da:	601a      	str	r2, [r3, #0]
    10dc:	e037      	b.n	114e <vTaskSwitchContext+0x86>
	}
	else
	{
		xYieldPending = pdFALSE;
    10de:	4b1f      	ldr	r3, [pc, #124]	; (115c <vTaskSwitchContext+0x94>)
    10e0:	2200      	movs	r2, #0
    10e2:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    10e4:	4b1e      	ldr	r3, [pc, #120]	; (1160 <vTaskSwitchContext+0x98>)
    10e6:	681b      	ldr	r3, [r3, #0]
    10e8:	607b      	str	r3, [r7, #4]
    10ea:	e006      	b.n	10fa <vTaskSwitchContext+0x32>
    10ec:	687b      	ldr	r3, [r7, #4]
    10ee:	2b00      	cmp	r3, #0
    10f0:	d100      	bne.n	10f4 <vTaskSwitchContext+0x2c>
    10f2:	e7fe      	b.n	10f2 <vTaskSwitchContext+0x2a>
    10f4:	687b      	ldr	r3, [r7, #4]
    10f6:	3b01      	subs	r3, #1
    10f8:	607b      	str	r3, [r7, #4]
    10fa:	491a      	ldr	r1, [pc, #104]	; (1164 <vTaskSwitchContext+0x9c>)
    10fc:	687a      	ldr	r2, [r7, #4]
    10fe:	4613      	mov	r3, r2
    1100:	009b      	lsls	r3, r3, #2
    1102:	4413      	add	r3, r2
    1104:	009b      	lsls	r3, r3, #2
    1106:	440b      	add	r3, r1
    1108:	681b      	ldr	r3, [r3, #0]
    110a:	2b00      	cmp	r3, #0
    110c:	d0ee      	beq.n	10ec <vTaskSwitchContext+0x24>
    110e:	687a      	ldr	r2, [r7, #4]
    1110:	4613      	mov	r3, r2
    1112:	009b      	lsls	r3, r3, #2
    1114:	4413      	add	r3, r2
    1116:	009b      	lsls	r3, r3, #2
    1118:	4a12      	ldr	r2, [pc, #72]	; (1164 <vTaskSwitchContext+0x9c>)
    111a:	4413      	add	r3, r2
    111c:	603b      	str	r3, [r7, #0]
    111e:	683b      	ldr	r3, [r7, #0]
    1120:	685b      	ldr	r3, [r3, #4]
    1122:	685a      	ldr	r2, [r3, #4]
    1124:	683b      	ldr	r3, [r7, #0]
    1126:	605a      	str	r2, [r3, #4]
    1128:	683b      	ldr	r3, [r7, #0]
    112a:	685a      	ldr	r2, [r3, #4]
    112c:	683b      	ldr	r3, [r7, #0]
    112e:	3308      	adds	r3, #8
    1130:	429a      	cmp	r2, r3
    1132:	d104      	bne.n	113e <vTaskSwitchContext+0x76>
    1134:	683b      	ldr	r3, [r7, #0]
    1136:	685b      	ldr	r3, [r3, #4]
    1138:	685a      	ldr	r2, [r3, #4]
    113a:	683b      	ldr	r3, [r7, #0]
    113c:	605a      	str	r2, [r3, #4]
    113e:	683b      	ldr	r3, [r7, #0]
    1140:	685b      	ldr	r3, [r3, #4]
    1142:	68db      	ldr	r3, [r3, #12]
    1144:	4a08      	ldr	r2, [pc, #32]	; (1168 <vTaskSwitchContext+0xa0>)
    1146:	6013      	str	r3, [r2, #0]
    1148:	4a05      	ldr	r2, [pc, #20]	; (1160 <vTaskSwitchContext+0x98>)
    114a:	687b      	ldr	r3, [r7, #4]
    114c:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    114e:	370c      	adds	r7, #12
    1150:	46bd      	mov	sp, r7
    1152:	f85d 7b04 	ldr.w	r7, [sp], #4
    1156:	4770      	bx	lr
    1158:	20004180 	.word	0x20004180
    115c:	2000416c 	.word	0x2000416c
    1160:	20004160 	.word	0x20004160
    1164:	20004038 	.word	0x20004038
    1168:	20004034 	.word	0x20004034

0000116c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    116c:	b580      	push	{r7, lr}
    116e:	b082      	sub	sp, #8
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
    1174:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    1176:	687b      	ldr	r3, [r7, #4]
    1178:	2b00      	cmp	r3, #0
    117a:	d100      	bne.n	117e <vTaskPlaceOnEventList+0x12>
    117c:	e7fe      	b.n	117c <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    117e:	4b07      	ldr	r3, [pc, #28]	; (119c <vTaskPlaceOnEventList+0x30>)
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	3318      	adds	r3, #24
    1184:	6878      	ldr	r0, [r7, #4]
    1186:	4619      	mov	r1, r3
    1188:	f7ff f87c 	bl	284 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    118c:	6838      	ldr	r0, [r7, #0]
    118e:	2101      	movs	r1, #1
    1190:	f000 fa9e 	bl	16d0 <prvAddCurrentTaskToDelayedList>
}
    1194:	3708      	adds	r7, #8
    1196:	46bd      	mov	sp, r7
    1198:	bd80      	pop	{r7, pc}
    119a:	bf00      	nop
    119c:	20004034 	.word	0x20004034

000011a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    11a0:	b580      	push	{r7, lr}
    11a2:	b084      	sub	sp, #16
    11a4:	af00      	add	r7, sp, #0
    11a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    11a8:	687b      	ldr	r3, [r7, #4]
    11aa:	68db      	ldr	r3, [r3, #12]
    11ac:	68db      	ldr	r3, [r3, #12]
    11ae:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    11b0:	68bb      	ldr	r3, [r7, #8]
    11b2:	2b00      	cmp	r3, #0
    11b4:	d100      	bne.n	11b8 <xTaskRemoveFromEventList+0x18>
    11b6:	e7fe      	b.n	11b6 <xTaskRemoveFromEventList+0x16>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    11b8:	68bb      	ldr	r3, [r7, #8]
    11ba:	3318      	adds	r3, #24
    11bc:	4618      	mov	r0, r3
    11be:	f7ff f899 	bl	2f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    11c2:	4b1e      	ldr	r3, [pc, #120]	; (123c <xTaskRemoveFromEventList+0x9c>)
    11c4:	681b      	ldr	r3, [r3, #0]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d11d      	bne.n	1206 <xTaskRemoveFromEventList+0x66>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    11ca:	68bb      	ldr	r3, [r7, #8]
    11cc:	3304      	adds	r3, #4
    11ce:	4618      	mov	r0, r3
    11d0:	f7ff f890 	bl	2f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    11d4:	68bb      	ldr	r3, [r7, #8]
    11d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    11d8:	4b19      	ldr	r3, [pc, #100]	; (1240 <xTaskRemoveFromEventList+0xa0>)
    11da:	681b      	ldr	r3, [r3, #0]
    11dc:	429a      	cmp	r2, r3
    11de:	d903      	bls.n	11e8 <xTaskRemoveFromEventList+0x48>
    11e0:	68bb      	ldr	r3, [r7, #8]
    11e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11e4:	4a16      	ldr	r2, [pc, #88]	; (1240 <xTaskRemoveFromEventList+0xa0>)
    11e6:	6013      	str	r3, [r2, #0]
    11e8:	68bb      	ldr	r3, [r7, #8]
    11ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    11ec:	4613      	mov	r3, r2
    11ee:	009b      	lsls	r3, r3, #2
    11f0:	4413      	add	r3, r2
    11f2:	009b      	lsls	r3, r3, #2
    11f4:	4a13      	ldr	r2, [pc, #76]	; (1244 <xTaskRemoveFromEventList+0xa4>)
    11f6:	441a      	add	r2, r3
    11f8:	68bb      	ldr	r3, [r7, #8]
    11fa:	3304      	adds	r3, #4
    11fc:	4610      	mov	r0, r2
    11fe:	4619      	mov	r1, r3
    1200:	f7ff f81c 	bl	23c <vListInsertEnd>
    1204:	e005      	b.n	1212 <xTaskRemoveFromEventList+0x72>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1206:	68bb      	ldr	r3, [r7, #8]
    1208:	3318      	adds	r3, #24
    120a:	480f      	ldr	r0, [pc, #60]	; (1248 <xTaskRemoveFromEventList+0xa8>)
    120c:	4619      	mov	r1, r3
    120e:	f7ff f815 	bl	23c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1212:	68bb      	ldr	r3, [r7, #8]
    1214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1216:	4b0d      	ldr	r3, [pc, #52]	; (124c <xTaskRemoveFromEventList+0xac>)
    1218:	681b      	ldr	r3, [r3, #0]
    121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    121c:	429a      	cmp	r2, r3
    121e:	d905      	bls.n	122c <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    1220:	2301      	movs	r3, #1
    1222:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1224:	4b0a      	ldr	r3, [pc, #40]	; (1250 <xTaskRemoveFromEventList+0xb0>)
    1226:	2201      	movs	r2, #1
    1228:	601a      	str	r2, [r3, #0]
    122a:	e001      	b.n	1230 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
    122c:	2300      	movs	r3, #0
    122e:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    1230:	68fb      	ldr	r3, [r7, #12]
}
    1232:	4618      	mov	r0, r3
    1234:	3710      	adds	r7, #16
    1236:	46bd      	mov	sp, r7
    1238:	bd80      	pop	{r7, pc}
    123a:	bf00      	nop
    123c:	20004180 	.word	0x20004180
    1240:	20004160 	.word	0x20004160
    1244:	20004038 	.word	0x20004038
    1248:	20004130 	.word	0x20004130
    124c:	20004034 	.word	0x20004034
    1250:	2000416c 	.word	0x2000416c

00001254 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    1254:	b480      	push	{r7}
    1256:	b083      	sub	sp, #12
    1258:	af00      	add	r7, sp, #0
    125a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    125c:	687b      	ldr	r3, [r7, #4]
    125e:	2b00      	cmp	r3, #0
    1260:	d100      	bne.n	1264 <vTaskSetTimeOutState+0x10>
    1262:	e7fe      	b.n	1262 <vTaskSetTimeOutState+0xe>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1264:	4b06      	ldr	r3, [pc, #24]	; (1280 <vTaskSetTimeOutState+0x2c>)
    1266:	681a      	ldr	r2, [r3, #0]
    1268:	687b      	ldr	r3, [r7, #4]
    126a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    126c:	4b05      	ldr	r3, [pc, #20]	; (1284 <vTaskSetTimeOutState+0x30>)
    126e:	681a      	ldr	r2, [r3, #0]
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	605a      	str	r2, [r3, #4]
}
    1274:	370c      	adds	r7, #12
    1276:	46bd      	mov	sp, r7
    1278:	f85d 7b04 	ldr.w	r7, [sp], #4
    127c:	4770      	bx	lr
    127e:	bf00      	nop
    1280:	20004170 	.word	0x20004170
    1284:	2000415c 	.word	0x2000415c

00001288 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    1288:	b580      	push	{r7, lr}
    128a:	b084      	sub	sp, #16
    128c:	af00      	add	r7, sp, #0
    128e:	6078      	str	r0, [r7, #4]
    1290:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    1292:	687b      	ldr	r3, [r7, #4]
    1294:	2b00      	cmp	r3, #0
    1296:	d100      	bne.n	129a <xTaskCheckForTimeOut+0x12>
    1298:	e7fe      	b.n	1298 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTicksToWait );
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	2b00      	cmp	r3, #0
    129e:	d100      	bne.n	12a2 <xTaskCheckForTimeOut+0x1a>
    12a0:	e7fe      	b.n	12a0 <xTaskCheckForTimeOut+0x18>

	taskENTER_CRITICAL();
    12a2:	f7ff f91b 	bl	4dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    12a6:	4b1c      	ldr	r3, [pc, #112]	; (1318 <xTaskCheckForTimeOut+0x90>)
    12a8:	681b      	ldr	r3, [r3, #0]
    12aa:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    12ac:	683b      	ldr	r3, [r7, #0]
    12ae:	681b      	ldr	r3, [r3, #0]
    12b0:	f1b3 3fff 	cmp.w	r3, #4294967295
    12b4:	d102      	bne.n	12bc <xTaskCheckForTimeOut+0x34>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    12b6:	2300      	movs	r3, #0
    12b8:	60fb      	str	r3, [r7, #12]
    12ba:	e026      	b.n	130a <xTaskCheckForTimeOut+0x82>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    12bc:	687b      	ldr	r3, [r7, #4]
    12be:	681a      	ldr	r2, [r3, #0]
    12c0:	4b16      	ldr	r3, [pc, #88]	; (131c <xTaskCheckForTimeOut+0x94>)
    12c2:	681b      	ldr	r3, [r3, #0]
    12c4:	429a      	cmp	r2, r3
    12c6:	d007      	beq.n	12d8 <xTaskCheckForTimeOut+0x50>
    12c8:	687b      	ldr	r3, [r7, #4]
    12ca:	685a      	ldr	r2, [r3, #4]
    12cc:	68bb      	ldr	r3, [r7, #8]
    12ce:	429a      	cmp	r2, r3
    12d0:	d802      	bhi.n	12d8 <xTaskCheckForTimeOut+0x50>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    12d2:	2301      	movs	r3, #1
    12d4:	60fb      	str	r3, [r7, #12]
    12d6:	e018      	b.n	130a <xTaskCheckForTimeOut+0x82>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    12d8:	687b      	ldr	r3, [r7, #4]
    12da:	685b      	ldr	r3, [r3, #4]
    12dc:	68ba      	ldr	r2, [r7, #8]
    12de:	1ad2      	subs	r2, r2, r3
    12e0:	683b      	ldr	r3, [r7, #0]
    12e2:	681b      	ldr	r3, [r3, #0]
    12e4:	429a      	cmp	r2, r3
    12e6:	d20e      	bcs.n	1306 <xTaskCheckForTimeOut+0x7e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    12e8:	683b      	ldr	r3, [r7, #0]
    12ea:	681a      	ldr	r2, [r3, #0]
    12ec:	687b      	ldr	r3, [r7, #4]
    12ee:	6859      	ldr	r1, [r3, #4]
    12f0:	68bb      	ldr	r3, [r7, #8]
    12f2:	1acb      	subs	r3, r1, r3
    12f4:	441a      	add	r2, r3
    12f6:	683b      	ldr	r3, [r7, #0]
    12f8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    12fa:	6878      	ldr	r0, [r7, #4]
    12fc:	f7ff ffaa 	bl	1254 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    1300:	2300      	movs	r3, #0
    1302:	60fb      	str	r3, [r7, #12]
    1304:	e001      	b.n	130a <xTaskCheckForTimeOut+0x82>
		}
		else
		{
			xReturn = pdTRUE;
    1306:	2301      	movs	r3, #1
    1308:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    130a:	f7ff f90b 	bl	524 <vPortExitCritical>

	return xReturn;
    130e:	68fb      	ldr	r3, [r7, #12]
}
    1310:	4618      	mov	r0, r3
    1312:	3710      	adds	r7, #16
    1314:	46bd      	mov	sp, r7
    1316:	bd80      	pop	{r7, pc}
    1318:	2000415c 	.word	0x2000415c
    131c:	20004170 	.word	0x20004170

00001320 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    1320:	b480      	push	{r7}
    1322:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    1324:	4b03      	ldr	r3, [pc, #12]	; (1334 <vTaskMissedYield+0x14>)
    1326:	2201      	movs	r2, #1
    1328:	601a      	str	r2, [r3, #0]
}
    132a:	46bd      	mov	sp, r7
    132c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1330:	4770      	bx	lr
    1332:	bf00      	nop
    1334:	2000416c 	.word	0x2000416c

00001338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    1338:	b580      	push	{r7, lr}
    133a:	b082      	sub	sp, #8
    133c:	af00      	add	r7, sp, #0
    133e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    1340:	f000 f84c 	bl	13dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1344:	4b06      	ldr	r3, [pc, #24]	; (1360 <prvIdleTask+0x28>)
    1346:	681b      	ldr	r3, [r3, #0]
    1348:	2b01      	cmp	r3, #1
    134a:	d907      	bls.n	135c <prvIdleTask+0x24>
			{
				taskYIELD();
    134c:	4b05      	ldr	r3, [pc, #20]	; (1364 <prvIdleTask+0x2c>)
    134e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1352:	601a      	str	r2, [r3, #0]
    1354:	f3bf 8f4f 	dsb	sy
    1358:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    135c:	e7f0      	b.n	1340 <prvIdleTask+0x8>
    135e:	bf00      	nop
    1360:	20004038 	.word	0x20004038
    1364:	e000ed04 	.word	0xe000ed04

00001368 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    1368:	b580      	push	{r7, lr}
    136a:	b082      	sub	sp, #8
    136c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    136e:	2300      	movs	r3, #0
    1370:	607b      	str	r3, [r7, #4]
    1372:	e00c      	b.n	138e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1374:	687a      	ldr	r2, [r7, #4]
    1376:	4613      	mov	r3, r2
    1378:	009b      	lsls	r3, r3, #2
    137a:	4413      	add	r3, r2
    137c:	009b      	lsls	r3, r3, #2
    137e:	4a10      	ldr	r2, [pc, #64]	; (13c0 <prvInitialiseTaskLists+0x58>)
    1380:	4413      	add	r3, r2
    1382:	4618      	mov	r0, r3
    1384:	f7fe ff2e 	bl	1e4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	3301      	adds	r3, #1
    138c:	607b      	str	r3, [r7, #4]
    138e:	687b      	ldr	r3, [r7, #4]
    1390:	2b09      	cmp	r3, #9
    1392:	d9ef      	bls.n	1374 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    1394:	480b      	ldr	r0, [pc, #44]	; (13c4 <prvInitialiseTaskLists+0x5c>)
    1396:	f7fe ff25 	bl	1e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    139a:	480b      	ldr	r0, [pc, #44]	; (13c8 <prvInitialiseTaskLists+0x60>)
    139c:	f7fe ff22 	bl	1e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    13a0:	480a      	ldr	r0, [pc, #40]	; (13cc <prvInitialiseTaskLists+0x64>)
    13a2:	f7fe ff1f 	bl	1e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    13a6:	480a      	ldr	r0, [pc, #40]	; (13d0 <prvInitialiseTaskLists+0x68>)
    13a8:	f7fe ff1c 	bl	1e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    13ac:	4b09      	ldr	r3, [pc, #36]	; (13d4 <prvInitialiseTaskLists+0x6c>)
    13ae:	4a05      	ldr	r2, [pc, #20]	; (13c4 <prvInitialiseTaskLists+0x5c>)
    13b0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    13b2:	4b09      	ldr	r3, [pc, #36]	; (13d8 <prvInitialiseTaskLists+0x70>)
    13b4:	4a04      	ldr	r2, [pc, #16]	; (13c8 <prvInitialiseTaskLists+0x60>)
    13b6:	601a      	str	r2, [r3, #0]
}
    13b8:	3708      	adds	r7, #8
    13ba:	46bd      	mov	sp, r7
    13bc:	bd80      	pop	{r7, pc}
    13be:	bf00      	nop
    13c0:	20004038 	.word	0x20004038
    13c4:	20004100 	.word	0x20004100
    13c8:	20004114 	.word	0x20004114
    13cc:	20004130 	.word	0x20004130
    13d0:	20004144 	.word	0x20004144
    13d4:	20004128 	.word	0x20004128
    13d8:	2000412c 	.word	0x2000412c

000013dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    13dc:	b480      	push	{r7}
    13de:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    13e0:	46bd      	mov	sp, r7
    13e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    13e6:	4770      	bx	lr

000013e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    13e8:	b480      	push	{r7}
    13ea:	b083      	sub	sp, #12
    13ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    13ee:	4b0e      	ldr	r3, [pc, #56]	; (1428 <prvResetNextTaskUnblockTime+0x40>)
    13f0:	681b      	ldr	r3, [r3, #0]
    13f2:	681b      	ldr	r3, [r3, #0]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d101      	bne.n	13fc <prvResetNextTaskUnblockTime+0x14>
    13f8:	2301      	movs	r3, #1
    13fa:	e000      	b.n	13fe <prvResetNextTaskUnblockTime+0x16>
    13fc:	2300      	movs	r3, #0
    13fe:	2b00      	cmp	r3, #0
    1400:	d004      	beq.n	140c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    1402:	4b0a      	ldr	r3, [pc, #40]	; (142c <prvResetNextTaskUnblockTime+0x44>)
    1404:	f04f 32ff 	mov.w	r2, #4294967295
    1408:	601a      	str	r2, [r3, #0]
    140a:	e008      	b.n	141e <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    140c:	4b06      	ldr	r3, [pc, #24]	; (1428 <prvResetNextTaskUnblockTime+0x40>)
    140e:	681b      	ldr	r3, [r3, #0]
    1410:	68db      	ldr	r3, [r3, #12]
    1412:	68db      	ldr	r3, [r3, #12]
    1414:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1416:	687b      	ldr	r3, [r7, #4]
    1418:	685b      	ldr	r3, [r3, #4]
    141a:	4a04      	ldr	r2, [pc, #16]	; (142c <prvResetNextTaskUnblockTime+0x44>)
    141c:	6013      	str	r3, [r2, #0]
	}
}
    141e:	370c      	adds	r7, #12
    1420:	46bd      	mov	sp, r7
    1422:	f85d 7b04 	ldr.w	r7, [sp], #4
    1426:	4770      	bx	lr
    1428:	20004128 	.word	0x20004128
    142c:	20004178 	.word	0x20004178

00001430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    1430:	b480      	push	{r7}
    1432:	b083      	sub	sp, #12
    1434:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1436:	4b0b      	ldr	r3, [pc, #44]	; (1464 <xTaskGetSchedulerState+0x34>)
    1438:	681b      	ldr	r3, [r3, #0]
    143a:	2b00      	cmp	r3, #0
    143c:	d102      	bne.n	1444 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    143e:	2301      	movs	r3, #1
    1440:	607b      	str	r3, [r7, #4]
    1442:	e008      	b.n	1456 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1444:	4b08      	ldr	r3, [pc, #32]	; (1468 <xTaskGetSchedulerState+0x38>)
    1446:	681b      	ldr	r3, [r3, #0]
    1448:	2b00      	cmp	r3, #0
    144a:	d102      	bne.n	1452 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    144c:	2302      	movs	r3, #2
    144e:	607b      	str	r3, [r7, #4]
    1450:	e001      	b.n	1456 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1452:	2300      	movs	r3, #0
    1454:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    1456:	687b      	ldr	r3, [r7, #4]
	}
    1458:	4618      	mov	r0, r3
    145a:	370c      	adds	r7, #12
    145c:	46bd      	mov	sp, r7
    145e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1462:	4770      	bx	lr
    1464:	20004164 	.word	0x20004164
    1468:	20004180 	.word	0x20004180

0000146c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    146c:	b580      	push	{r7, lr}
    146e:	b084      	sub	sp, #16
    1470:	af00      	add	r7, sp, #0
    1472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    1474:	687b      	ldr	r3, [r7, #4]
    1476:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    1478:	2300      	movs	r3, #0
    147a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    147c:	687b      	ldr	r3, [r7, #4]
    147e:	2b00      	cmp	r3, #0
    1480:	d042      	beq.n	1508 <xTaskPriorityDisinherit+0x9c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    1482:	4b24      	ldr	r3, [pc, #144]	; (1514 <xTaskPriorityDisinherit+0xa8>)
    1484:	681b      	ldr	r3, [r3, #0]
    1486:	68ba      	ldr	r2, [r7, #8]
    1488:	429a      	cmp	r2, r3
    148a:	d000      	beq.n	148e <xTaskPriorityDisinherit+0x22>
    148c:	e7fe      	b.n	148c <xTaskPriorityDisinherit+0x20>

			configASSERT( pxTCB->uxMutexesHeld );
    148e:	68bb      	ldr	r3, [r7, #8]
    1490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1492:	2b00      	cmp	r3, #0
    1494:	d100      	bne.n	1498 <xTaskPriorityDisinherit+0x2c>
    1496:	e7fe      	b.n	1496 <xTaskPriorityDisinherit+0x2a>
			( pxTCB->uxMutexesHeld )--;
    1498:	68bb      	ldr	r3, [r7, #8]
    149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    149c:	1e5a      	subs	r2, r3, #1
    149e:	68bb      	ldr	r3, [r7, #8]
    14a0:	641a      	str	r2, [r3, #64]	; 0x40

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    14a2:	68bb      	ldr	r3, [r7, #8]
    14a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    14a6:	68bb      	ldr	r3, [r7, #8]
    14a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    14aa:	429a      	cmp	r2, r3
    14ac:	d02c      	beq.n	1508 <xTaskPriorityDisinherit+0x9c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    14ae:	68bb      	ldr	r3, [r7, #8]
    14b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    14b2:	2b00      	cmp	r3, #0
    14b4:	d128      	bne.n	1508 <xTaskPriorityDisinherit+0x9c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    14b6:	68bb      	ldr	r3, [r7, #8]
    14b8:	3304      	adds	r3, #4
    14ba:	4618      	mov	r0, r3
    14bc:	f7fe ff1a 	bl	2f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    14c0:	68bb      	ldr	r3, [r7, #8]
    14c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    14c4:	68bb      	ldr	r3, [r7, #8]
    14c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    14c8:	68bb      	ldr	r3, [r7, #8]
    14ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    14cc:	f1c3 020a 	rsb	r2, r3, #10
    14d0:	68bb      	ldr	r3, [r7, #8]
    14d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    14d4:	68bb      	ldr	r3, [r7, #8]
    14d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    14d8:	4b0f      	ldr	r3, [pc, #60]	; (1518 <xTaskPriorityDisinherit+0xac>)
    14da:	681b      	ldr	r3, [r3, #0]
    14dc:	429a      	cmp	r2, r3
    14de:	d903      	bls.n	14e8 <xTaskPriorityDisinherit+0x7c>
    14e0:	68bb      	ldr	r3, [r7, #8]
    14e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    14e4:	4a0c      	ldr	r2, [pc, #48]	; (1518 <xTaskPriorityDisinherit+0xac>)
    14e6:	6013      	str	r3, [r2, #0]
    14e8:	68bb      	ldr	r3, [r7, #8]
    14ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    14ec:	4613      	mov	r3, r2
    14ee:	009b      	lsls	r3, r3, #2
    14f0:	4413      	add	r3, r2
    14f2:	009b      	lsls	r3, r3, #2
    14f4:	4a09      	ldr	r2, [pc, #36]	; (151c <xTaskPriorityDisinherit+0xb0>)
    14f6:	441a      	add	r2, r3
    14f8:	68bb      	ldr	r3, [r7, #8]
    14fa:	3304      	adds	r3, #4
    14fc:	4610      	mov	r0, r2
    14fe:	4619      	mov	r1, r3
    1500:	f7fe fe9c 	bl	23c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    1504:	2301      	movs	r3, #1
    1506:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    1508:	68fb      	ldr	r3, [r7, #12]
	}
    150a:	4618      	mov	r0, r3
    150c:	3710      	adds	r7, #16
    150e:	46bd      	mov	sp, r7
    1510:	bd80      	pop	{r7, pc}
    1512:	bf00      	nop
    1514:	20004034 	.word	0x20004034
    1518:	20004160 	.word	0x20004160
    151c:	20004038 	.word	0x20004038

00001520 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    1520:	b580      	push	{r7, lr}
    1522:	b084      	sub	sp, #16
    1524:	af00      	add	r7, sp, #0
    1526:	6078      	str	r0, [r7, #4]
    1528:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    152a:	f7fe ffd7 	bl	4dc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    152e:	4b1e      	ldr	r3, [pc, #120]	; (15a8 <ulTaskNotifyTake+0x88>)
    1530:	681b      	ldr	r3, [r3, #0]
    1532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1534:	2b00      	cmp	r3, #0
    1536:	d113      	bne.n	1560 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    1538:	4b1b      	ldr	r3, [pc, #108]	; (15a8 <ulTaskNotifyTake+0x88>)
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	2201      	movs	r2, #1
    153e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

				if( xTicksToWait > ( TickType_t ) 0 )
    1542:	683b      	ldr	r3, [r7, #0]
    1544:	2b00      	cmp	r3, #0
    1546:	d00b      	beq.n	1560 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1548:	6838      	ldr	r0, [r7, #0]
    154a:	2101      	movs	r1, #1
    154c:	f000 f8c0 	bl	16d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    1550:	4b16      	ldr	r3, [pc, #88]	; (15ac <ulTaskNotifyTake+0x8c>)
    1552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1556:	601a      	str	r2, [r3, #0]
    1558:	f3bf 8f4f 	dsb	sy
    155c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    1560:	f7fe ffe0 	bl	524 <vPortExitCritical>

		taskENTER_CRITICAL();
    1564:	f7fe ffba 	bl	4dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    1568:	4b0f      	ldr	r3, [pc, #60]	; (15a8 <ulTaskNotifyTake+0x88>)
    156a:	681b      	ldr	r3, [r3, #0]
    156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    156e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
    1570:	68fb      	ldr	r3, [r7, #12]
    1572:	2b00      	cmp	r3, #0
    1574:	d00c      	beq.n	1590 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	2b00      	cmp	r3, #0
    157a:	d004      	beq.n	1586 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    157c:	4b0a      	ldr	r3, [pc, #40]	; (15a8 <ulTaskNotifyTake+0x88>)
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	2200      	movs	r2, #0
    1582:	645a      	str	r2, [r3, #68]	; 0x44
    1584:	e004      	b.n	1590 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    1586:	4b08      	ldr	r3, [pc, #32]	; (15a8 <ulTaskNotifyTake+0x88>)
    1588:	681b      	ldr	r3, [r3, #0]
    158a:	68fa      	ldr	r2, [r7, #12]
    158c:	3a01      	subs	r2, #1
    158e:	645a      	str	r2, [r3, #68]	; 0x44
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1590:	4b05      	ldr	r3, [pc, #20]	; (15a8 <ulTaskNotifyTake+0x88>)
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	2200      	movs	r2, #0
    1596:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}
		taskEXIT_CRITICAL();
    159a:	f7fe ffc3 	bl	524 <vPortExitCritical>

		return ulReturn;
    159e:	68fb      	ldr	r3, [r7, #12]
	}
    15a0:	4618      	mov	r0, r3
    15a2:	3710      	adds	r7, #16
    15a4:	46bd      	mov	sp, r7
    15a6:	bd80      	pop	{r7, pc}
    15a8:	20004034 	.word	0x20004034
    15ac:	e000ed04 	.word	0xe000ed04

000015b0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    15b0:	b580      	push	{r7, lr}
    15b2:	b088      	sub	sp, #32
    15b4:	af00      	add	r7, sp, #0
    15b6:	60f8      	str	r0, [r7, #12]
    15b8:	60b9      	str	r1, [r7, #8]
    15ba:	603b      	str	r3, [r7, #0]
    15bc:	4613      	mov	r3, r2
    15be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    15c0:	2301      	movs	r3, #1
    15c2:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
    15c4:	68fb      	ldr	r3, [r7, #12]
    15c6:	2b00      	cmp	r3, #0
    15c8:	d100      	bne.n	15cc <xTaskGenericNotify+0x1c>
    15ca:	e7fe      	b.n	15ca <xTaskGenericNotify+0x1a>
		pxTCB = ( TCB_t * ) xTaskToNotify;
    15cc:	68fb      	ldr	r3, [r7, #12]
    15ce:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
    15d0:	f7fe ff84 	bl	4dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
    15d4:	683b      	ldr	r3, [r7, #0]
    15d6:	2b00      	cmp	r3, #0
    15d8:	d003      	beq.n	15e2 <xTaskGenericNotify+0x32>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    15da:	69bb      	ldr	r3, [r7, #24]
    15dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    15de:	683b      	ldr	r3, [r7, #0]
    15e0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    15e2:	69bb      	ldr	r3, [r7, #24]
    15e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    15e8:	75fb      	strb	r3, [r7, #23]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    15ea:	69bb      	ldr	r3, [r7, #24]
    15ec:	2202      	movs	r2, #2
    15ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

			switch( eAction )
    15f2:	79fb      	ldrb	r3, [r7, #7]
    15f4:	2b04      	cmp	r3, #4
    15f6:	d828      	bhi.n	164a <xTaskGenericNotify+0x9a>
    15f8:	a201      	add	r2, pc, #4	; (adr r2, 1600 <xTaskGenericNotify+0x50>)
    15fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    15fe:	bf00      	nop
    1600:	0000164b 	.word	0x0000164b
    1604:	00001615 	.word	0x00001615
    1608:	00001623 	.word	0x00001623
    160c:	0000162f 	.word	0x0000162f
    1610:	00001637 	.word	0x00001637
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    1614:	69bb      	ldr	r3, [r7, #24]
    1616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1618:	68bb      	ldr	r3, [r7, #8]
    161a:	431a      	orrs	r2, r3
    161c:	69bb      	ldr	r3, [r7, #24]
    161e:	645a      	str	r2, [r3, #68]	; 0x44
					break;
    1620:	e013      	b.n	164a <xTaskGenericNotify+0x9a>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    1622:	69bb      	ldr	r3, [r7, #24]
    1624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1626:	1c5a      	adds	r2, r3, #1
    1628:	69bb      	ldr	r3, [r7, #24]
    162a:	645a      	str	r2, [r3, #68]	; 0x44
					break;
    162c:	e00d      	b.n	164a <xTaskGenericNotify+0x9a>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    162e:	69bb      	ldr	r3, [r7, #24]
    1630:	68ba      	ldr	r2, [r7, #8]
    1632:	645a      	str	r2, [r3, #68]	; 0x44
					break;
    1634:	e009      	b.n	164a <xTaskGenericNotify+0x9a>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    1636:	7dfb      	ldrb	r3, [r7, #23]
    1638:	2b02      	cmp	r3, #2
    163a:	d003      	beq.n	1644 <xTaskGenericNotify+0x94>
					{
						pxTCB->ulNotifiedValue = ulValue;
    163c:	69bb      	ldr	r3, [r7, #24]
    163e:	68ba      	ldr	r2, [r7, #8]
    1640:	645a      	str	r2, [r3, #68]	; 0x44
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
    1642:	e001      	b.n	1648 <xTaskGenericNotify+0x98>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    1644:	2300      	movs	r3, #0
    1646:	61fb      	str	r3, [r7, #28]
					}
					break;
    1648:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    164a:	7dfb      	ldrb	r3, [r7, #23]
    164c:	2b01      	cmp	r3, #1
    164e:	d130      	bne.n	16b2 <xTaskGenericNotify+0x102>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1650:	69bb      	ldr	r3, [r7, #24]
    1652:	3304      	adds	r3, #4
    1654:	4618      	mov	r0, r3
    1656:	f7fe fe4d 	bl	2f4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    165a:	69bb      	ldr	r3, [r7, #24]
    165c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    165e:	4b18      	ldr	r3, [pc, #96]	; (16c0 <xTaskGenericNotify+0x110>)
    1660:	681b      	ldr	r3, [r3, #0]
    1662:	429a      	cmp	r2, r3
    1664:	d903      	bls.n	166e <xTaskGenericNotify+0xbe>
    1666:	69bb      	ldr	r3, [r7, #24]
    1668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    166a:	4a15      	ldr	r2, [pc, #84]	; (16c0 <xTaskGenericNotify+0x110>)
    166c:	6013      	str	r3, [r2, #0]
    166e:	69bb      	ldr	r3, [r7, #24]
    1670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1672:	4613      	mov	r3, r2
    1674:	009b      	lsls	r3, r3, #2
    1676:	4413      	add	r3, r2
    1678:	009b      	lsls	r3, r3, #2
    167a:	4a12      	ldr	r2, [pc, #72]	; (16c4 <xTaskGenericNotify+0x114>)
    167c:	441a      	add	r2, r3
    167e:	69bb      	ldr	r3, [r7, #24]
    1680:	3304      	adds	r3, #4
    1682:	4610      	mov	r0, r2
    1684:	4619      	mov	r1, r3
    1686:	f7fe fdd9 	bl	23c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
    168a:	69bb      	ldr	r3, [r7, #24]
    168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    168e:	2b00      	cmp	r3, #0
    1690:	d000      	beq.n	1694 <xTaskGenericNotify+0xe4>
    1692:	e7fe      	b.n	1692 <xTaskGenericNotify+0xe2>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    1694:	69bb      	ldr	r3, [r7, #24]
    1696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1698:	4b0b      	ldr	r3, [pc, #44]	; (16c8 <xTaskGenericNotify+0x118>)
    169a:	681b      	ldr	r3, [r3, #0]
    169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    169e:	429a      	cmp	r2, r3
    16a0:	d907      	bls.n	16b2 <xTaskGenericNotify+0x102>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    16a2:	4b0a      	ldr	r3, [pc, #40]	; (16cc <xTaskGenericNotify+0x11c>)
    16a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    16a8:	601a      	str	r2, [r3, #0]
    16aa:	f3bf 8f4f 	dsb	sy
    16ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    16b2:	f7fe ff37 	bl	524 <vPortExitCritical>

		return xReturn;
    16b6:	69fb      	ldr	r3, [r7, #28]
	}
    16b8:	4618      	mov	r0, r3
    16ba:	3720      	adds	r7, #32
    16bc:	46bd      	mov	sp, r7
    16be:	bd80      	pop	{r7, pc}
    16c0:	20004160 	.word	0x20004160
    16c4:	20004038 	.word	0x20004038
    16c8:	20004034 	.word	0x20004034
    16cc:	e000ed04 	.word	0xe000ed04

000016d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    16d0:	b580      	push	{r7, lr}
    16d2:	b084      	sub	sp, #16
    16d4:	af00      	add	r7, sp, #0
    16d6:	6078      	str	r0, [r7, #4]
    16d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    16da:	4b21      	ldr	r3, [pc, #132]	; (1760 <prvAddCurrentTaskToDelayedList+0x90>)
    16dc:	681b      	ldr	r3, [r3, #0]
    16de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    16e0:	4b20      	ldr	r3, [pc, #128]	; (1764 <prvAddCurrentTaskToDelayedList+0x94>)
    16e2:	681b      	ldr	r3, [r3, #0]
    16e4:	3304      	adds	r3, #4
    16e6:	4618      	mov	r0, r3
    16e8:	f7fe fe04 	bl	2f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    16ec:	687b      	ldr	r3, [r7, #4]
    16ee:	f1b3 3fff 	cmp.w	r3, #4294967295
    16f2:	d10a      	bne.n	170a <prvAddCurrentTaskToDelayedList+0x3a>
    16f4:	683b      	ldr	r3, [r7, #0]
    16f6:	2b00      	cmp	r3, #0
    16f8:	d007      	beq.n	170a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    16fa:	4b1a      	ldr	r3, [pc, #104]	; (1764 <prvAddCurrentTaskToDelayedList+0x94>)
    16fc:	681b      	ldr	r3, [r3, #0]
    16fe:	3304      	adds	r3, #4
    1700:	4819      	ldr	r0, [pc, #100]	; (1768 <prvAddCurrentTaskToDelayedList+0x98>)
    1702:	4619      	mov	r1, r3
    1704:	f7fe fd9a 	bl	23c <vListInsertEnd>
    1708:	e026      	b.n	1758 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    170a:	68fa      	ldr	r2, [r7, #12]
    170c:	687b      	ldr	r3, [r7, #4]
    170e:	4413      	add	r3, r2
    1710:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1712:	4b14      	ldr	r3, [pc, #80]	; (1764 <prvAddCurrentTaskToDelayedList+0x94>)
    1714:	681b      	ldr	r3, [r3, #0]
    1716:	68ba      	ldr	r2, [r7, #8]
    1718:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    171a:	68ba      	ldr	r2, [r7, #8]
    171c:	68fb      	ldr	r3, [r7, #12]
    171e:	429a      	cmp	r2, r3
    1720:	d209      	bcs.n	1736 <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1722:	4b12      	ldr	r3, [pc, #72]	; (176c <prvAddCurrentTaskToDelayedList+0x9c>)
    1724:	681a      	ldr	r2, [r3, #0]
    1726:	4b0f      	ldr	r3, [pc, #60]	; (1764 <prvAddCurrentTaskToDelayedList+0x94>)
    1728:	681b      	ldr	r3, [r3, #0]
    172a:	3304      	adds	r3, #4
    172c:	4610      	mov	r0, r2
    172e:	4619      	mov	r1, r3
    1730:	f7fe fda8 	bl	284 <vListInsert>
    1734:	e010      	b.n	1758 <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1736:	4b0e      	ldr	r3, [pc, #56]	; (1770 <prvAddCurrentTaskToDelayedList+0xa0>)
    1738:	681a      	ldr	r2, [r3, #0]
    173a:	4b0a      	ldr	r3, [pc, #40]	; (1764 <prvAddCurrentTaskToDelayedList+0x94>)
    173c:	681b      	ldr	r3, [r3, #0]
    173e:	3304      	adds	r3, #4
    1740:	4610      	mov	r0, r2
    1742:	4619      	mov	r1, r3
    1744:	f7fe fd9e 	bl	284 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    1748:	4b0a      	ldr	r3, [pc, #40]	; (1774 <prvAddCurrentTaskToDelayedList+0xa4>)
    174a:	681b      	ldr	r3, [r3, #0]
    174c:	68ba      	ldr	r2, [r7, #8]
    174e:	429a      	cmp	r2, r3
    1750:	d202      	bcs.n	1758 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
    1752:	4a08      	ldr	r2, [pc, #32]	; (1774 <prvAddCurrentTaskToDelayedList+0xa4>)
    1754:	68bb      	ldr	r3, [r7, #8]
    1756:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1758:	3710      	adds	r7, #16
    175a:	46bd      	mov	sp, r7
    175c:	bd80      	pop	{r7, pc}
    175e:	bf00      	nop
    1760:	2000415c 	.word	0x2000415c
    1764:	20004034 	.word	0x20004034
    1768:	20004144 	.word	0x20004144
    176c:	2000412c 	.word	0x2000412c
    1770:	20004128 	.word	0x20004128
    1774:	20004178 	.word	0x20004178

00001778 <SingleRead>:
 * Params           singlectrl:     The init sent to ADC0->SINGLECTRL
 * Return           The voltage value on the ADC line.
 * Last Edited:     4/6/2015 RTC
 */
static uint32_t SingleRead(uint32_t singlectrl)
{
    1778:	b580      	push	{r7, lr}
    177a:	b082      	sub	sp, #8
    177c:	af00      	add	r7, sp, #0
    177e:	6078      	str	r0, [r7, #4]
    ADC0->SINGLECTRL = singlectrl;
    1780:	4a0e      	ldr	r2, [pc, #56]	; (17bc <SingleRead+0x44>)
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	60d3      	str	r3, [r2, #12]
    CAPTURE_ADC0();
    1786:	4b0d      	ldr	r3, [pc, #52]	; (17bc <SingleRead+0x44>)
    1788:	2201      	movs	r2, #1
    178a:	605a      	str	r2, [r3, #4]
    vTaskDelay(5);
    178c:	2005      	movs	r0, #5
    178e:	f7ff faed 	bl	d6c <vTaskDelay>
    while (ADC_NOT_READY)
    1792:	bf00      	nop
    1794:	4b09      	ldr	r3, [pc, #36]	; (17bc <SingleRead+0x44>)
    1796:	689b      	ldr	r3, [r3, #8]
    1798:	f003 0301 	and.w	r3, r3, #1
    179c:	2b00      	cmp	r3, #0
    179e:	d1f9      	bne.n	1794 <SingleRead+0x1c>
    {/* Wait for ADC to capture data*/}
    return (ADC_VOLTS);
    17a0:	4b06      	ldr	r3, [pc, #24]	; (17bc <SingleRead+0x44>)
    17a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    17a4:	f640 12c4 	movw	r2, #2500	; 0x9c4
    17a8:	fb02 f303 	mul.w	r3, r2, r3
    17ac:	4a04      	ldr	r2, [pc, #16]	; (17c0 <SingleRead+0x48>)
    17ae:	fba2 2303 	umull	r2, r3, r2, r3
    17b2:	0bdb      	lsrs	r3, r3, #15
}
    17b4:	4618      	mov	r0, r3
    17b6:	3708      	adds	r7, #8
    17b8:	46bd      	mov	sp, r7
    17ba:	bd80      	pop	{r7, pc}
    17bc:	40002000 	.word	0x40002000
    17c0:	80008001 	.word	0x80008001

000017c4 <ADTask>:
 * Params           none
 * Return           none
 * Last Edited:     4/6/2015 RTC
 */
void ADTask(void * pvParameters)
{
    17c4:	b580      	push	{r7, lr}
    17c6:	b082      	sub	sp, #8
    17c8:	af00      	add	r7, sp, #0
    17ca:	6078      	str	r0, [r7, #4]
    GPIO->P[4].MODEH |= 5<<4*(13-8);    //Enables the voltage reference
    17cc:	4a3d      	ldr	r2, [pc, #244]	; (18c4 <ADTask+0x100>)
    17ce:	4b3d      	ldr	r3, [pc, #244]	; (18c4 <ADTask+0x100>)
    17d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    17d4:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
    17d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    GPIO->P[4].DOUTSET = 1<<13;
    17dc:	4b39      	ldr	r3, [pc, #228]	; (18c4 <ADTask+0x100>)
    17de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    17e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    GPIO->P[4].CTRL = 1;        //output set to "Lowest"
    17e6:	4b37      	ldr	r3, [pc, #220]	; (18c4 <ADTask+0x100>)
    17e8:	2201      	movs	r2, #1
    17ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ADC0->CTRL = 0x030F0323; //g_pADC0->CTRL = 0x030F0323; //x16 oversampling, 16bits resolution
    17ee:	4b36      	ldr	r3, [pc, #216]	; (18c8 <ADTask+0x104>)
    17f0:	4a36      	ldr	r2, [pc, #216]	; (18cc <ADTask+0x108>)
    17f2:	601a      	str	r2, [r3, #0]
    while (1)
    {

        /***            IMON                ***/
        Outi = SingleRead(ADC0_CH5);   //Convert to mV
    17f4:	4836      	ldr	r0, [pc, #216]	; (18d0 <ADTask+0x10c>)
    17f6:	f7ff ffbf 	bl	1778 <SingleRead>
    17fa:	4602      	mov	r2, r0
    17fc:	4b35      	ldr	r3, [pc, #212]	; (18d4 <ADTask+0x110>)
    17fe:	601a      	str	r2, [r3, #0]
        OutiCalc *= 5;
    1800:	4b35      	ldr	r3, [pc, #212]	; (18d8 <ADTask+0x114>)
    1802:	681a      	ldr	r2, [r3, #0]
    1804:	4613      	mov	r3, r2
    1806:	009b      	lsls	r3, r3, #2
    1808:	4413      	add	r3, r2
    180a:	4a33      	ldr	r2, [pc, #204]	; (18d8 <ADTask+0x114>)
    180c:	6013      	str	r3, [r2, #0]
        OutiCalc /= 2;
    180e:	4b32      	ldr	r3, [pc, #200]	; (18d8 <ADTask+0x114>)
    1810:	681b      	ldr	r3, [r3, #0]
    1812:	085b      	lsrs	r3, r3, #1
    1814:	4a30      	ldr	r2, [pc, #192]	; (18d8 <ADTask+0x114>)
    1816:	6013      	str	r3, [r2, #0]
        /***            OUTV_MON            ***/
        Outv = SingleRead(ADC0_CH6);
    1818:	4830      	ldr	r0, [pc, #192]	; (18dc <ADTask+0x118>)
    181a:	f7ff ffad 	bl	1778 <SingleRead>
    181e:	4602      	mov	r2, r0
    1820:	4b2f      	ldr	r3, [pc, #188]	; (18e0 <ADTask+0x11c>)
    1822:	601a      	str	r2, [r3, #0]
        Outv *= 14545;
    1824:	4b2e      	ldr	r3, [pc, #184]	; (18e0 <ADTask+0x11c>)
    1826:	681b      	ldr	r3, [r3, #0]
    1828:	f643 02d1 	movw	r2, #14545	; 0x38d1
    182c:	fb02 f303 	mul.w	r3, r2, r3
    1830:	4a2b      	ldr	r2, [pc, #172]	; (18e0 <ADTask+0x11c>)
    1832:	6013      	str	r3, [r2, #0]
        Outv /= 4545;
    1834:	4b2a      	ldr	r3, [pc, #168]	; (18e0 <ADTask+0x11c>)
    1836:	681b      	ldr	r3, [r3, #0]
    1838:	4a2a      	ldr	r2, [pc, #168]	; (18e4 <ADTask+0x120>)
    183a:	fba2 2303 	umull	r2, r3, r2, r3
    183e:	0b1b      	lsrs	r3, r3, #12
    1840:	4a27      	ldr	r2, [pc, #156]	; (18e0 <ADTask+0x11c>)
    1842:	6013      	str	r3, [r2, #0]
        /***            Voltage Reference   ***/
        Vref = SingleRead(ADC0_CH7);
    1844:	4828      	ldr	r0, [pc, #160]	; (18e8 <ADTask+0x124>)
    1846:	f7ff ff97 	bl	1778 <SingleRead>
    184a:	4602      	mov	r2, r0
    184c:	4b27      	ldr	r3, [pc, #156]	; (18ec <ADTask+0x128>)
    184e:	601a      	str	r2, [r3, #0]
        /***            Vbat                ***/
        Battery = SingleRead(ADC0_CH4);
    1850:	4827      	ldr	r0, [pc, #156]	; (18f0 <ADTask+0x12c>)
    1852:	f7ff ff91 	bl	1778 <SingleRead>
    1856:	4602      	mov	r2, r0
    1858:	4b26      	ldr	r3, [pc, #152]	; (18f4 <ADTask+0x130>)
    185a:	601a      	str	r2, [r3, #0]
        Battery = Battery*7/2;
    185c:	4b25      	ldr	r3, [pc, #148]	; (18f4 <ADTask+0x130>)
    185e:	681a      	ldr	r2, [r3, #0]
    1860:	4613      	mov	r3, r2
    1862:	00db      	lsls	r3, r3, #3
    1864:	1a9b      	subs	r3, r3, r2
    1866:	085b      	lsrs	r3, r3, #1
    1868:	4a22      	ldr	r2, [pc, #136]	; (18f4 <ADTask+0x130>)
    186a:	6013      	str	r3, [r2, #0]
        xTaskNotify(xDACTask, Battery, eSetValueWithOverwrite);
    186c:	4b22      	ldr	r3, [pc, #136]	; (18f8 <ADTask+0x134>)
    186e:	681a      	ldr	r2, [r3, #0]
    1870:	4b20      	ldr	r3, [pc, #128]	; (18f4 <ADTask+0x130>)
    1872:	681b      	ldr	r3, [r3, #0]
    1874:	4610      	mov	r0, r2
    1876:	4619      	mov	r1, r3
    1878:	2203      	movs	r2, #3
    187a:	2300      	movs	r3, #0
    187c:	f7ff fe98 	bl	15b0 <xTaskGenericNotify>
        /***            Bat_Temp            ***/
        BatTemp = (SingleRead(ADC0_CH3)*Vref/0xffff);
    1880:	481e      	ldr	r0, [pc, #120]	; (18fc <ADTask+0x138>)
    1882:	f7ff ff79 	bl	1778 <SingleRead>
    1886:	4602      	mov	r2, r0
    1888:	4b18      	ldr	r3, [pc, #96]	; (18ec <ADTask+0x128>)
    188a:	681b      	ldr	r3, [r3, #0]
    188c:	fb03 f302 	mul.w	r3, r3, r2
    1890:	4a1b      	ldr	r2, [pc, #108]	; (1900 <ADTask+0x13c>)
    1892:	fba2 2303 	umull	r2, r3, r2, r3
    1896:	0bdb      	lsrs	r3, r3, #15
    1898:	4a1a      	ldr	r2, [pc, #104]	; (1904 <ADTask+0x140>)
    189a:	6013      	str	r3, [r2, #0]
        BatTemp = (BatTemp*(1+10)-Vref*1)/(Vref-BatTemp);
    189c:	4b19      	ldr	r3, [pc, #100]	; (1904 <ADTask+0x140>)
    189e:	681a      	ldr	r2, [r3, #0]
    18a0:	4613      	mov	r3, r2
    18a2:	009b      	lsls	r3, r3, #2
    18a4:	4413      	add	r3, r2
    18a6:	005b      	lsls	r3, r3, #1
    18a8:	441a      	add	r2, r3
    18aa:	4b10      	ldr	r3, [pc, #64]	; (18ec <ADTask+0x128>)
    18ac:	681b      	ldr	r3, [r3, #0]
    18ae:	1ad2      	subs	r2, r2, r3
    18b0:	4b0e      	ldr	r3, [pc, #56]	; (18ec <ADTask+0x128>)
    18b2:	6819      	ldr	r1, [r3, #0]
    18b4:	4b13      	ldr	r3, [pc, #76]	; (1904 <ADTask+0x140>)
    18b6:	681b      	ldr	r3, [r3, #0]
    18b8:	1acb      	subs	r3, r1, r3
    18ba:	fbb2 f3f3 	udiv	r3, r2, r3
    18be:	4a11      	ldr	r2, [pc, #68]	; (1904 <ADTask+0x140>)
    18c0:	6013      	str	r3, [r2, #0]
    }
    18c2:	e797      	b.n	17f4 <ADTask+0x30>
    18c4:	40006000 	.word	0x40006000
    18c8:	40002000 	.word	0x40002000
    18cc:	030f0323 	.word	0x030f0323
    18d0:	00210530 	.word	0x00210530
    18d4:	200041a4 	.word	0x200041a4
    18d8:	2000419c 	.word	0x2000419c
    18dc:	00210630 	.word	0x00210630
    18e0:	20004198 	.word	0x20004198
    18e4:	e6b5b4dd 	.word	0xe6b5b4dd
    18e8:	00210730 	.word	0x00210730
    18ec:	200041b4 	.word	0x200041b4
    18f0:	00210430 	.word	0x00210430
    18f4:	200041b0 	.word	0x200041b0
    18f8:	2000418c 	.word	0x2000418c
    18fc:	00210330 	.word	0x00210330
    1900:	80008001 	.word	0x80008001
    1904:	200041a0 	.word	0x200041a0

00001908 <LEDTask>:
 * Description:     Initializes and PWMs the LEDs
 * Params           none
 * Return           none
 * Last Edited:     11/14/14 RTC
 */
void LEDTask(void * pvParameters) {
    1908:	b580      	push	{r7, lr}
    190a:	b084      	sub	sp, #16
    190c:	af00      	add	r7, sp, #0
    190e:	6078      	str	r0, [r7, #4]

    uint32_t i;
    LEDRedMut =   xSemaphoreCreateMutex();
    1910:	2001      	movs	r0, #1
    1912:	f7fe ff45 	bl	7a0 <xQueueCreateMutex>
    1916:	4602      	mov	r2, r0
    1918:	4b46      	ldr	r3, [pc, #280]	; (1a34 <LEDTask+0x12c>)
    191a:	601a      	str	r2, [r3, #0]
    LEDGreenMut = xSemaphoreCreateMutex();
    191c:	2001      	movs	r0, #1
    191e:	f7fe ff3f 	bl	7a0 <xQueueCreateMutex>
    1922:	4602      	mov	r2, r0
    1924:	4b44      	ldr	r3, [pc, #272]	; (1a38 <LEDTask+0x130>)
    1926:	601a      	str	r2, [r3, #0]
    LEDBlueMut =  xSemaphoreCreateMutex();
    1928:	2001      	movs	r0, #1
    192a:	f7fe ff39 	bl	7a0 <xQueueCreateMutex>
    192e:	4602      	mov	r2, r0
    1930:	4b42      	ldr	r3, [pc, #264]	; (1a3c <LEDTask+0x134>)
    1932:	601a      	str	r2, [r3, #0]
    GPIO->P[2].CTRL = 1;    //g_pGPIO->PC_CTRL = 1;           //Set to "lowest" current, i.e. ~0.1mA
    1934:	4b42      	ldr	r3, [pc, #264]	; (1a40 <LEDTask+0x138>)
    1936:	2201      	movs	r2, #1
    1938:	649a      	str	r2, [r3, #72]	; 0x48
    //GPIO->P[1].MODEH |= 5<<0;      //Here mostly for an example
    GPIO->P[2].MODEL |= 5<<4*1;
    193a:	4a41      	ldr	r2, [pc, #260]	; (1a40 <LEDTask+0x138>)
    193c:	4b40      	ldr	r3, [pc, #256]	; (1a40 <LEDTask+0x138>)
    193e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1940:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    1944:	64d3      	str	r3, [r2, #76]	; 0x4c
    for (i = 0; i <= 11; i++)
    1946:	2300      	movs	r3, #0
    1948:	60fb      	str	r3, [r7, #12]
    194a:	e031      	b.n	19b0 <LEDTask+0xa8>
    {
        if (i == 3)
    194c:	68fb      	ldr	r3, [r7, #12]
    194e:	2b03      	cmp	r3, #3
    1950:	d100      	bne.n	1954 <LEDTask+0x4c>
        {
            continue;
    1952:	e02a      	b.n	19aa <LEDTask+0xa2>
        }
        else if (i <= 2)
    1954:	68fb      	ldr	r3, [r7, #12]
    1956:	2b02      	cmp	r3, #2
    1958:	d806      	bhi.n	1968 <LEDTask+0x60>
        {
            GPIO->P[2].DOUTSET = 1<<i;
    195a:	4a39      	ldr	r2, [pc, #228]	; (1a40 <LEDTask+0x138>)
    195c:	68fb      	ldr	r3, [r7, #12]
    195e:	2101      	movs	r1, #1
    1960:	fa01 f303 	lsl.w	r3, r1, r3
    1964:	6593      	str	r3, [r2, #88]	; 0x58
    1966:	e005      	b.n	1974 <LEDTask+0x6c>
        }
        else
        {
            GPIO->P[2].DOUTCLR = 1<<i;
    1968:	4a35      	ldr	r2, [pc, #212]	; (1a40 <LEDTask+0x138>)
    196a:	68fb      	ldr	r3, [r7, #12]
    196c:	2101      	movs	r1, #1
    196e:	fa01 f303 	lsl.w	r3, r1, r3
    1972:	65d3      	str	r3, [r2, #92]	; 0x5c
        }

        if (i <= 7)
    1974:	68fb      	ldr	r3, [r7, #12]
    1976:	2b07      	cmp	r3, #7
    1978:	d80a      	bhi.n	1990 <LEDTask+0x88>
        {
            GPIO->P[2].MODEL |= 5<<4*(i);
    197a:	4931      	ldr	r1, [pc, #196]	; (1a40 <LEDTask+0x138>)
    197c:	4b30      	ldr	r3, [pc, #192]	; (1a40 <LEDTask+0x138>)
    197e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1980:	68fa      	ldr	r2, [r7, #12]
    1982:	0092      	lsls	r2, r2, #2
    1984:	4610      	mov	r0, r2
    1986:	2205      	movs	r2, #5
    1988:	4082      	lsls	r2, r0
    198a:	4313      	orrs	r3, r2
    198c:	64cb      	str	r3, [r1, #76]	; 0x4c
    198e:	e00c      	b.n	19aa <LEDTask+0xa2>
        }
        else
        {
            GPIO->P[2].MODEH |= 5<<4*(i-8);
    1990:	492b      	ldr	r1, [pc, #172]	; (1a40 <LEDTask+0x138>)
    1992:	4b2b      	ldr	r3, [pc, #172]	; (1a40 <LEDTask+0x138>)
    1994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    1996:	68fb      	ldr	r3, [r7, #12]
    1998:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    199c:	3b08      	subs	r3, #8
    199e:	009b      	lsls	r3, r3, #2
    19a0:	4618      	mov	r0, r3
    19a2:	2305      	movs	r3, #5
    19a4:	4083      	lsls	r3, r0
    19a6:	4313      	orrs	r3, r2
    19a8:	650b      	str	r3, [r1, #80]	; 0x50
    LEDGreenMut = xSemaphoreCreateMutex();
    LEDBlueMut =  xSemaphoreCreateMutex();
    GPIO->P[2].CTRL = 1;    //g_pGPIO->PC_CTRL = 1;           //Set to "lowest" current, i.e. ~0.1mA
    //GPIO->P[1].MODEH |= 5<<0;      //Here mostly for an example
    GPIO->P[2].MODEL |= 5<<4*1;
    for (i = 0; i <= 11; i++)
    19aa:	68fb      	ldr	r3, [r7, #12]
    19ac:	3301      	adds	r3, #1
    19ae:	60fb      	str	r3, [r7, #12]
    19b0:	68fb      	ldr	r3, [r7, #12]
    19b2:	2b0b      	cmp	r3, #11
    19b4:	d9ca      	bls.n	194c <LEDTask+0x44>
        else
        {
            GPIO->P[2].MODEH |= 5<<4*(i-8);
        }
    }
    i = GPIO->P[2].MODEL;
    19b6:	4b22      	ldr	r3, [pc, #136]	; (1a40 <LEDTask+0x138>)
    19b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    19ba:	60fb      	str	r3, [r7, #12]
    i = GPIO->P[2].MODEH;
    19bc:	4b20      	ldr	r3, [pc, #128]	; (1a40 <LEDTask+0x138>)
    19be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    19c0:	60fb      	str	r3, [r7, #12]
    while (1) {
        // 15ms PWM period
        vTaskDelay(5);
    19c2:	2005      	movs	r0, #5
    19c4:	f7ff f9d2 	bl	d6c <vTaskDelay>
        ChangeLED(LEDLayerRed, 1, 0, 0);
    19c8:	4b1e      	ldr	r3, [pc, #120]	; (1a44 <LEDTask+0x13c>)
    19ca:	781b      	ldrb	r3, [r3, #0]
    19cc:	4618      	mov	r0, r3
    19ce:	2101      	movs	r1, #1
    19d0:	2200      	movs	r2, #0
    19d2:	2300      	movs	r3, #0
    19d4:	f000 f83c 	bl	1a50 <ChangeLED>
        vTaskDelay(5);
    19d8:	2005      	movs	r0, #5
    19da:	f7ff f9c7 	bl	d6c <vTaskDelay>
        ChangeLED(LEDLayerGreen, 0, 1, 0);
    19de:	4b1a      	ldr	r3, [pc, #104]	; (1a48 <LEDTask+0x140>)
    19e0:	781b      	ldrb	r3, [r3, #0]
    19e2:	4618      	mov	r0, r3
    19e4:	2100      	movs	r1, #0
    19e6:	2201      	movs	r2, #1
    19e8:	2300      	movs	r3, #0
    19ea:	f000 f831 	bl	1a50 <ChangeLED>
        vTaskDelay(5);
    19ee:	2005      	movs	r0, #5
    19f0:	f7ff f9bc 	bl	d6c <vTaskDelay>
        ChangeLED(LEDLayerBlue, 0, 0, 1);
    19f4:	4b15      	ldr	r3, [pc, #84]	; (1a4c <LEDTask+0x144>)
    19f6:	781b      	ldrb	r3, [r3, #0]
    19f8:	4618      	mov	r0, r3
    19fa:	2100      	movs	r1, #0
    19fc:	2200      	movs	r2, #0
    19fe:	2301      	movs	r3, #1
    1a00:	f000 f826 	bl	1a50 <ChangeLED>
        if (ulTaskNotifyTake(pdTRUE, 0))
    1a04:	2001      	movs	r0, #1
    1a06:	2100      	movs	r1, #0
    1a08:	f7ff fd8a 	bl	1520 <ulTaskNotifyTake>
    1a0c:	4603      	mov	r3, r0
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d00f      	beq.n	1a32 <LEDTask+0x12a>
        {
            if (LEDLayerRed < 0x80)
    1a12:	4b0c      	ldr	r3, [pc, #48]	; (1a44 <LEDTask+0x13c>)
    1a14:	781b      	ldrb	r3, [r3, #0]
    1a16:	b2db      	uxtb	r3, r3
    1a18:	b25b      	sxtb	r3, r3
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	db06      	blt.n	1a2c <LEDTask+0x124>
            {
                LEDLayerRed <<= 1;
    1a1e:	4b09      	ldr	r3, [pc, #36]	; (1a44 <LEDTask+0x13c>)
    1a20:	781b      	ldrb	r3, [r3, #0]
    1a22:	005b      	lsls	r3, r3, #1
    1a24:	b2da      	uxtb	r2, r3
    1a26:	4b07      	ldr	r3, [pc, #28]	; (1a44 <LEDTask+0x13c>)
    1a28:	701a      	strb	r2, [r3, #0]
    1a2a:	e002      	b.n	1a32 <LEDTask+0x12a>
            }
            else
            {
                LEDLayerRed = 1;
    1a2c:	4b05      	ldr	r3, [pc, #20]	; (1a44 <LEDTask+0x13c>)
    1a2e:	2201      	movs	r2, #1
    1a30:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    1a32:	e7c6      	b.n	19c2 <LEDTask+0xba>
    1a34:	20004194 	.word	0x20004194
    1a38:	200041ac 	.word	0x200041ac
    1a3c:	200041b8 	.word	0x200041b8
    1a40:	40006000 	.word	0x40006000
    1a44:	20000004 	.word	0x20000004
    1a48:	20000005 	.word	0x20000005
    1a4c:	20000006 	.word	0x20000006

00001a50 <ChangeLED>:
 *                  bluecntrl: controls blue subpixel
 * Return           none
 * Last Edited:     11/14/14 RTC
 */
static void ChangeLED(uint8_t ledsel, uint8_t redcntrl, uint8_t greencntrl, uint8_t bluecntrl)
{
    1a50:	b490      	push	{r4, r7}
    1a52:	b082      	sub	sp, #8
    1a54:	af00      	add	r7, sp, #0
    1a56:	4604      	mov	r4, r0
    1a58:	4608      	mov	r0, r1
    1a5a:	4611      	mov	r1, r2
    1a5c:	461a      	mov	r2, r3
    1a5e:	4623      	mov	r3, r4
    1a60:	71fb      	strb	r3, [r7, #7]
    1a62:	4603      	mov	r3, r0
    1a64:	71bb      	strb	r3, [r7, #6]
    1a66:	460b      	mov	r3, r1
    1a68:	717b      	strb	r3, [r7, #5]
    1a6a:	4613      	mov	r3, r2
    1a6c:	713b      	strb	r3, [r7, #4]
    //Shuts off red, green, and blue
    GPIO->P[2].DOUTSET = 7;
    1a6e:	4b0f      	ldr	r3, [pc, #60]	; (1aac <ChangeLED+0x5c>)
    1a70:	2207      	movs	r2, #7
    1a72:	659a      	str	r2, [r3, #88]	; 0x58
    GPIO->P[2].DOUTCLR = 0xff<<4;
    1a74:	4b0d      	ldr	r3, [pc, #52]	; (1aac <ChangeLED+0x5c>)
    1a76:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    1a7a:	65da      	str	r2, [r3, #92]	; 0x5c
    //Set new LEDs
    GPIO->P[2].DOUTSET = (ledsel & 0xfe)<<3 | (ledsel & 1)<<11;
    1a7c:	490b      	ldr	r1, [pc, #44]	; (1aac <ChangeLED+0x5c>)
    1a7e:	79fb      	ldrb	r3, [r7, #7]
    1a80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1a84:	00da      	lsls	r2, r3, #3
    1a86:	79fb      	ldrb	r3, [r7, #7]
    1a88:	f003 0301 	and.w	r3, r3, #1
    1a8c:	02db      	lsls	r3, r3, #11
    1a8e:	4313      	orrs	r3, r2
    1a90:	658b      	str	r3, [r1, #88]	; 0x58
    GPIO->P[2].DOUTCLR = ((redcntrl<<2) + (greencntrl<<1) + bluecntrl);
    1a92:	4906      	ldr	r1, [pc, #24]	; (1aac <ChangeLED+0x5c>)
    1a94:	79bb      	ldrb	r3, [r7, #6]
    1a96:	009a      	lsls	r2, r3, #2
    1a98:	797b      	ldrb	r3, [r7, #5]
    1a9a:	005b      	lsls	r3, r3, #1
    1a9c:	441a      	add	r2, r3
    1a9e:	793b      	ldrb	r3, [r7, #4]
    1aa0:	4413      	add	r3, r2
    1aa2:	65cb      	str	r3, [r1, #92]	; 0x5c
}
    1aa4:	3708      	adds	r7, #8
    1aa6:	46bd      	mov	sp, r7
    1aa8:	bc90      	pop	{r4, r7}
    1aaa:	4770      	bx	lr
    1aac:	40006000 	.word	0x40006000

00001ab0 <ButtonPress>:
 * Params           none
 * Return           none
 * Date Created:    12/4/15 RTC
 */
void ButtonPress(void)
{
    1ab0:	b480      	push	{r7}
    1ab2:	af00      	add	r7, sp, #0
    static int32_t i = 0;
    //xTaskNotifyGive(xPWMTask);
    //xTaskNotifyGive(xLEDTask);
    GPIO->P[4].MODEH |=  4<<4*(8-8);    //PUMP2_EN();
    1ab4:	4a08      	ldr	r2, [pc, #32]	; (1ad8 <ButtonPress+0x28>)
    1ab6:	4b08      	ldr	r3, [pc, #32]	; (1ad8 <ButtonPress+0x28>)
    1ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1abc:	f043 0304 	orr.w	r3, r3, #4
    1ac0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    GPIO->P[4].DOUTSET = 1<<9;          // PUMP_EN();
    1ac4:	4b04      	ldr	r3, [pc, #16]	; (1ad8 <ButtonPress+0x28>)
    1ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
    1aca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        ChangePWMDC(-1, BUCK);
        LEDChangePixels(0x80, BLACK);
        vTaskDelay(2000);
    }
#endif
}
    1ace:	46bd      	mov	sp, r7
    1ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ad4:	4770      	bx	lr
    1ad6:	bf00      	nop
    1ad8:	40006000 	.word	0x40006000

00001adc <ButtonRelease>:
 * Params           none
 * Return           none
 * Date Created:    12/4/15 RTC
 */
void ButtonRelease(void)
{
    1adc:	b580      	push	{r7, lr}
    1ade:	af00      	add	r7, sp, #0
    ChangePWMDC(-1, BOOST);
    1ae0:	f04f 30ff 	mov.w	r0, #4294967295
    1ae4:	2101      	movs	r1, #1
    1ae6:	f000 f87b 	bl	1be0 <ChangePWMDC>
    PUMP_DIS();
    1aea:	4b07      	ldr	r3, [pc, #28]	; (1b08 <ButtonRelease+0x2c>)
    1aec:	f44f 7200 	mov.w	r2, #512	; 0x200
    1af0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    PUMP2_DIS();
    1af4:	4a04      	ldr	r2, [pc, #16]	; (1b08 <ButtonRelease+0x2c>)
    1af6:	4b04      	ldr	r3, [pc, #16]	; (1b08 <ButtonRelease+0x2c>)
    1af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1afc:	f023 030f 	bic.w	r3, r3, #15
    1b00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
    1b04:	bd80      	pop	{r7, pc}
    1b06:	bf00      	nop
    1b08:	40006000 	.word	0x40006000

00001b0c <ButtonTask>:
 * Last Edited:     11/16/15 RTC
 */
#define BUTTONISPRESSED !(GPIO->P[4].DIN&(1<<12))   //active low button
#define BUTTONDELAY     10  // ms delay for task
void ButtonTask(void *pvParameters)
{
    1b0c:	b580      	push	{r7, lr}
    1b0e:	b084      	sub	sp, #16
    1b10:	af00      	add	r7, sp, #0
    1b12:	6078      	str	r0, [r7, #4]
    BUTTONSTATETYPE button1 = BUTOFF;
    1b14:	2300      	movs	r3, #0
    1b16:	73fb      	strb	r3, [r7, #15]
    //Main button init (PE12)
    GPIO->P[4].MODEH &= ~0xf<<4*(12-8);	//g_pGPIO->PA_MODEL &= ~0xf;
    1b18:	4a30      	ldr	r2, [pc, #192]	; (1bdc <ButtonTask+0xd0>)
    1b1a:	4b30      	ldr	r3, [pc, #192]	; (1bdc <ButtonTask+0xd0>)
    1b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1b20:	0d1b      	lsrs	r3, r3, #20
    1b22:	051b      	lsls	r3, r3, #20
    1b24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    GPIO->P[4].MODEH |=  0x3<<4*(12-8);	//g_pGPIO->PA_MODEL |=  0x3;
    1b28:	4a2c      	ldr	r2, [pc, #176]	; (1bdc <ButtonTask+0xd0>)
    1b2a:	4b2c      	ldr	r3, [pc, #176]	; (1bdc <ButtonTask+0xd0>)
    1b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1b30:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1b34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    GPIO->P[4].DOUTSET = 1<<12;			//g_pGPIO->PA_DOUTSET = 1<<0;
    1b38:	4b28      	ldr	r3, [pc, #160]	; (1bdc <ButtonTask+0xd0>)
    1b3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1b3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    /* Init the Pump MICROA PE8 (active LOW) and MICROB PE9 (active HIGH) */
    PUMP_DIS();
    1b42:	4b26      	ldr	r3, [pc, #152]	; (1bdc <ButtonTask+0xd0>)
    1b44:	f44f 7200 	mov.w	r2, #512	; 0x200
    1b48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    PUMP2_DIS();
    1b4c:	4a23      	ldr	r2, [pc, #140]	; (1bdc <ButtonTask+0xd0>)
    1b4e:	4b23      	ldr	r3, [pc, #140]	; (1bdc <ButtonTask+0xd0>)
    1b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1b54:	f023 030f 	bic.w	r3, r3, #15
    1b58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    GPIO->P[4].DOUTCLR = 1<<8;          //Pump init (MICROA, PE8)
    1b5c:	4b1f      	ldr	r3, [pc, #124]	; (1bdc <ButtonTask+0xd0>)
    1b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1b62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    GPIO->P[4].MODEH |= 0x4<<4*(9-8);   //Pump2 init (MICROB, PE9)
    1b66:	4a1d      	ldr	r2, [pc, #116]	; (1bdc <ButtonTask+0xd0>)
    1b68:	4b1c      	ldr	r3, [pc, #112]	; (1bdc <ButtonTask+0xd0>)
    1b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1b72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    // Loop
    while (1) {
        vTaskDelay(BUTTONDELAY);
    1b76:	200a      	movs	r0, #10
    1b78:	f7ff f8f8 	bl	d6c <vTaskDelay>
        switch (button1) {
    1b7c:	7bfb      	ldrb	r3, [r7, #15]
    1b7e:	2b01      	cmp	r3, #1
    1b80:	d00f      	beq.n	1ba2 <ButtonTask+0x96>
    1b82:	2b02      	cmp	r3, #2
    1b84:	d019      	beq.n	1bba <ButtonTask+0xae>
    1b86:	2b00      	cmp	r3, #0
    1b88:	d000      	beq.n	1b8c <ButtonTask+0x80>
                button1 = BUTOFF;
            }
            break;
        default:
            // failure of some sort
            break;
    1b8a:	e025      	b.n	1bd8 <ButtonTask+0xcc>
    // Loop
    while (1) {
        vTaskDelay(BUTTONDELAY);
        switch (button1) {
        case BUTOFF:
            if (BUTTONISPRESSED)
    1b8c:	4b13      	ldr	r3, [pc, #76]	; (1bdc <ButtonTask+0xd0>)
    1b8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    1b96:	2b00      	cmp	r3, #0
    1b98:	d102      	bne.n	1ba0 <ButtonTask+0x94>
            {
                button1 = BUTWAIT;
    1b9a:	2302      	movs	r3, #2
    1b9c:	73fb      	strb	r3, [r7, #15]
            }
            break;
    1b9e:	e01b      	b.n	1bd8 <ButtonTask+0xcc>
    1ba0:	e01a      	b.n	1bd8 <ButtonTask+0xcc>
        case BUTON:
            if (!BUTTONISPRESSED)
    1ba2:	4b0e      	ldr	r3, [pc, #56]	; (1bdc <ButtonTask+0xd0>)
    1ba4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    1bac:	2b00      	cmp	r3, #0
    1bae:	d003      	beq.n	1bb8 <ButtonTask+0xac>
            {
                ButtonRelease();
    1bb0:	f7ff ff94 	bl	1adc <ButtonRelease>
                button1 = BUTOFF;
    1bb4:	2300      	movs	r3, #0
    1bb6:	73fb      	strb	r3, [r7, #15]
            }
            else
            {
                /* holding button press action */
            }
            break;
    1bb8:	e00e      	b.n	1bd8 <ButtonTask+0xcc>
        case BUTWAIT:
            if (BUTTONISPRESSED)
    1bba:	4b08      	ldr	r3, [pc, #32]	; (1bdc <ButtonTask+0xd0>)
    1bbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d104      	bne.n	1bd2 <ButtonTask+0xc6>
            {
            	//ADD PRESS BUTTON ACTION HERE
                ButtonPress();
    1bc8:	f7ff ff72 	bl	1ab0 <ButtonPress>
                button1 = BUTON;
    1bcc:	2301      	movs	r3, #1
    1bce:	73fb      	strb	r3, [r7, #15]
            }
            else
            {
                button1 = BUTOFF;
            }
            break;
    1bd0:	e001      	b.n	1bd6 <ButtonTask+0xca>
                ButtonPress();
                button1 = BUTON;
            }
            else
            {
                button1 = BUTOFF;
    1bd2:	2300      	movs	r3, #0
    1bd4:	73fb      	strb	r3, [r7, #15]
            }
            break;
    1bd6:	bf00      	nop
        default:
            // failure of some sort
            break;
        }
    }
    1bd8:	e7cd      	b.n	1b76 <ButtonTask+0x6a>
    1bda:	bf00      	nop
    1bdc:	40006000 	.word	0x40006000

00001be0 <ChangePWMDC>:
 *                  state: {BOOST, BUCK}
 * Returns:         None
 * Date Created:    11/19/15 RTC
 */
void ChangePWMDC(int32_t dc, CONVERTERSTATETYPE state)
{
    1be0:	b480      	push	{r7}
    1be2:	b085      	sub	sp, #20
    1be4:	af00      	add	r7, sp, #0
    1be6:	6078      	str	r0, [r7, #4]
    1be8:	460b      	mov	r3, r1
    1bea:	70fb      	strb	r3, [r7, #3]
    uint16_t ccvb = (dc*PWM_PER)/100;
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	4a35      	ldr	r2, [pc, #212]	; (1cc4 <ChangePWMDC+0xe4>)
    1bf0:	fb02 f303 	mul.w	r3, r2, r3
    1bf4:	4a34      	ldr	r2, [pc, #208]	; (1cc8 <ChangePWMDC+0xe8>)
    1bf6:	fb82 1203 	smull	r1, r2, r2, r3
    1bfa:	15d2      	asrs	r2, r2, #23
    1bfc:	17db      	asrs	r3, r3, #31
    1bfe:	1ad3      	subs	r3, r2, r3
    1c00:	81fb      	strh	r3, [r7, #14]
    if (state == BOOST)
    1c02:	78fb      	ldrb	r3, [r7, #3]
    1c04:	2b01      	cmp	r3, #1
    1c06:	d137      	bne.n	1c78 <ChangePWMDC+0x98>
    {
        ccvb /= 2;
    1c08:	89fb      	ldrh	r3, [r7, #14]
    1c0a:	085b      	lsrs	r3, r3, #1
    1c0c:	81fb      	strh	r3, [r7, #14]
        if (dc == 0)
    1c0e:	687b      	ldr	r3, [r7, #4]
    1c10:	2b00      	cmp	r3, #0
    1c12:	d109      	bne.n	1c28 <ChangePWMDC+0x48>
        {
            TIMER1->CC[0].CCVB = PWM_PER + 1;
    1c14:	4b2d      	ldr	r3, [pc, #180]	; (1ccc <ChangePWMDC+0xec>)
    1c16:	228d      	movs	r2, #141	; 0x8d
    1c18:	63da      	str	r2, [r3, #60]	; 0x3c
            TIMER0->CC[2].CCVB = 0;
    1c1a:	4b2d      	ldr	r3, [pc, #180]	; (1cd0 <ChangePWMDC+0xf0>)
    1c1c:	2200      	movs	r2, #0
    1c1e:	65da      	str	r2, [r3, #92]	; 0x5c
            TIMER0->CC[2].CCVB = 0;
    1c20:	4b2b      	ldr	r3, [pc, #172]	; (1cd0 <ChangePWMDC+0xf0>)
    1c22:	2200      	movs	r2, #0
    1c24:	65da      	str	r2, [r3, #92]	; 0x5c
    1c26:	e047      	b.n	1cb8 <ChangePWMDC+0xd8>
        }
        else if ((dc <= 100) && (dc > 0))
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	2b64      	cmp	r3, #100	; 0x64
    1c2c:	dc0d      	bgt.n	1c4a <ChangePWMDC+0x6a>
    1c2e:	687b      	ldr	r3, [r7, #4]
    1c30:	2b00      	cmp	r3, #0
    1c32:	dd0a      	ble.n	1c4a <ChangePWMDC+0x6a>
        {
            TIMER1->CC[0].CCVB = PWM_PER + 1;
    1c34:	4b25      	ldr	r3, [pc, #148]	; (1ccc <ChangePWMDC+0xec>)
    1c36:	228d      	movs	r2, #141	; 0x8d
    1c38:	63da      	str	r2, [r3, #60]	; 0x3c
            TIMER0->CC[2].CCVB = ccvb;
    1c3a:	4a25      	ldr	r2, [pc, #148]	; (1cd0 <ChangePWMDC+0xf0>)
    1c3c:	89fb      	ldrh	r3, [r7, #14]
    1c3e:	65d3      	str	r3, [r2, #92]	; 0x5c
            TIMER0->CC[1].CCVB = ccvb+DEADTIME;
    1c40:	4a23      	ldr	r2, [pc, #140]	; (1cd0 <ChangePWMDC+0xf0>)
    1c42:	89fb      	ldrh	r3, [r7, #14]
    1c44:	3301      	adds	r3, #1
    1c46:	64d3      	str	r3, [r2, #76]	; 0x4c
    1c48:	e036      	b.n	1cb8 <ChangePWMDC+0xd8>
        }
        else if (dc == -1)
    1c4a:	687b      	ldr	r3, [r7, #4]
    1c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1c50:	d132      	bne.n	1cb8 <ChangePWMDC+0xd8>
        {
            TIMER0->CC[1].CCVB = 0;
    1c52:	4b1f      	ldr	r3, [pc, #124]	; (1cd0 <ChangePWMDC+0xf0>)
    1c54:	2200      	movs	r2, #0
    1c56:	64da      	str	r2, [r3, #76]	; 0x4c
            TIMER0->CC[1].CCV  = 0;
    1c58:	4b1d      	ldr	r3, [pc, #116]	; (1cd0 <ChangePWMDC+0xf0>)
    1c5a:	2200      	movs	r2, #0
    1c5c:	645a      	str	r2, [r3, #68]	; 0x44
            TIMER0->CC[2].CCVB = PWM_PER/2 + 1;
    1c5e:	4b1c      	ldr	r3, [pc, #112]	; (1cd0 <ChangePWMDC+0xf0>)
    1c60:	2247      	movs	r2, #71	; 0x47
    1c62:	65da      	str	r2, [r3, #92]	; 0x5c
            TIMER0->CC[2].CCV  = PWM_PER/2 + 1;
    1c64:	4b1a      	ldr	r3, [pc, #104]	; (1cd0 <ChangePWMDC+0xf0>)
    1c66:	2247      	movs	r2, #71	; 0x47
    1c68:	655a      	str	r2, [r3, #84]	; 0x54
            TIMER1->CC[0].CCVB = 0;
    1c6a:	4b18      	ldr	r3, [pc, #96]	; (1ccc <ChangePWMDC+0xec>)
    1c6c:	2200      	movs	r2, #0
    1c6e:	63da      	str	r2, [r3, #60]	; 0x3c
            TIMER1->CC[0].CCV  = 0;
    1c70:	4b16      	ldr	r3, [pc, #88]	; (1ccc <ChangePWMDC+0xec>)
    1c72:	2200      	movs	r2, #0
    1c74:	635a      	str	r2, [r3, #52]	; 0x34
    1c76:	e01f      	b.n	1cb8 <ChangePWMDC+0xd8>
        }
    }
    else if (state == BUCK)
    1c78:	78fb      	ldrb	r3, [r7, #3]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d11c      	bne.n	1cb8 <ChangePWMDC+0xd8>
    {
        if ((dc <= 100) && (dc >= 0))
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	2b64      	cmp	r3, #100	; 0x64
    1c82:	dc09      	bgt.n	1c98 <ChangePWMDC+0xb8>
    1c84:	687b      	ldr	r3, [r7, #4]
    1c86:	2b00      	cmp	r3, #0
    1c88:	db06      	blt.n	1c98 <ChangePWMDC+0xb8>
        {
            TIMER1->CC[0].CCVB = ccvb;
    1c8a:	4a10      	ldr	r2, [pc, #64]	; (1ccc <ChangePWMDC+0xec>)
    1c8c:	89fb      	ldrh	r3, [r7, #14]
    1c8e:	63d3      	str	r3, [r2, #60]	; 0x3c
            TIMER0->CC[2].CCVB = 0;
    1c90:	4b0f      	ldr	r3, [pc, #60]	; (1cd0 <ChangePWMDC+0xf0>)
    1c92:	2200      	movs	r2, #0
    1c94:	65da      	str	r2, [r3, #92]	; 0x5c
    1c96:	e00f      	b.n	1cb8 <ChangePWMDC+0xd8>
        }
        else if (dc == -1)
    1c98:	687b      	ldr	r3, [r7, #4]
    1c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
    1c9e:	d10b      	bne.n	1cb8 <ChangePWMDC+0xd8>
        {
            TIMER1->CC[0].CCVB = 0;
    1ca0:	4b0a      	ldr	r3, [pc, #40]	; (1ccc <ChangePWMDC+0xec>)
    1ca2:	2200      	movs	r2, #0
    1ca4:	63da      	str	r2, [r3, #60]	; 0x3c
            TIMER1->CC[0].CCV  = 0;
    1ca6:	4b09      	ldr	r3, [pc, #36]	; (1ccc <ChangePWMDC+0xec>)
    1ca8:	2200      	movs	r2, #0
    1caa:	635a      	str	r2, [r3, #52]	; 0x34
            TIMER0->CC[2].CCVB = PWM_PER/2 + 1;
    1cac:	4b08      	ldr	r3, [pc, #32]	; (1cd0 <ChangePWMDC+0xf0>)
    1cae:	2247      	movs	r2, #71	; 0x47
    1cb0:	65da      	str	r2, [r3, #92]	; 0x5c
            TIMER0->CC[2].CCV  = PWM_PER/2 + 1;
    1cb2:	4b07      	ldr	r3, [pc, #28]	; (1cd0 <ChangePWMDC+0xf0>)
    1cb4:	2247      	movs	r2, #71	; 0x47
    1cb6:	655a      	str	r2, [r3, #84]	; 0x54
        }
    }
}
    1cb8:	3714      	adds	r7, #20
    1cba:	46bd      	mov	sp, r7
    1cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cc0:	4770      	bx	lr
    1cc2:	bf00      	nop
    1cc4:	01ab3f00 	.word	0x01ab3f00
    1cc8:	6b5fca6b 	.word	0x6b5fca6b
    1ccc:	40010400 	.word	0x40010400
    1cd0:	40010000 	.word	0x40010000

00001cd4 <PWMTask>:
#define TIMER0_START()   TIMER0->CMD = 1
#define TIMER0_STOP()    TIMER0->CMD = 0
#define TIMER1_START()   TIMER1->CMD = 1
#define TIMER1_STOP()    TIMER1->CMD = 0
void PWMTask(void * pvParameters)
{
    1cd4:	b580      	push	{r7, lr}
    1cd6:	b084      	sub	sp, #16
    1cd8:	af00      	add	r7, sp, #0
    1cda:	6078      	str	r0, [r7, #4]
    uint16_t dc = 0;
    1cdc:	2300      	movs	r3, #0
    1cde:	81fb      	strh	r3, [r7, #14]
    /*** Setup TIMER0 for VGATE1 and VGATE4 for BOOST mode ***/
    TIMER0->TOPB = PWM_PER/2;
    1ce0:	4b37      	ldr	r3, [pc, #220]	; (1dc0 <PWMTask+0xec>)
    1ce2:	2246      	movs	r2, #70	; 0x46
    1ce4:	621a      	str	r2, [r3, #32]
    TIMER0->TOP  = PWM_PER/2;
    1ce6:	4b36      	ldr	r3, [pc, #216]	; (1dc0 <PWMTask+0xec>)
    1ce8:	2246      	movs	r2, #70	; 0x46
    1cea:	61da      	str	r2, [r3, #28]
    TIMER0->CTRL |= 2;          // UP-DOWN COUNT mode (so we can manually create the deadtime)
    1cec:	4a34      	ldr	r2, [pc, #208]	; (1dc0 <PWMTask+0xec>)
    1cee:	4b34      	ldr	r3, [pc, #208]	; (1dc0 <PWMTask+0xec>)
    1cf0:	681b      	ldr	r3, [r3, #0]
    1cf2:	f043 0302 	orr.w	r3, r3, #2
    1cf6:	6013      	str	r3, [r2, #0]
    TIMER0->ROUTE = 1<<16       //Using position 1 for TIMER0 CC1 (PA1)
    1cf8:	4b31      	ldr	r3, [pc, #196]	; (1dc0 <PWMTask+0xec>)
    1cfa:	4a32      	ldr	r2, [pc, #200]	; (1dc4 <PWMTask+0xf0>)
    1cfc:	629a      	str	r2, [r3, #40]	; 0x28
            | 1<<1              //enables CC1
            | 1<<2;             //enables CC2
    /** Setup Primary VGATE1 (CC1) **/
    TIMER0->CC[1].CTRL = 3<<0   //Enable PWM mode
    1cfe:	4b30      	ldr	r3, [pc, #192]	; (1dc0 <PWMTask+0xec>)
    1d00:	2217      	movs	r2, #23
    1d02:	641a      	str	r2, [r3, #64]	; 0x40
            | 1<<4              //initial value is 1.
            | 1<<2;             //inverts output
    GPIO->P[0].MODEL |= 4<<4*1; //Enable output on PA1
    1d04:	4a30      	ldr	r2, [pc, #192]	; (1dc8 <PWMTask+0xf4>)
    1d06:	4b30      	ldr	r3, [pc, #192]	; (1dc8 <PWMTask+0xf4>)
    1d08:	685b      	ldr	r3, [r3, #4]
    1d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d0e:	6053      	str	r3, [r2, #4]
    GPIO->P[0].CTRL   = 2;      //Sets drive current to HIGH
    1d10:	4b2d      	ldr	r3, [pc, #180]	; (1dc8 <PWMTask+0xf4>)
    1d12:	2202      	movs	r2, #2
    1d14:	601a      	str	r2, [r3, #0]
    /** Setup Secondary VGATE4 (CC2) **/
    TIMER0->CC[2].CTRL = 3<<0   //Enables PWM mode
    1d16:	4b2a      	ldr	r3, [pc, #168]	; (1dc0 <PWMTask+0xec>)
    1d18:	2213      	movs	r2, #19
    1d1a:	651a      	str	r2, [r3, #80]	; 0x50
            | 1<<4;             //Initial value is 1
    GPIO->P[0].MODEL |= 4<<4*2; //Enable output on PA2
    1d1c:	4a2a      	ldr	r2, [pc, #168]	; (1dc8 <PWMTask+0xf4>)
    1d1e:	4b2a      	ldr	r3, [pc, #168]	; (1dc8 <PWMTask+0xf4>)
    1d20:	685b      	ldr	r3, [r3, #4]
    1d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1d26:	6053      	str	r3, [r2, #4]
    ChangePWMDC(-1, BOOST);
    1d28:	f04f 30ff 	mov.w	r0, #4294967295
    1d2c:	2101      	movs	r1, #1
    1d2e:	f7ff ff57 	bl	1be0 <ChangePWMDC>
    /*** Setup TIMER1 for VGATE 2 for BUCK mode ***/
    TIMER1->TOPB = PWM_PER;
    1d32:	4b26      	ldr	r3, [pc, #152]	; (1dcc <PWMTask+0xf8>)
    1d34:	228c      	movs	r2, #140	; 0x8c
    1d36:	621a      	str	r2, [r3, #32]
    TIMER1->TOP  = PWM_PER;
    1d38:	4b24      	ldr	r3, [pc, #144]	; (1dcc <PWMTask+0xf8>)
    1d3a:	228c      	movs	r2, #140	; 0x8c
    1d3c:	61da      	str	r2, [r3, #28]
    TIMER1->CTRL = 0;           //UP COUNT mode, since we don't have to worry about deadtime
    1d3e:	4b23      	ldr	r3, [pc, #140]	; (1dcc <PWMTask+0xf8>)
    1d40:	2200      	movs	r2, #0
    1d42:	601a      	str	r2, [r3, #0]
    TIMER1->ROUTE = 3<<16       //Using position 3 for TIMER1 CC0 (PB7)
    1d44:	4b21      	ldr	r3, [pc, #132]	; (1dcc <PWMTask+0xf8>)
    1d46:	4a22      	ldr	r2, [pc, #136]	; (1dd0 <PWMTask+0xfc>)
    1d48:	629a      	str	r2, [r3, #40]	; 0x28
            | 1<<0;             //enables CC0
    /** Setup Primary VGATE2 (CC0) **/
    TIMER1->CC[0].CTRL = 3<<0   //Enable PWM mode
    1d4a:	4b20      	ldr	r3, [pc, #128]	; (1dcc <PWMTask+0xf8>)
    1d4c:	2217      	movs	r2, #23
    1d4e:	631a      	str	r2, [r3, #48]	; 0x30
            | 1<<4              //initial value is 1.
            | 1<<2;             //inverts output
    GPIO->P[1].MODEL |= 5<<4*7; //Enable output on PB7
    1d50:	4a1d      	ldr	r2, [pc, #116]	; (1dc8 <PWMTask+0xf4>)
    1d52:	4b1d      	ldr	r3, [pc, #116]	; (1dc8 <PWMTask+0xf4>)
    1d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d56:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    1d5a:	6293      	str	r3, [r2, #40]	; 0x28
    GPIO->P[1].CTRL   = 2;      //Sets drive current to HIGH
    1d5c:	4b1a      	ldr	r3, [pc, #104]	; (1dc8 <PWMTask+0xf4>)
    1d5e:	2202      	movs	r2, #2
    1d60:	625a      	str	r2, [r3, #36]	; 0x24
    ChangePWMDC(-1, BUCK);
    1d62:	f04f 30ff 	mov.w	r0, #4294967295
    1d66:	2100      	movs	r1, #0
    1d68:	f7ff ff3a 	bl	1be0 <ChangePWMDC>
    /** Start the Timer **/
    TIMER0_START();
    1d6c:	4b14      	ldr	r3, [pc, #80]	; (1dc0 <PWMTask+0xec>)
    1d6e:	2201      	movs	r2, #1
    1d70:	605a      	str	r2, [r3, #4]
    TIMER1_START();
    1d72:	4b16      	ldr	r3, [pc, #88]	; (1dcc <PWMTask+0xf8>)
    1d74:	2201      	movs	r2, #1
    1d76:	605a      	str	r2, [r3, #4]
    while(1)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
    1d78:	2001      	movs	r0, #1
    1d7a:	f04f 31ff 	mov.w	r1, #4294967295
    1d7e:	f7ff fbcf 	bl	1520 <ulTaskNotifyTake>
        for(dc = 0; dc <= PWM_PER; dc++)
    1d82:	2300      	movs	r3, #0
    1d84:	81fb      	strh	r3, [r7, #14]
    1d86:	e009      	b.n	1d9c <PWMTask+0xc8>
        {
            TIMER1->CC[0].CCVB = dc;
    1d88:	4a10      	ldr	r2, [pc, #64]	; (1dcc <PWMTask+0xf8>)
    1d8a:	89fb      	ldrh	r3, [r7, #14]
    1d8c:	63d3      	str	r3, [r2, #60]	; 0x3c
            vTaskDelay(1000);
    1d8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1d92:	f7fe ffeb 	bl	d6c <vTaskDelay>
    TIMER0_START();
    TIMER1_START();
    while(1)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
        for(dc = 0; dc <= PWM_PER; dc++)
    1d96:	89fb      	ldrh	r3, [r7, #14]
    1d98:	3301      	adds	r3, #1
    1d9a:	81fb      	strh	r3, [r7, #14]
    1d9c:	89fb      	ldrh	r3, [r7, #14]
    1d9e:	2b8c      	cmp	r3, #140	; 0x8c
    1da0:	d9f2      	bls.n	1d88 <PWMTask+0xb4>
        {
            TIMER1->CC[0].CCVB = dc;
            vTaskDelay(1000);
        }
        PUMP_DIS();
    1da2:	4b09      	ldr	r3, [pc, #36]	; (1dc8 <PWMTask+0xf4>)
    1da4:	f44f 7200 	mov.w	r2, #512	; 0x200
    1da8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        PUMP2_DIS();
    1dac:	4a06      	ldr	r2, [pc, #24]	; (1dc8 <PWMTask+0xf4>)
    1dae:	4b06      	ldr	r3, [pc, #24]	; (1dc8 <PWMTask+0xf4>)
    1db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1db4:	f023 030f 	bic.w	r3, r3, #15
    1db8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    }
    1dbc:	e7dc      	b.n	1d78 <PWMTask+0xa4>
    1dbe:	bf00      	nop
    1dc0:	40010000 	.word	0x40010000
    1dc4:	00010006 	.word	0x00010006
    1dc8:	40006000 	.word	0x40006000
    1dcc:	40010400 	.word	0x40010400
    1dd0:	00030001 	.word	0x00030001

00001dd4 <main>:
 * Params           None
 * Return           None
 * Last Edited:     11/17/14 RTC
 */
int main(void)
{
    1dd4:	b580      	push	{r7, lr}
    1dd6:	b084      	sub	sp, #16
    1dd8:	af02      	add	r7, sp, #8
    int dummy = CMU->HFRCOCTRL;
    1dda:	4b2c      	ldr	r3, [pc, #176]	; (1e8c <main+0xb8>)
    1ddc:	68db      	ldr	r3, [r3, #12]
    1dde:	607b      	str	r3, [r7, #4]
    CMU->HFRCOCTRL = (CMU->HFRCOCTRL & ~(0x7ff)) | 5<<8
    1de0:	492a      	ldr	r1, [pc, #168]	; (1e8c <main+0xb8>)
    1de2:	4b2a      	ldr	r3, [pc, #168]	; (1e8c <main+0xb8>)
    1de4:	68db      	ldr	r3, [r3, #12]
    1de6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
    1dea:	f023 0307 	bic.w	r3, r3, #7
            | ((DEVINFO->HFRCOCAL1 & _DEVINFO_HFRCOCAL1_BAND28_MASK) >> _DEVINFO_HFRCOCAL1_BAND28_SHIFT);
    1dee:	4a28      	ldr	r2, [pc, #160]	; (1e90 <main+0xbc>)
    1df0:	6b12      	ldr	r2, [r2, #48]	; 0x30
    1df2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    1df6:	0a12      	lsrs	r2, r2, #8
    1df8:	4313      	orrs	r3, r2
    1dfa:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 * Last Edited:     11/17/14 RTC
 */
int main(void)
{
    int dummy = CMU->HFRCOCTRL;
    CMU->HFRCOCTRL = (CMU->HFRCOCTRL & ~(0x7ff)) | 5<<8
    1dfe:	60cb      	str	r3, [r1, #12]
            | ((DEVINFO->HFRCOCAL1 & _DEVINFO_HFRCOCAL1_BAND28_MASK) >> _DEVINFO_HFRCOCAL1_BAND28_SHIFT);
    dummy = CMU->HFRCOCTRL;
    1e00:	4b22      	ldr	r3, [pc, #136]	; (1e8c <main+0xb8>)
    1e02:	68db      	ldr	r3, [r3, #12]
    1e04:	607b      	str	r3, [r7, #4]
    CMU->HFPERCLKEN0 |= (1 << 13)   //Enable GPIO clock
    1e06:	4a21      	ldr	r2, [pc, #132]	; (1e8c <main+0xb8>)
    1e08:	4b20      	ldr	r3, [pc, #128]	; (1e8c <main+0xb8>)
    1e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e0c:	f443 3348 	orr.w	r3, r3, #204800	; 0x32000
    1e10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    1e14:	6453      	str	r3, [r2, #68]	; 0x44
             | (1<<16)              //Enable ADC clock
             | (1<<17)              //Enable DAC clock
             | (1<<5 )              //Enable Timer0 (Timer1 is <<6)
             | (1<<6 );             //Enable Timer1
    xTaskCreate(ButtonTask, "Buttn", 175, NULL, 4, NULL);
    1e16:	2304      	movs	r3, #4
    1e18:	9300      	str	r3, [sp, #0]
    1e1a:	2300      	movs	r3, #0
    1e1c:	9301      	str	r3, [sp, #4]
    1e1e:	481d      	ldr	r0, [pc, #116]	; (1e94 <main+0xc0>)
    1e20:	491d      	ldr	r1, [pc, #116]	; (1e98 <main+0xc4>)
    1e22:	22af      	movs	r2, #175	; 0xaf
    1e24:	2300      	movs	r3, #0
    1e26:	f7fe fe83 	bl	b30 <xTaskCreate>
    xTaskCreate(LEDTask, "LED", 128, NULL, 1, &xLEDTask);
    1e2a:	2301      	movs	r3, #1
    1e2c:	9300      	str	r3, [sp, #0]
    1e2e:	4b1b      	ldr	r3, [pc, #108]	; (1e9c <main+0xc8>)
    1e30:	9301      	str	r3, [sp, #4]
    1e32:	481b      	ldr	r0, [pc, #108]	; (1ea0 <main+0xcc>)
    1e34:	491b      	ldr	r1, [pc, #108]	; (1ea4 <main+0xd0>)
    1e36:	2280      	movs	r2, #128	; 0x80
    1e38:	2300      	movs	r3, #0
    1e3a:	f7fe fe79 	bl	b30 <xTaskCreate>
    xTaskCreate(PWMTask, "PWM", 128, NULL, 5, &xPWMTask);
    1e3e:	2305      	movs	r3, #5
    1e40:	9300      	str	r3, [sp, #0]
    1e42:	4b19      	ldr	r3, [pc, #100]	; (1ea8 <main+0xd4>)
    1e44:	9301      	str	r3, [sp, #4]
    1e46:	4819      	ldr	r0, [pc, #100]	; (1eac <main+0xd8>)
    1e48:	4919      	ldr	r1, [pc, #100]	; (1eb0 <main+0xdc>)
    1e4a:	2280      	movs	r2, #128	; 0x80
    1e4c:	2300      	movs	r3, #0
    1e4e:	f7fe fe6f 	bl	b30 <xTaskCreate>
    xTaskCreate(ADTask, "ADC", 128, NULL, 2, NULL);
    1e52:	2302      	movs	r3, #2
    1e54:	9300      	str	r3, [sp, #0]
    1e56:	2300      	movs	r3, #0
    1e58:	9301      	str	r3, [sp, #4]
    1e5a:	4816      	ldr	r0, [pc, #88]	; (1eb4 <main+0xe0>)
    1e5c:	4916      	ldr	r1, [pc, #88]	; (1eb8 <main+0xe4>)
    1e5e:	2280      	movs	r2, #128	; 0x80
    1e60:	2300      	movs	r3, #0
    1e62:	f7fe fe65 	bl	b30 <xTaskCreate>
//    xTaskCreate(DACTask, "DAC", 128, NULL, 3, &xDACTask);
    PuffSem = xSemaphoreCreateBinary();
    1e66:	2001      	movs	r0, #1
    1e68:	2100      	movs	r1, #0
    1e6a:	2203      	movs	r2, #3
    1e6c:	f7fe fc30 	bl	6d0 <xQueueGenericCreate>
    1e70:	4602      	mov	r2, r0
    1e72:	4b12      	ldr	r3, [pc, #72]	; (1ebc <main+0xe8>)
    1e74:	601a      	str	r2, [r3, #0]
    vTaskStartScheduler();  //Begin kernel
    1e76:	f7fe ffa3 	bl	dc0 <vTaskStartScheduler>
    while (dummy)
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d1fc      	bne.n	1e7a <main+0xa6>
    {}

  /* Never reach this statement. */
  return (0);
    1e80:	2300      	movs	r3, #0
}
    1e82:	4618      	mov	r0, r3
    1e84:	3708      	adds	r7, #8
    1e86:	46bd      	mov	sp, r7
    1e88:	bd80      	pop	{r7, pc}
    1e8a:	bf00      	nop
    1e8c:	400c8000 	.word	0x400c8000
    1e90:	0fe081b0 	.word	0x0fe081b0
    1e94:	00001b0d 	.word	0x00001b0d
    1e98:	00001fc4 	.word	0x00001fc4
    1e9c:	20004184 	.word	0x20004184
    1ea0:	00001909 	.word	0x00001909
    1ea4:	00001fcc 	.word	0x00001fcc
    1ea8:	20004188 	.word	0x20004188
    1eac:	00001cd5 	.word	0x00001cd5
    1eb0:	00001fd0 	.word	0x00001fd0
    1eb4:	000017c5 	.word	0x000017c5
    1eb8:	00001fd4 	.word	0x00001fd4
    1ebc:	20004190 	.word	0x20004190

00001ec0 <Default_Handler>:
**===========================================================================
**  Default interrupt handler
**===========================================================================
*/
void Default_Handler()
{
    1ec0:	b480      	push	{r7}
    1ec2:	af00      	add	r7, sp, #0
	/* Hang here */
	while(1)
	{
	}
    1ec4:	e7fe      	b.n	1ec4 <Default_Handler+0x4>
    1ec6:	bf00      	nop

00001ec8 <Default_HandlerHF>:
}

void Default_HandlerHF()
{
    1ec8:	b480      	push	{r7}
    1eca:	b083      	sub	sp, #12
    1ecc:	af00      	add	r7, sp, #0
    int i;
    i = SCB->HFSR;
    1ece:	4b07      	ldr	r3, [pc, #28]	; (1eec <Default_HandlerHF+0x24>)
    1ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ed2:	607b      	str	r3, [r7, #4]
    GPIO->P[2].DOUTCLR = 1;
    1ed4:	4b06      	ldr	r3, [pc, #24]	; (1ef0 <Default_HandlerHF+0x28>)
    1ed6:	2201      	movs	r2, #1
    1ed8:	65da      	str	r2, [r3, #92]	; 0x5c
    GPIO->P[2].DOUTSET = 0xf<<4;
    1eda:	4b05      	ldr	r3, [pc, #20]	; (1ef0 <Default_HandlerHF+0x28>)
    1edc:	22f0      	movs	r2, #240	; 0xf0
    1ede:	659a      	str	r2, [r3, #88]	; 0x58
    __asm("BKPT");
    1ee0:	be00      	bkpt	0x0000
    /* Hang here */
//    while(1)
//    {
//    }
}
    1ee2:	370c      	adds	r7, #12
    1ee4:	46bd      	mov	sp, r7
    1ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1eea:	4770      	bx	lr
    1eec:	e000ed00 	.word	0xe000ed00
    1ef0:	40006000 	.word	0x40006000

00001ef4 <Reset_Handler>:
{
	/* Data and BSS variables */
	unsigned long *srcdata, *dstdata, *sbss;

	/* Set up the stack pointer */
	asm("ldr sp,=_estack\n\t");
    1ef4:	f8df d050 	ldr.w	sp, [pc, #80]	; 1f48 <Reset_Handler+0x54>

	/* Initialize System */
	SystemInit();
    1ef8:	f000 f828 	bl	1f4c <SystemInit>

	srcdata = &_sidata;
    1efc:	4e0d      	ldr	r6, [pc, #52]	; (1f34 <Reset_Handler+0x40>)
	dstdata = &_sdata;
    1efe:	4d0e      	ldr	r5, [pc, #56]	; (1f38 <Reset_Handler+0x44>)
	sbss = &_sbss;
    1f00:	4c0e      	ldr	r4, [pc, #56]	; (1f3c <Reset_Handler+0x48>)

	/* Copy data */
	while(dstdata != &_edata)
    1f02:	e005      	b.n	1f10 <Reset_Handler+0x1c>
	{
		*(dstdata++) = *(srcdata++);
    1f04:	462b      	mov	r3, r5
    1f06:	1d1d      	adds	r5, r3, #4
    1f08:	4632      	mov	r2, r6
    1f0a:	1d16      	adds	r6, r2, #4
    1f0c:	6812      	ldr	r2, [r2, #0]
    1f0e:	601a      	str	r2, [r3, #0]
	srcdata = &_sidata;
	dstdata = &_sdata;
	sbss = &_sbss;

	/* Copy data */
	while(dstdata != &_edata)
    1f10:	4b0b      	ldr	r3, [pc, #44]	; (1f40 <Reset_Handler+0x4c>)
    1f12:	429d      	cmp	r5, r3
    1f14:	d1f6      	bne.n	1f04 <Reset_Handler+0x10>
	{
		*(dstdata++) = *(srcdata++);
	}

	/* Clear BSS */
	while(sbss != &_ebss)
    1f16:	e003      	b.n	1f20 <Reset_Handler+0x2c>
	{
		*(sbss++) = '\0';
    1f18:	4623      	mov	r3, r4
    1f1a:	1d1c      	adds	r4, r3, #4
    1f1c:	2200      	movs	r2, #0
    1f1e:	601a      	str	r2, [r3, #0]
	{
		*(dstdata++) = *(srcdata++);
	}

	/* Clear BSS */
	while(sbss != &_ebss)
    1f20:	4b08      	ldr	r3, [pc, #32]	; (1f44 <Reset_Handler+0x50>)
    1f22:	429c      	cmp	r4, r3
    1f24:	d1f8      	bne.n	1f18 <Reset_Handler+0x24>
	{
		*(sbss++) = '\0';
	}

	/* Run static constructors */
	__libc_init_array();
    1f26:	f000 f817 	bl	1f58 <__libc_init_array>

	/* Jump to main */
	main();
    1f2a:	f7ff ff53 	bl	1dd4 <main>

	/* In case main returns, use default handler */
	Default_Handler();
    1f2e:	f7ff ffc7 	bl	1ec0 <Default_Handler>
    1f32:	bf00      	nop
    1f34:	00001ff8 	.word	0x00001ff8
    1f38:	20000000 	.word	0x20000000
    1f3c:	20000008 	.word	0x20000008
    1f40:	20000008 	.word	0x20000008
    1f44:	200041bc 	.word	0x200041bc
    1f48:	20008000 	.word	0x20008000

00001f4c <SystemInit>:
 *   This function is invoked during system init, before the main() routine
 *   and any data has been initialized. For this reason, it cannot do any
 *   initialization of variables etc.
 *****************************************************************************/
void SystemInit(void)
{
    1f4c:	b480      	push	{r7}
    1f4e:	af00      	add	r7, sp, #0
}
    1f50:	46bd      	mov	sp, r7
    1f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f56:	4770      	bx	lr

00001f58 <__libc_init_array>:
    1f58:	4b0e      	ldr	r3, [pc, #56]	; (1f94 <__libc_init_array+0x3c>)
    1f5a:	b570      	push	{r4, r5, r6, lr}
    1f5c:	461e      	mov	r6, r3
    1f5e:	4c0e      	ldr	r4, [pc, #56]	; (1f98 <__libc_init_array+0x40>)
    1f60:	2500      	movs	r5, #0
    1f62:	1ae4      	subs	r4, r4, r3
    1f64:	10a4      	asrs	r4, r4, #2
    1f66:	42a5      	cmp	r5, r4
    1f68:	d004      	beq.n	1f74 <__libc_init_array+0x1c>
    1f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1f6e:	4798      	blx	r3
    1f70:	3501      	adds	r5, #1
    1f72:	e7f8      	b.n	1f66 <__libc_init_array+0xe>
    1f74:	f000 f830 	bl	1fd8 <_init>
    1f78:	4b08      	ldr	r3, [pc, #32]	; (1f9c <__libc_init_array+0x44>)
    1f7a:	4c09      	ldr	r4, [pc, #36]	; (1fa0 <__libc_init_array+0x48>)
    1f7c:	461e      	mov	r6, r3
    1f7e:	1ae4      	subs	r4, r4, r3
    1f80:	10a4      	asrs	r4, r4, #2
    1f82:	2500      	movs	r5, #0
    1f84:	42a5      	cmp	r5, r4
    1f86:	d004      	beq.n	1f92 <__libc_init_array+0x3a>
    1f88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1f8c:	4798      	blx	r3
    1f8e:	3501      	adds	r5, #1
    1f90:	e7f8      	b.n	1f84 <__libc_init_array+0x2c>
    1f92:	bd70      	pop	{r4, r5, r6, pc}
    1f94:	00001ff0 	.word	0x00001ff0
    1f98:	00001ff0 	.word	0x00001ff0
    1f9c:	00001ff0 	.word	0x00001ff0
    1fa0:	00001ff4 	.word	0x00001ff4

00001fa4 <memcpy>:
    1fa4:	b510      	push	{r4, lr}
    1fa6:	1e43      	subs	r3, r0, #1
    1fa8:	440a      	add	r2, r1
    1faa:	4291      	cmp	r1, r2
    1fac:	d004      	beq.n	1fb8 <memcpy+0x14>
    1fae:	f811 4b01 	ldrb.w	r4, [r1], #1
    1fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
    1fb6:	e7f8      	b.n	1faa <memcpy+0x6>
    1fb8:	bd10      	pop	{r4, pc}
    1fba:	0000      	movs	r0, r0
    1fbc:	454c4449 	.word	0x454c4449
    1fc0:	00000000 	.word	0x00000000
    1fc4:	74747542 	.word	0x74747542
    1fc8:	0000006e 	.word	0x0000006e
    1fcc:	0044454c 	.word	0x0044454c
    1fd0:	004d5750 	.word	0x004d5750
    1fd4:	00434441 	.word	0x00434441

00001fd8 <_init>:
    1fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fda:	bf00      	nop
    1fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1fde:	bc08      	pop	{r3}
    1fe0:	469e      	mov	lr, r3
    1fe2:	4770      	bx	lr

00001fe4 <_fini>:
    1fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fe6:	bf00      	nop
    1fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1fea:	bc08      	pop	{r3}
    1fec:	469e      	mov	lr, r3
    1fee:	4770      	bx	lr
