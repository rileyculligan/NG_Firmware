   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"system_efm32lg.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.data.SystemHFXOClock,"aw",%progbits
  19              		.align	2
  22              	SystemHFXOClock:
  23 0000 006CDC02 		.word	48000000
  24              		.section	.data.SystemLFXOClock,"aw",%progbits
  25              		.align	2
  28              	SystemLFXOClock:
  29 0000 00800000 		.word	32768
  30              		.section	.text.GetProdRev,"ax",%progbits
  31              		.align	2
  32              		.thumb
  33              		.thumb_func
  35              	GetProdRev:
  36              	.LFB57:
  37              		.file 1 "../src/system_efm32lg.c"
   1:../src/system_efm32lg.c **** /***************************************************************************//**
   2:../src/system_efm32lg.c ****  * @file
   3:../src/system_efm32lg.c ****  * @brief CMSIS Cortex-M3 System Layer for EFM32LG devices.
   4:../src/system_efm32lg.c ****  * @author Energy Micro AS
   5:../src/system_efm32lg.c ****  * @version 3.0.2
   6:../src/system_efm32lg.c ****  *******************************************************************************
   7:../src/system_efm32lg.c ****  * @section License
   8:../src/system_efm32lg.c ****  * <b>(C) Copyright 2012 Energy Micro AS, http://www.energymicro.com</b>
   9:../src/system_efm32lg.c ****  ******************************************************************************
  10:../src/system_efm32lg.c ****  *
  11:../src/system_efm32lg.c ****  * Permission is granted to anyone to use this software for any purpose,
  12:../src/system_efm32lg.c ****  * including commercial applications, and to alter it and redistribute it
  13:../src/system_efm32lg.c ****  * freely, subject to the following restrictions:
  14:../src/system_efm32lg.c ****  *
  15:../src/system_efm32lg.c ****  * 1. The origin of this software must not be misrepresented; you must not
  16:../src/system_efm32lg.c ****  *    claim that you wrote the original software.
  17:../src/system_efm32lg.c ****  * 2. Altered source versions must be plainly marked as such, and must not be
  18:../src/system_efm32lg.c ****  *    misrepresented as being the original software.
  19:../src/system_efm32lg.c ****  * 3. This notice may not be removed or altered from any source distribution.
  20:../src/system_efm32lg.c ****  *
  21:../src/system_efm32lg.c ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  22:../src/system_efm32lg.c ****  * obligation to support this Software. Energy Micro AS is providing the
  23:../src/system_efm32lg.c ****  * Software "AS IS", with no express or implied warranties of any kind,
  24:../src/system_efm32lg.c ****  * including, but not limited to, any implied warranties of merchantability
  25:../src/system_efm32lg.c ****  * or fitness for any particular purpose or warranties against infringement
  26:../src/system_efm32lg.c ****  * of any proprietary rights of a third party.
  27:../src/system_efm32lg.c ****  *
  28:../src/system_efm32lg.c ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  29:../src/system_efm32lg.c ****  * special damages, or any other relief, or for any claim by any third party,
  30:../src/system_efm32lg.c ****  * arising from your use of this Software.
  31:../src/system_efm32lg.c ****  *
  32:../src/system_efm32lg.c ****  ******************************************************************************/
  33:../src/system_efm32lg.c **** 
  34:../src/system_efm32lg.c **** #include <stdint.h>
  35:../src/system_efm32lg.c **** #include "em_device.h"
  36:../src/system_efm32lg.c **** 
  37:../src/system_efm32lg.c **** /*******************************************************************************
  38:../src/system_efm32lg.c ****  ******************************   DEFINES   ************************************
  39:../src/system_efm32lg.c ****  ******************************************************************************/
  40:../src/system_efm32lg.c **** 
  41:../src/system_efm32lg.c **** /** LFRCO frequency, tuned to below frequency during manufacturing. */
  42:../src/system_efm32lg.c **** #define EFM32_LFRCO_FREQ  (32768UL)
  43:../src/system_efm32lg.c **** #define EFM32_ULFRCO_FREQ (1000UL)
  44:../src/system_efm32lg.c **** 
  45:../src/system_efm32lg.c **** /*******************************************************************************
  46:../src/system_efm32lg.c ****  **************************   LOCAL VARIABLES   ********************************
  47:../src/system_efm32lg.c ****  ******************************************************************************/
  48:../src/system_efm32lg.c **** 
  49:../src/system_efm32lg.c **** /* System oscillator frequencies. These frequencies are normally constant */
  50:../src/system_efm32lg.c **** /* for a target, but they are made configurable in order to allow run-time */
  51:../src/system_efm32lg.c **** /* handling of different boards. The crystal oscillator clocks can be set */
  52:../src/system_efm32lg.c **** /* compile time to a non-default value by defining respective EFM32_nFXO_FREQ */
  53:../src/system_efm32lg.c **** /* values according to board design. By defining the EFM32_nFXO_FREQ to 0, */
  54:../src/system_efm32lg.c **** /* one indicates that the oscillator is not present, in order to save some */
  55:../src/system_efm32lg.c **** /* SW footprint. */
  56:../src/system_efm32lg.c **** 
  57:../src/system_efm32lg.c **** #ifndef EFM32_HFXO_FREQ
  58:../src/system_efm32lg.c **** #ifdef _EFM32_GIANT_FAMILY
  59:../src/system_efm32lg.c **** #define EFM32_HFXO_FREQ (48000000UL)
  60:../src/system_efm32lg.c **** #else
  61:../src/system_efm32lg.c **** #define EFM32_HFXO_FREQ (32000000UL)
  62:../src/system_efm32lg.c **** #endif
  63:../src/system_efm32lg.c **** #endif
  64:../src/system_efm32lg.c **** /* Do not define variable if HF crystal oscillator not present */
  65:../src/system_efm32lg.c **** #if (EFM32_HFXO_FREQ > 0)
  66:../src/system_efm32lg.c **** /** @cond DO_NOT_INCLUDE_WITH_DOXYGEN */
  67:../src/system_efm32lg.c **** /** System HFXO clock. */ 
  68:../src/system_efm32lg.c **** static uint32_t SystemHFXOClock = EFM32_HFXO_FREQ;
  69:../src/system_efm32lg.c **** /** @endcond (DO_NOT_INCLUDE_WITH_DOXYGEN) */
  70:../src/system_efm32lg.c **** #endif
  71:../src/system_efm32lg.c **** 
  72:../src/system_efm32lg.c **** #ifndef EFM32_LFXO_FREQ 
  73:../src/system_efm32lg.c **** #define EFM32_LFXO_FREQ (EFM32_LFRCO_FREQ)
  74:../src/system_efm32lg.c **** #endif
  75:../src/system_efm32lg.c **** /* Do not define variable if LF crystal oscillator not present */
  76:../src/system_efm32lg.c **** #if (EFM32_LFXO_FREQ > 0)
  77:../src/system_efm32lg.c **** /** @cond DO_NOT_INCLUDE_WITH_DOXYGEN */
  78:../src/system_efm32lg.c **** /** System LFXO clock. */ 
  79:../src/system_efm32lg.c **** static uint32_t SystemLFXOClock = EFM32_LFXO_FREQ;
  80:../src/system_efm32lg.c **** /** @endcond (DO_NOT_INCLUDE_WITH_DOXYGEN) */
  81:../src/system_efm32lg.c **** #endif
  82:../src/system_efm32lg.c **** 
  83:../src/system_efm32lg.c **** /* Inline function to get the chip's Production Revision. */
  84:../src/system_efm32lg.c **** __STATIC_INLINE uint8_t GetProdRev(void)
  85:../src/system_efm32lg.c **** {
  38              		.loc 1 85 0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 0
  41              		@ frame_needed = 1, uses_anonymous_args = 0
  42              		@ link register save eliminated.
  43 0000 80B4     		push	{r7}
  44              		.cfi_def_cfa_offset 4
  45              		.cfi_offset 7, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  86:../src/system_efm32lg.c ****   return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
  48              		.loc 1 86 0
  49 0004 044B     		ldr	r3, .L3
  50 0006 DB6C     		ldr	r3, [r3, #76]
  87:../src/system_efm32lg.c ****                          >> _DEVINFO_PART_PROD_REV_SHIFT);
  51              		.loc 1 87 0
  52 0008 1B0E     		lsrs	r3, r3, #24
  86:../src/system_efm32lg.c ****   return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
  53              		.loc 1 86 0
  54 000a DBB2     		uxtb	r3, r3
  88:../src/system_efm32lg.c **** }
  55              		.loc 1 88 0
  56 000c 1846     		mov	r0, r3
  57 000e BD46     		mov	sp, r7
  58              		.cfi_def_cfa_register 13
  59              		@ sp needed
  60 0010 5DF8047B 		ldr	r7, [sp], #4
  61              		.cfi_restore 7
  62              		.cfi_def_cfa_offset 0
  63 0014 7047     		bx	lr
  64              	.L4:
  65 0016 00BF     		.align	2
  66              	.L3:
  67 0018 B081E00F 		.word	266371504
  68              		.cfi_endproc
  69              	.LFE57:
  71              		.comm	SystemCoreClock,4,4
  72              		.section	.text.SystemCoreClockGet,"ax",%progbits
  73              		.align	2
  74              		.global	SystemCoreClockGet
  75              		.thumb
  76              		.thumb_func
  78              	SystemCoreClockGet:
  79              	.LFB58:
  89:../src/system_efm32lg.c **** 
  90:../src/system_efm32lg.c **** /*******************************************************************************
  91:../src/system_efm32lg.c ****  **************************   GLOBAL VARIABLES   *******************************
  92:../src/system_efm32lg.c ****  ******************************************************************************/
  93:../src/system_efm32lg.c **** 
  94:../src/system_efm32lg.c **** /**
  95:../src/system_efm32lg.c ****  * @brief
  96:../src/system_efm32lg.c ****  *   System System Clock Frequency (Core Clock).
  97:../src/system_efm32lg.c ****  *
  98:../src/system_efm32lg.c ****  * @details
  99:../src/system_efm32lg.c ****  *   Required CMSIS global variable that must be kept up-to-date.
 100:../src/system_efm32lg.c ****  */
 101:../src/system_efm32lg.c **** uint32_t SystemCoreClock;
 102:../src/system_efm32lg.c **** 
 103:../src/system_efm32lg.c **** /*******************************************************************************
 104:../src/system_efm32lg.c ****  **************************   GLOBAL FUNCTIONS   *******************************
 105:../src/system_efm32lg.c ****  ******************************************************************************/
 106:../src/system_efm32lg.c **** 
 107:../src/system_efm32lg.c **** /***************************************************************************//**
 108:../src/system_efm32lg.c ****  * @brief
 109:../src/system_efm32lg.c ****  *   Get the current core clock frequency.
 110:../src/system_efm32lg.c ****  *
 111:../src/system_efm32lg.c ****  * @details
 112:../src/system_efm32lg.c ****  *   Calculate and get the current core clock frequency based on the current
 113:../src/system_efm32lg.c ****  *   configuration. Assuming that the SystemCoreClock global variable is
 114:../src/system_efm32lg.c ****  *   maintained, the core clock frequency is stored in that variable as well.
 115:../src/system_efm32lg.c ****  *   This function will however calculate the core clock based on actual HW
 116:../src/system_efm32lg.c ****  *   configuration. It will also update the SystemCoreClock global variable.
 117:../src/system_efm32lg.c ****  *
 118:../src/system_efm32lg.c ****  * @note
 119:../src/system_efm32lg.c ****  *   This is an EFM32 proprietary function, not part of the CMSIS definition.
 120:../src/system_efm32lg.c ****  *
 121:../src/system_efm32lg.c ****  * @return
 122:../src/system_efm32lg.c ****  *   The current core clock frequency in Hz.
 123:../src/system_efm32lg.c ****  ******************************************************************************/
 124:../src/system_efm32lg.c **** uint32_t SystemCoreClockGet(void)
 125:../src/system_efm32lg.c **** {
  80              		.loc 1 125 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 8
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 82B0     		sub	sp, sp, #8
  89              		.cfi_def_cfa_offset 16
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
 126:../src/system_efm32lg.c ****   uint32_t ret;
 127:../src/system_efm32lg.c ****   
 128:../src/system_efm32lg.c ****   ret = SystemHFClockGet();
  92              		.loc 1 128 0
  93 0006 FFF7FEFF 		bl	SystemHFClockGet
  94 000a 7860     		str	r0, [r7, #4]
 129:../src/system_efm32lg.c **** #if defined (_EFM32_GIANT_FAMILY)
 130:../src/system_efm32lg.c ****   /* Leopard/Giant Gecko has an additional divider */
 131:../src/system_efm32lg.c ****   ret =  ret / (1 + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)>>_CMU_CTRL_HFCLKDIV_SHIFT));
  95              		.loc 1 131 0
  96 000c 0C4B     		ldr	r3, .L7
  97 000e 1B68     		ldr	r3, [r3]
  98 0010 03F4E033 		and	r3, r3, #114688
  99 0014 9B0B     		lsrs	r3, r3, #14
 100 0016 0133     		adds	r3, r3, #1
 101 0018 7A68     		ldr	r2, [r7, #4]
 102 001a B2FBF3F3 		udiv	r3, r2, r3
 103 001e 7B60     		str	r3, [r7, #4]
 132:../src/system_efm32lg.c **** #endif
 133:../src/system_efm32lg.c ****   ret >>= (CMU->HFCORECLKDIV & _CMU_HFCORECLKDIV_HFCORECLKDIV_MASK) >> 
 104              		.loc 1 133 0
 105 0020 074B     		ldr	r3, .L7
 106 0022 5B68     		ldr	r3, [r3, #4]
 107 0024 03F00F03 		and	r3, r3, #15
 108 0028 1A46     		mov	r2, r3
 109 002a 7B68     		ldr	r3, [r7, #4]
 110 002c D340     		lsrs	r3, r3, r2
 111 002e 7B60     		str	r3, [r7, #4]
 134:../src/system_efm32lg.c ****           _CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT;
 135:../src/system_efm32lg.c **** 
 136:../src/system_efm32lg.c ****   /* Keep CMSIS variable up-to-date just in case */
 137:../src/system_efm32lg.c ****   SystemCoreClock = ret;
 112              		.loc 1 137 0
 113 0030 044A     		ldr	r2, .L7+4
 114 0032 7B68     		ldr	r3, [r7, #4]
 115 0034 1360     		str	r3, [r2]
 138:../src/system_efm32lg.c **** 
 139:../src/system_efm32lg.c ****   return ret;
 116              		.loc 1 139 0
 117 0036 7B68     		ldr	r3, [r7, #4]
 140:../src/system_efm32lg.c **** }
 118              		.loc 1 140 0
 119 0038 1846     		mov	r0, r3
 120 003a 0837     		adds	r7, r7, #8
 121              		.cfi_def_cfa_offset 8
 122 003c BD46     		mov	sp, r7
 123              		.cfi_def_cfa_register 13
 124              		@ sp needed
 125 003e 80BD     		pop	{r7, pc}
 126              	.L8:
 127              		.align	2
 128              	.L7:
 129 0040 00800C40 		.word	1074561024
 130 0044 00000000 		.word	SystemCoreClock
 131              		.cfi_endproc
 132              	.LFE58:
 134              		.section	.text.SystemHFClockGet,"ax",%progbits
 135              		.align	2
 136              		.global	SystemHFClockGet
 137              		.thumb
 138              		.thumb_func
 140              	SystemHFClockGet:
 141              	.LFB59:
 141:../src/system_efm32lg.c **** 
 142:../src/system_efm32lg.c **** 
 143:../src/system_efm32lg.c **** /***************************************************************************//**
 144:../src/system_efm32lg.c ****  * @brief
 145:../src/system_efm32lg.c ****  *   Get the current HFCLK frequency.
 146:../src/system_efm32lg.c ****  *
 147:../src/system_efm32lg.c ****  * @note
 148:../src/system_efm32lg.c ****  *   This is an EFM32 proprietary function, not part of the CMSIS definition.
 149:../src/system_efm32lg.c ****  *
 150:../src/system_efm32lg.c ****  * @return
 151:../src/system_efm32lg.c ****  *   The current HFCLK frequency in Hz.
 152:../src/system_efm32lg.c ****  ******************************************************************************/
 153:../src/system_efm32lg.c **** uint32_t SystemHFClockGet(void)
 154:../src/system_efm32lg.c **** {
 142              		.loc 1 154 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 155:../src/system_efm32lg.c ****   uint32_t ret;
 156:../src/system_efm32lg.c ****   
 157:../src/system_efm32lg.c ****   switch (CMU->STATUS & (CMU_STATUS_HFRCOSEL | CMU_STATUS_HFXOSEL |
 154              		.loc 1 157 0
 155 0006 2F4B     		ldr	r3, .L30
 156 0008 DB6A     		ldr	r3, [r3, #44]
 157 000a 03F47053 		and	r3, r3, #15360
 158 000e B3F5805F 		cmp	r3, #4096
 159 0012 0AD0     		beq	.L11
 160 0014 B3F5005F 		cmp	r3, #8192
 161 0018 03D0     		beq	.L12
 162 001a B3F5006F 		cmp	r3, #2048
 163 001e 08D0     		beq	.L13
 164 0020 0BE0     		b	.L29
 165              	.L12:
 158:../src/system_efm32lg.c ****                          CMU_STATUS_LFRCOSEL | CMU_STATUS_LFXOSEL))
 159:../src/system_efm32lg.c ****   {
 160:../src/system_efm32lg.c ****     case CMU_STATUS_LFXOSEL:
 161:../src/system_efm32lg.c **** #if (EFM32_LFXO_FREQ > 0)
 162:../src/system_efm32lg.c ****       ret = SystemLFXOClock;
 166              		.loc 1 162 0
 167 0022 294B     		ldr	r3, .L30+4
 168 0024 1B68     		ldr	r3, [r3]
 169 0026 7B60     		str	r3, [r7, #4]
 163:../src/system_efm32lg.c **** #else
 164:../src/system_efm32lg.c ****       /* We should not get here, since core should not be clocked. May */
 165:../src/system_efm32lg.c ****       /* be caused by a misconfiguration though. */
 166:../src/system_efm32lg.c ****       ret = 0;
 167:../src/system_efm32lg.c **** #endif
 168:../src/system_efm32lg.c ****       break;
 170              		.loc 1 168 0
 171 0028 47E0     		b	.L14
 172              	.L11:
 169:../src/system_efm32lg.c ****       
 170:../src/system_efm32lg.c ****     case CMU_STATUS_LFRCOSEL:
 171:../src/system_efm32lg.c ****       ret = EFM32_LFRCO_FREQ;
 173              		.loc 1 171 0
 174 002a 4FF40043 		mov	r3, #32768
 175 002e 7B60     		str	r3, [r7, #4]
 172:../src/system_efm32lg.c ****       break;
 176              		.loc 1 172 0
 177 0030 43E0     		b	.L14
 178              	.L13:
 173:../src/system_efm32lg.c ****       
 174:../src/system_efm32lg.c ****     case CMU_STATUS_HFXOSEL:
 175:../src/system_efm32lg.c **** #if (EFM32_HFXO_FREQ > 0)
 176:../src/system_efm32lg.c ****       ret = SystemHFXOClock;
 179              		.loc 1 176 0
 180 0032 264B     		ldr	r3, .L30+8
 181 0034 1B68     		ldr	r3, [r3]
 182 0036 7B60     		str	r3, [r7, #4]
 177:../src/system_efm32lg.c **** #else
 178:../src/system_efm32lg.c ****       /* We should not get here, since core should not be clocked. May */
 179:../src/system_efm32lg.c ****       /* be caused by a misconfiguration though. */
 180:../src/system_efm32lg.c ****       ret = 0;
 181:../src/system_efm32lg.c **** #endif
 182:../src/system_efm32lg.c ****       break;
 183              		.loc 1 182 0
 184 0038 3FE0     		b	.L14
 185              	.L29:
 183:../src/system_efm32lg.c ****       
 184:../src/system_efm32lg.c ****     default: /* CMU_STATUS_HFRCOSEL */
 185:../src/system_efm32lg.c ****       switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
 186              		.loc 1 185 0
 187 003a 224B     		ldr	r3, .L30
 188 003c DB68     		ldr	r3, [r3, #12]
 189 003e 03F4E063 		and	r3, r3, #1792
 190 0042 B3F5007F 		cmp	r3, #512
 191 0046 1BD0     		beq	.L16
 192 0048 B3F5007F 		cmp	r3, #512
 193 004c 05D8     		bhi	.L17
 194 004e 002B     		cmp	r3, #0
 195 0050 24D0     		beq	.L18
 196 0052 B3F5807F 		cmp	r3, #256
 197 0056 16D0     		beq	.L19
 198 0058 2BE0     		b	.L15
 199              	.L17:
 200 005a B3F5806F 		cmp	r3, #1024
 201 005e 09D0     		beq	.L20
 202 0060 B3F5A06F 		cmp	r3, #1280
 203 0064 03D0     		beq	.L21
 204 0066 B3F5407F 		cmp	r3, #768
 205 006a 06D0     		beq	.L22
 206 006c 21E0     		b	.L15
 207              	.L21:
 186:../src/system_efm32lg.c ****       {
 187:../src/system_efm32lg.c ****       case CMU_HFRCOCTRL_BAND_28MHZ:
 188:../src/system_efm32lg.c ****         ret = 28000000;
 208              		.loc 1 188 0
 209 006e 184B     		ldr	r3, .L30+12
 210 0070 7B60     		str	r3, [r7, #4]
 189:../src/system_efm32lg.c ****         break;
 211              		.loc 1 189 0
 212 0072 21E0     		b	.L23
 213              	.L20:
 190:../src/system_efm32lg.c **** 
 191:../src/system_efm32lg.c ****       case CMU_HFRCOCTRL_BAND_21MHZ:
 192:../src/system_efm32lg.c ****         ret = 21000000;
 214              		.loc 1 192 0
 215 0074 174B     		ldr	r3, .L30+16
 216 0076 7B60     		str	r3, [r7, #4]
 193:../src/system_efm32lg.c ****         break;
 217              		.loc 1 193 0
 218 0078 1EE0     		b	.L23
 219              	.L22:
 194:../src/system_efm32lg.c **** 
 195:../src/system_efm32lg.c ****       case CMU_HFRCOCTRL_BAND_14MHZ:
 196:../src/system_efm32lg.c ****         ret = 14000000;
 220              		.loc 1 196 0
 221 007a 174B     		ldr	r3, .L30+20
 222 007c 7B60     		str	r3, [r7, #4]
 197:../src/system_efm32lg.c ****         break;
 223              		.loc 1 197 0
 224 007e 1BE0     		b	.L23
 225              	.L16:
 198:../src/system_efm32lg.c **** 
 199:../src/system_efm32lg.c ****       case CMU_HFRCOCTRL_BAND_11MHZ:
 200:../src/system_efm32lg.c ****         ret = 11000000;
 226              		.loc 1 200 0
 227 0080 164B     		ldr	r3, .L30+24
 228 0082 7B60     		str	r3, [r7, #4]
 201:../src/system_efm32lg.c ****         break;
 229              		.loc 1 201 0
 230 0084 18E0     		b	.L23
 231              	.L19:
 202:../src/system_efm32lg.c **** 
 203:../src/system_efm32lg.c ****       case CMU_HFRCOCTRL_BAND_7MHZ:
 204:../src/system_efm32lg.c ****         if ( GetProdRev() >= 19 )
 232              		.loc 1 204 0
 233 0086 FFF7FEFF 		bl	GetProdRev
 234 008a 0346     		mov	r3, r0
 235 008c 122B     		cmp	r3, #18
 236 008e 02D9     		bls	.L24
 205:../src/system_efm32lg.c ****           ret = 6600000;
 237              		.loc 1 205 0
 238 0090 134B     		ldr	r3, .L30+28
 239 0092 7B60     		str	r3, [r7, #4]
 206:../src/system_efm32lg.c ****         else
 207:../src/system_efm32lg.c ****           ret = 7000000;
 208:../src/system_efm32lg.c ****         break;
 240              		.loc 1 208 0
 241 0094 10E0     		b	.L23
 242              	.L24:
 207:../src/system_efm32lg.c ****         break;
 243              		.loc 1 207 0
 244 0096 134B     		ldr	r3, .L30+32
 245 0098 7B60     		str	r3, [r7, #4]
 246              		.loc 1 208 0
 247 009a 0DE0     		b	.L23
 248              	.L18:
 209:../src/system_efm32lg.c **** 
 210:../src/system_efm32lg.c ****       case CMU_HFRCOCTRL_BAND_1MHZ:
 211:../src/system_efm32lg.c ****         if ( GetProdRev() >= 19 )
 249              		.loc 1 211 0
 250 009c FFF7FEFF 		bl	GetProdRev
 251 00a0 0346     		mov	r3, r0
 252 00a2 122B     		cmp	r3, #18
 253 00a4 02D9     		bls	.L26
 212:../src/system_efm32lg.c ****           ret = 1200000;
 254              		.loc 1 212 0
 255 00a6 104B     		ldr	r3, .L30+36
 256 00a8 7B60     		str	r3, [r7, #4]
 213:../src/system_efm32lg.c ****         else
 214:../src/system_efm32lg.c ****           ret = 1000000;
 215:../src/system_efm32lg.c ****         break;
 257              		.loc 1 215 0
 258 00aa 05E0     		b	.L23
 259              	.L26:
 214:../src/system_efm32lg.c ****         break;
 260              		.loc 1 214 0
 261 00ac 0F4B     		ldr	r3, .L30+40
 262 00ae 7B60     		str	r3, [r7, #4]
 263              		.loc 1 215 0
 264 00b0 02E0     		b	.L23
 265              	.L15:
 216:../src/system_efm32lg.c **** 
 217:../src/system_efm32lg.c ****       default:
 218:../src/system_efm32lg.c ****         ret = 0;
 266              		.loc 1 218 0
 267 00b2 0023     		movs	r3, #0
 268 00b4 7B60     		str	r3, [r7, #4]
 219:../src/system_efm32lg.c ****         break;
 269              		.loc 1 219 0
 270 00b6 00BF     		nop
 271              	.L23:
 220:../src/system_efm32lg.c ****       }
 221:../src/system_efm32lg.c ****       break;
 272              		.loc 1 221 0 discriminator 1
 273 00b8 00BF     		nop
 274              	.L14:
 222:../src/system_efm32lg.c ****   }
 223:../src/system_efm32lg.c **** 
 224:../src/system_efm32lg.c ****   return ret;
 275              		.loc 1 224 0
 276 00ba 7B68     		ldr	r3, [r7, #4]
 225:../src/system_efm32lg.c **** }
 277              		.loc 1 225 0
 278 00bc 1846     		mov	r0, r3
 279 00be 0837     		adds	r7, r7, #8
 280              		.cfi_def_cfa_offset 8
 281 00c0 BD46     		mov	sp, r7
 282              		.cfi_def_cfa_register 13
 283              		@ sp needed
 284 00c2 80BD     		pop	{r7, pc}
 285              	.L31:
 286              		.align	2
 287              	.L30:
 288 00c4 00800C40 		.word	1074561024
 289 00c8 00000000 		.word	SystemLFXOClock
 290 00cc 00000000 		.word	SystemHFXOClock
 291 00d0 003FAB01 		.word	28000000
 292 00d4 406F4001 		.word	21000000
 293 00d8 809FD500 		.word	14000000
 294 00dc C0D8A700 		.word	11000000
 295 00e0 40B56400 		.word	6600000
 296 00e4 C0CF6A00 		.word	7000000
 297 00e8 804F1200 		.word	1200000
 298 00ec 40420F00 		.word	1000000
 299              		.cfi_endproc
 300              	.LFE59:
 302              		.section	.text.SystemHFXOClockGet,"ax",%progbits
 303              		.align	2
 304              		.global	SystemHFXOClockGet
 305              		.thumb
 306              		.thumb_func
 308              	SystemHFXOClockGet:
 309              	.LFB60:
 226:../src/system_efm32lg.c **** 
 227:../src/system_efm32lg.c **** 
 228:../src/system_efm32lg.c **** /**************************************************************************//**
 229:../src/system_efm32lg.c ****  * @brief
 230:../src/system_efm32lg.c ****  *   Get high frequency crystal oscillator clock frequency for target system.
 231:../src/system_efm32lg.c ****  *
 232:../src/system_efm32lg.c ****  * @note
 233:../src/system_efm32lg.c ****  *   This is an EFM32 proprietary function, not part of the CMSIS definition.
 234:../src/system_efm32lg.c ****  *
 235:../src/system_efm32lg.c ****  * @return
 236:../src/system_efm32lg.c ****  *   HFXO frequency in Hz.
 237:../src/system_efm32lg.c ****  *****************************************************************************/
 238:../src/system_efm32lg.c **** uint32_t SystemHFXOClockGet(void)
 239:../src/system_efm32lg.c **** {
 310              		.loc 1 239 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 1, uses_anonymous_args = 0
 314              		@ link register save eliminated.
 315 0000 80B4     		push	{r7}
 316              		.cfi_def_cfa_offset 4
 317              		.cfi_offset 7, -4
 318 0002 00AF     		add	r7, sp, #0
 319              		.cfi_def_cfa_register 7
 240:../src/system_efm32lg.c ****   /* External crystal oscillator present? */
 241:../src/system_efm32lg.c **** #if (EFM32_HFXO_FREQ > 0)
 242:../src/system_efm32lg.c ****   return SystemHFXOClock;
 320              		.loc 1 242 0
 321 0004 034B     		ldr	r3, .L34
 322 0006 1B68     		ldr	r3, [r3]
 243:../src/system_efm32lg.c **** #else
 244:../src/system_efm32lg.c ****   return 0;
 245:../src/system_efm32lg.c **** #endif
 246:../src/system_efm32lg.c **** }
 323              		.loc 1 246 0
 324 0008 1846     		mov	r0, r3
 325 000a BD46     		mov	sp, r7
 326              		.cfi_def_cfa_register 13
 327              		@ sp needed
 328 000c 5DF8047B 		ldr	r7, [sp], #4
 329              		.cfi_restore 7
 330              		.cfi_def_cfa_offset 0
 331 0010 7047     		bx	lr
 332              	.L35:
 333 0012 00BF     		.align	2
 334              	.L34:
 335 0014 00000000 		.word	SystemHFXOClock
 336              		.cfi_endproc
 337              	.LFE60:
 339              		.section	.text.SystemHFXOClockSet,"ax",%progbits
 340              		.align	2
 341              		.global	SystemHFXOClockSet
 342              		.thumb
 343              		.thumb_func
 345              	SystemHFXOClockSet:
 346              	.LFB61:
 247:../src/system_efm32lg.c **** 
 248:../src/system_efm32lg.c **** 
 249:../src/system_efm32lg.c **** /**************************************************************************//**
 250:../src/system_efm32lg.c ****  * @brief
 251:../src/system_efm32lg.c ****  *   Set high frequency crystal oscillator clock frequency for target system.
 252:../src/system_efm32lg.c ****  *
 253:../src/system_efm32lg.c ****  * @note
 254:../src/system_efm32lg.c ****  *   This function is mainly provided for being able to handle target systems
 255:../src/system_efm32lg.c ****  *   with different HF crystal oscillator frequencies run-time. If used, it
 256:../src/system_efm32lg.c ****  *   should probably only be used once during system startup.
 257:../src/system_efm32lg.c ****  *
 258:../src/system_efm32lg.c ****  * @note
 259:../src/system_efm32lg.c ****  *   This is an EFM32 proprietary function, not part of the CMSIS definition.
 260:../src/system_efm32lg.c ****  *
 261:../src/system_efm32lg.c ****  * @param[in] freq
 262:../src/system_efm32lg.c ****  *   HFXO frequency in Hz used for target.
 263:../src/system_efm32lg.c ****  *****************************************************************************/
 264:../src/system_efm32lg.c **** void SystemHFXOClockSet(uint32_t freq)
 265:../src/system_efm32lg.c **** {
 347              		.loc 1 265 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 8
 350              		@ frame_needed = 1, uses_anonymous_args = 0
 351 0000 80B5     		push	{r7, lr}
 352              		.cfi_def_cfa_offset 8
 353              		.cfi_offset 7, -8
 354              		.cfi_offset 14, -4
 355 0002 82B0     		sub	sp, sp, #8
 356              		.cfi_def_cfa_offset 16
 357 0004 00AF     		add	r7, sp, #0
 358              		.cfi_def_cfa_register 7
 359 0006 7860     		str	r0, [r7, #4]
 266:../src/system_efm32lg.c ****   /* External crystal oscillator present? */
 267:../src/system_efm32lg.c **** #if (EFM32_HFXO_FREQ > 0)
 268:../src/system_efm32lg.c ****   SystemHFXOClock = freq;
 360              		.loc 1 268 0
 361 0008 064A     		ldr	r2, .L38
 362 000a 7B68     		ldr	r3, [r7, #4]
 363 000c 1360     		str	r3, [r2]
 269:../src/system_efm32lg.c **** 
 270:../src/system_efm32lg.c ****   /* Update core clock frequency if HFXO is used to clock core */
 271:../src/system_efm32lg.c ****   if (CMU->STATUS & CMU_STATUS_HFXOSEL)
 364              		.loc 1 271 0
 365 000e 064B     		ldr	r3, .L38+4
 366 0010 DB6A     		ldr	r3, [r3, #44]
 367 0012 03F40063 		and	r3, r3, #2048
 368 0016 002B     		cmp	r3, #0
 369 0018 01D0     		beq	.L36
 272:../src/system_efm32lg.c ****   {
 273:../src/system_efm32lg.c ****     /* The function will update the global variable */
 274:../src/system_efm32lg.c ****     SystemCoreClockGet();
 370              		.loc 1 274 0
 371 001a FFF7FEFF 		bl	SystemCoreClockGet
 372              	.L36:
 275:../src/system_efm32lg.c ****   }
 276:../src/system_efm32lg.c **** #else
 277:../src/system_efm32lg.c ****   (void)freq; /* Unused parameter */
 278:../src/system_efm32lg.c **** #endif
 279:../src/system_efm32lg.c **** }
 373              		.loc 1 279 0
 374 001e 0837     		adds	r7, r7, #8
 375              		.cfi_def_cfa_offset 8
 376 0020 BD46     		mov	sp, r7
 377              		.cfi_def_cfa_register 13
 378              		@ sp needed
 379 0022 80BD     		pop	{r7, pc}
 380              	.L39:
 381              		.align	2
 382              	.L38:
 383 0024 00000000 		.word	SystemHFXOClock
 384 0028 00800C40 		.word	1074561024
 385              		.cfi_endproc
 386              	.LFE61:
 388              		.section	.text.SystemInit,"ax",%progbits
 389              		.align	2
 390              		.global	SystemInit
 391              		.thumb
 392              		.thumb_func
 394              	SystemInit:
 395              	.LFB62:
 280:../src/system_efm32lg.c **** 
 281:../src/system_efm32lg.c **** 
 282:../src/system_efm32lg.c **** /**************************************************************************//**
 283:../src/system_efm32lg.c ****  * @brief
 284:../src/system_efm32lg.c ****  *   Initialize the system.
 285:../src/system_efm32lg.c ****  *
 286:../src/system_efm32lg.c ****  * @details
 287:../src/system_efm32lg.c ****  *   Do required generic HW system init.
 288:../src/system_efm32lg.c ****  *
 289:../src/system_efm32lg.c ****  * @note
 290:../src/system_efm32lg.c ****  *   This function is invoked during system init, before the main() routine
 291:../src/system_efm32lg.c ****  *   and any data has been initialized. For this reason, it cannot do any
 292:../src/system_efm32lg.c ****  *   initialization of variables etc.
 293:../src/system_efm32lg.c ****  *****************************************************************************/
 294:../src/system_efm32lg.c **** void SystemInit(void)
 295:../src/system_efm32lg.c **** {
 396              		.loc 1 295 0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 1, uses_anonymous_args = 0
 400              		@ link register save eliminated.
 401 0000 80B4     		push	{r7}
 402              		.cfi_def_cfa_offset 4
 403              		.cfi_offset 7, -4
 404 0002 00AF     		add	r7, sp, #0
 405              		.cfi_def_cfa_register 7
 296:../src/system_efm32lg.c **** }
 406              		.loc 1 296 0
 407 0004 BD46     		mov	sp, r7
 408              		.cfi_def_cfa_register 13
 409              		@ sp needed
 410 0006 5DF8047B 		ldr	r7, [sp], #4
 411              		.cfi_restore 7
 412              		.cfi_def_cfa_offset 0
 413 000a 7047     		bx	lr
 414              		.cfi_endproc
 415              	.LFE62:
 417              		.section	.text.SystemLFRCOClockGet,"ax",%progbits
 418              		.align	2
 419              		.global	SystemLFRCOClockGet
 420              		.thumb
 421              		.thumb_func
 423              	SystemLFRCOClockGet:
 424              	.LFB63:
 297:../src/system_efm32lg.c **** 
 298:../src/system_efm32lg.c **** 
 299:../src/system_efm32lg.c **** /**************************************************************************//**
 300:../src/system_efm32lg.c ****  * @brief
 301:../src/system_efm32lg.c ****  *   Get low frequency RC oscillator clock frequency for target system.
 302:../src/system_efm32lg.c ****  *
 303:../src/system_efm32lg.c ****  * @note
 304:../src/system_efm32lg.c ****  *   This is an EFM32 proprietary function, not part of the CMSIS definition.
 305:../src/system_efm32lg.c ****  *
 306:../src/system_efm32lg.c ****  * @return
 307:../src/system_efm32lg.c ****  *   LFRCO frequency in Hz.
 308:../src/system_efm32lg.c ****  *****************************************************************************/
 309:../src/system_efm32lg.c **** uint32_t SystemLFRCOClockGet(void)
 310:../src/system_efm32lg.c **** {
 425              		.loc 1 310 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 1, uses_anonymous_args = 0
 429              		@ link register save eliminated.
 430 0000 80B4     		push	{r7}
 431              		.cfi_def_cfa_offset 4
 432              		.cfi_offset 7, -4
 433 0002 00AF     		add	r7, sp, #0
 434              		.cfi_def_cfa_register 7
 311:../src/system_efm32lg.c ****   /* Currently we assume that this frequency is properly tuned during */
 312:../src/system_efm32lg.c ****   /* manufacturing and is not changed after reset. If future requirements */
 313:../src/system_efm32lg.c ****   /* for re-tuning by user, we can add support for that. */
 314:../src/system_efm32lg.c ****   return EFM32_LFRCO_FREQ;
 435              		.loc 1 314 0
 436 0004 4FF40043 		mov	r3, #32768
 315:../src/system_efm32lg.c **** }
 437              		.loc 1 315 0
 438 0008 1846     		mov	r0, r3
 439 000a BD46     		mov	sp, r7
 440              		.cfi_def_cfa_register 13
 441              		@ sp needed
 442 000c 5DF8047B 		ldr	r7, [sp], #4
 443              		.cfi_restore 7
 444              		.cfi_def_cfa_offset 0
 445 0010 7047     		bx	lr
 446              		.cfi_endproc
 447              	.LFE63:
 449 0012 00BF     		.section	.text.SystemULFRCOClockGet,"ax",%progbits
 450              		.align	2
 451              		.global	SystemULFRCOClockGet
 452              		.thumb
 453              		.thumb_func
 455              	SystemULFRCOClockGet:
 456              	.LFB64:
 316:../src/system_efm32lg.c **** 
 317:../src/system_efm32lg.c **** 
 318:../src/system_efm32lg.c **** /**************************************************************************//**
 319:../src/system_efm32lg.c ****  * @brief
 320:../src/system_efm32lg.c ****  *   Get ultra low frequency RC oscillator clock frequency for target system.
 321:../src/system_efm32lg.c ****  *
 322:../src/system_efm32lg.c ****  * @note
 323:../src/system_efm32lg.c ****  *   This is an EFM32 proprietary function, not part of the CMSIS definition.
 324:../src/system_efm32lg.c ****  *
 325:../src/system_efm32lg.c ****  * @return
 326:../src/system_efm32lg.c ****  *   ULFRCO frequency in Hz.
 327:../src/system_efm32lg.c ****  *****************************************************************************/
 328:../src/system_efm32lg.c **** uint32_t SystemULFRCOClockGet(void)
 329:../src/system_efm32lg.c **** {
 457              		.loc 1 329 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 1, uses_anonymous_args = 0
 461              		@ link register save eliminated.
 462 0000 80B4     		push	{r7}
 463              		.cfi_def_cfa_offset 4
 464              		.cfi_offset 7, -4
 465 0002 00AF     		add	r7, sp, #0
 466              		.cfi_def_cfa_register 7
 330:../src/system_efm32lg.c ****   /* The ULFRCO frequency is not tuned, and can be very inaccurate */
 331:../src/system_efm32lg.c ****   return EFM32_ULFRCO_FREQ;
 467              		.loc 1 331 0
 468 0004 4FF47A73 		mov	r3, #1000
 332:../src/system_efm32lg.c **** }
 469              		.loc 1 332 0
 470 0008 1846     		mov	r0, r3
 471 000a BD46     		mov	sp, r7
 472              		.cfi_def_cfa_register 13
 473              		@ sp needed
 474 000c 5DF8047B 		ldr	r7, [sp], #4
 475              		.cfi_restore 7
 476              		.cfi_def_cfa_offset 0
 477 0010 7047     		bx	lr
 478              		.cfi_endproc
 479              	.LFE64:
 481 0012 00BF     		.section	.text.SystemLFXOClockGet,"ax",%progbits
 482              		.align	2
 483              		.global	SystemLFXOClockGet
 484              		.thumb
 485              		.thumb_func
 487              	SystemLFXOClockGet:
 488              	.LFB65:
 333:../src/system_efm32lg.c **** 
 334:../src/system_efm32lg.c **** 
 335:../src/system_efm32lg.c **** /**************************************************************************//**
 336:../src/system_efm32lg.c ****  * @brief
 337:../src/system_efm32lg.c ****  *   Get low frequency crystal oscillator clock frequency for target system.
 338:../src/system_efm32lg.c ****  *
 339:../src/system_efm32lg.c ****  * @note
 340:../src/system_efm32lg.c ****  *   This is an EFM32 proprietary function, not part of the CMSIS definition.
 341:../src/system_efm32lg.c ****  *
 342:../src/system_efm32lg.c ****  * @return
 343:../src/system_efm32lg.c ****  *   LFXO frequency in Hz.
 344:../src/system_efm32lg.c ****  *****************************************************************************/
 345:../src/system_efm32lg.c **** uint32_t SystemLFXOClockGet(void)
 346:../src/system_efm32lg.c **** {
 489              		.loc 1 346 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493              		@ link register save eliminated.
 494 0000 80B4     		push	{r7}
 495              		.cfi_def_cfa_offset 4
 496              		.cfi_offset 7, -4
 497 0002 00AF     		add	r7, sp, #0
 498              		.cfi_def_cfa_register 7
 347:../src/system_efm32lg.c ****   /* External crystal oscillator present? */
 348:../src/system_efm32lg.c **** #if (EFM32_LFXO_FREQ > 0)
 349:../src/system_efm32lg.c ****   return SystemLFXOClock;
 499              		.loc 1 349 0
 500 0004 034B     		ldr	r3, .L47
 501 0006 1B68     		ldr	r3, [r3]
 350:../src/system_efm32lg.c **** #else
 351:../src/system_efm32lg.c ****   return 0;
 352:../src/system_efm32lg.c **** #endif
 353:../src/system_efm32lg.c **** }
 502              		.loc 1 353 0
 503 0008 1846     		mov	r0, r3
 504 000a BD46     		mov	sp, r7
 505              		.cfi_def_cfa_register 13
 506              		@ sp needed
 507 000c 5DF8047B 		ldr	r7, [sp], #4
 508              		.cfi_restore 7
 509              		.cfi_def_cfa_offset 0
 510 0010 7047     		bx	lr
 511              	.L48:
 512 0012 00BF     		.align	2
 513              	.L47:
 514 0014 00000000 		.word	SystemLFXOClock
 515              		.cfi_endproc
 516              	.LFE65:
 518              		.section	.text.SystemLFXOClockSet,"ax",%progbits
 519              		.align	2
 520              		.global	SystemLFXOClockSet
 521              		.thumb
 522              		.thumb_func
 524              	SystemLFXOClockSet:
 525              	.LFB66:
 354:../src/system_efm32lg.c **** 
 355:../src/system_efm32lg.c **** 
 356:../src/system_efm32lg.c **** /**************************************************************************//**
 357:../src/system_efm32lg.c ****  * @brief
 358:../src/system_efm32lg.c ****  *   Set low frequency crystal oscillator clock frequency for target system.
 359:../src/system_efm32lg.c ****  *
 360:../src/system_efm32lg.c ****  * @note
 361:../src/system_efm32lg.c ****  *   This function is mainly provided for being able to handle target systems
 362:../src/system_efm32lg.c ****  *   with different HF crystal oscillator frequencies run-time. If used, it
 363:../src/system_efm32lg.c ****  *   should probably only be used once during system startup.
 364:../src/system_efm32lg.c ****  *
 365:../src/system_efm32lg.c ****  * @note
 366:../src/system_efm32lg.c ****  *   This is an EFM32 proprietary function, not part of the CMSIS definition.
 367:../src/system_efm32lg.c ****  *
 368:../src/system_efm32lg.c ****  * @param[in] freq
 369:../src/system_efm32lg.c ****  *   LFXO frequency in Hz used for target.
 370:../src/system_efm32lg.c ****  *****************************************************************************/
 371:../src/system_efm32lg.c **** void SystemLFXOClockSet(uint32_t freq)
 372:../src/system_efm32lg.c **** {
 526              		.loc 1 372 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 8
 529              		@ frame_needed = 1, uses_anonymous_args = 0
 530 0000 80B5     		push	{r7, lr}
 531              		.cfi_def_cfa_offset 8
 532              		.cfi_offset 7, -8
 533              		.cfi_offset 14, -4
 534 0002 82B0     		sub	sp, sp, #8
 535              		.cfi_def_cfa_offset 16
 536 0004 00AF     		add	r7, sp, #0
 537              		.cfi_def_cfa_register 7
 538 0006 7860     		str	r0, [r7, #4]
 373:../src/system_efm32lg.c ****   /* External crystal oscillator present? */
 374:../src/system_efm32lg.c **** #if (EFM32_LFXO_FREQ > 0)
 375:../src/system_efm32lg.c ****   SystemLFXOClock = freq;
 539              		.loc 1 375 0
 540 0008 064A     		ldr	r2, .L51
 541 000a 7B68     		ldr	r3, [r7, #4]
 542 000c 1360     		str	r3, [r2]
 376:../src/system_efm32lg.c **** 
 377:../src/system_efm32lg.c ****   /* Update core clock frequency if LFXO is used to clock core */
 378:../src/system_efm32lg.c ****   if (CMU->STATUS & CMU_STATUS_LFXOSEL)
 543              		.loc 1 378 0
 544 000e 064B     		ldr	r3, .L51+4
 545 0010 DB6A     		ldr	r3, [r3, #44]
 546 0012 03F40053 		and	r3, r3, #8192
 547 0016 002B     		cmp	r3, #0
 548 0018 01D0     		beq	.L49
 379:../src/system_efm32lg.c ****   {
 380:../src/system_efm32lg.c ****     /* The function will update the global variable */
 381:../src/system_efm32lg.c ****     SystemCoreClockGet();
 549              		.loc 1 381 0
 550 001a FFF7FEFF 		bl	SystemCoreClockGet
 551              	.L49:
 382:../src/system_efm32lg.c ****   }
 383:../src/system_efm32lg.c **** #else
 384:../src/system_efm32lg.c ****   (void)freq; /* Unused parameter */
 385:../src/system_efm32lg.c **** #endif
 386:../src/system_efm32lg.c **** }
 552              		.loc 1 386 0
 553 001e 0837     		adds	r7, r7, #8
 554              		.cfi_def_cfa_offset 8
 555 0020 BD46     		mov	sp, r7
 556              		.cfi_def_cfa_register 13
 557              		@ sp needed
 558 0022 80BD     		pop	{r7, pc}
 559              	.L52:
 560              		.align	2
 561              	.L51:
 562 0024 00000000 		.word	SystemLFXOClock
 563 0028 00800C40 		.word	1074561024
 564              		.cfi_endproc
 565              	.LFE66:
 567              		.text
 568              	.Letext0:
 569              		.file 2 "c:\\program files (x86)\\emprog\\thunderbench-arm-v3.85\\arm\\arm-none-eabi\\include\\mac
 570              		.file 3 "c:\\program files (x86)\\emprog\\thunderbench-arm-v3.85\\arm\\arm-none-eabi\\include\\std
 571              		.file 4 "U:\\Thunderspace\\EFM32LG330F128\\Libraries\\Device\\EnergyMicro\\EFM32\\Include/efm32lg3
 572              		.file 5 "U:\\Thunderspace\\EFM32LG330F128\\Libraries\\Device\\EnergyMicro\\EFM32\\Include/efm32lg_
 573              		.file 6 "U:\\Thunderspace\\EFM32LG330F128\\Libraries\\CMSIS\\Include/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_efm32lg.c
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:19     .data.SystemHFXOClock:00000000 $d
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:22     .data.SystemHFXOClock:00000000 SystemHFXOClock
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:25     .data.SystemLFXOClock:00000000 $d
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:28     .data.SystemLFXOClock:00000000 SystemLFXOClock
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:31     .text.GetProdRev:00000000 $t
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:35     .text.GetProdRev:00000000 GetProdRev
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:67     .text.GetProdRev:00000018 $d
                            *COM*:00000004 SystemCoreClock
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:73     .text.SystemCoreClockGet:00000000 $t
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:78     .text.SystemCoreClockGet:00000000 SystemCoreClockGet
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:140    .text.SystemHFClockGet:00000000 SystemHFClockGet
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:129    .text.SystemCoreClockGet:00000040 $d
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:135    .text.SystemHFClockGet:00000000 $t
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:288    .text.SystemHFClockGet:000000c4 $d
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:303    .text.SystemHFXOClockGet:00000000 $t
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:308    .text.SystemHFXOClockGet:00000000 SystemHFXOClockGet
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:335    .text.SystemHFXOClockGet:00000014 $d
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:340    .text.SystemHFXOClockSet:00000000 $t
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:345    .text.SystemHFXOClockSet:00000000 SystemHFXOClockSet
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:383    .text.SystemHFXOClockSet:00000024 $d
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:389    .text.SystemInit:00000000 $t
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:394    .text.SystemInit:00000000 SystemInit
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:418    .text.SystemLFRCOClockGet:00000000 $t
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:423    .text.SystemLFRCOClockGet:00000000 SystemLFRCOClockGet
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:450    .text.SystemULFRCOClockGet:00000000 $t
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:455    .text.SystemULFRCOClockGet:00000000 SystemULFRCOClockGet
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:482    .text.SystemLFXOClockGet:00000000 $t
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:487    .text.SystemLFXOClockGet:00000000 SystemLFXOClockGet
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:514    .text.SystemLFXOClockGet:00000014 $d
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:519    .text.SystemLFXOClockSet:00000000 $t
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:524    .text.SystemLFXOClockSet:00000000 SystemLFXOClockSet
C:\Users\Riley\AppData\Local\Temp\ccKb8gSg.s:562    .text.SystemLFXOClockSet:00000024 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
